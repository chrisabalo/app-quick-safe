{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"E:\\\\local\\\\app-quick-safe\\\\node_modules\\\\@react-navigation\\\\drawer\\\\src\\\\views\\\\TouchableItem.tsx\";\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nvar ANDROID_VERSION_LOLLIPOP = 21;\nexport default function TouchableItem(_ref) {\n  var _ref$borderless = _ref.borderless,\n    borderless = _ref$borderless === void 0 ? false : _ref$borderless,\n    _ref$pressColor = _ref.pressColor,\n    pressColor = _ref$pressColor === void 0 ? 'rgba(0, 0, 0, .32)' : _ref$pressColor,\n    style = _ref.style,\n    children = _ref.children,\n    rest = _objectWithoutProperties(_ref, [\"borderless\", \"pressColor\", \"style\", \"children\"]);\n  if (Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP) {\n    return React.createElement(TouchableNativeFeedback, _extends({}, rest, {\n      useForeground: TouchableNativeFeedback.canUseNativeForeground(),\n      background: TouchableNativeFeedback.Ripple(pressColor, borderless),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }\n    }), React.createElement(View, {\n      style: style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, React.Children.only(children)));\n  } else {\n    return React.createElement(TouchableOpacity, _extends({\n      style: style\n    }, rest, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }), children);\n  }\n}","map":{"version":3,"names":["React","ANDROID_VERSION_LOLLIPOP","TouchableItem","borderless","pressColor","style","children","rest","Platform","OS","Version","TouchableNativeFeedback","canUseNativeForeground","Ripple","Children","only"],"sources":["E:/local/app-quick-safe/node_modules/@react-navigation/drawer/src/views/TouchableItem.tsx"],"sourcesContent":["/**\n * TouchableItem provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity to handle platform differences.\n *\n * On Android, you can pass the props of TouchableNativeFeedback.\n * On other platforms, you can pass the props of TouchableOpacity.\n */\nimport * as React from 'react';\nimport {\n  Platform,\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  View,\n  ViewProps,\n} from 'react-native';\n\nexport type Props = ViewProps & {\n  pressColor?: string;\n  disabled?: boolean | null;\n  borderless?: boolean;\n  delayPressIn?: number;\n  onPress?: () => void;\n  children: React.ReactNode;\n};\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\n\nexport default function TouchableItem({\n  borderless = false,\n  pressColor = 'rgba(0, 0, 0, .32)',\n  style,\n  children,\n  ...rest\n}: Props) {\n  /*\n   * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\n   * therefore only enable it on Android Lollipop and above.\n   *\n   * All touchables on Android should have the ripple effect according to\n   * platform design guidelines.\n   * We need to pass the background prop to specify a borderless ripple effect.\n   */\n  if (\n    Platform.OS === 'android' &&\n    Platform.Version >= ANDROID_VERSION_LOLLIPOP\n  ) {\n    return (\n      <TouchableNativeFeedback\n        {...rest}\n        useForeground={TouchableNativeFeedback.canUseNativeForeground()}\n        background={TouchableNativeFeedback.Ripple(pressColor, borderless)}\n      >\n        <View style={style}>{React.Children.only(children)}</View>\n      </TouchableNativeFeedback>\n    );\n  } else {\n    return (\n      <TouchableOpacity style={style} {...rest}>\n        {children}\n      </TouchableOpacity>\n    );\n  }\n}\n"],"mappings":";;;AAOA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAC;AAAA;AAAA;AAAA;AAkB/B,IAAMC,wBAAwB,GAAG,EAAE;AAEnC,eAAe,SAASC,aAAa,OAM3B;EAAA,2BALRC,UAAU;IAAVA,UAAU,gCAAG,KAAK;IAAA,uBAClBC,UAAU;IAAVA,UAAU,gCAAG,oBAAoB;IACjCC,KAAK,QAALA,KAAK;IACLC,QAAQ,QAARA,QAAQ;IACLC,IAAI;EAUP,IACEC,QAAQ,CAACC,EAAE,KAAK,SAAS,IACzBD,QAAQ,CAACE,OAAO,IAAIT,wBAAwB,EAC5C;IACA,OACE,oBAAC,uBAAuB,eAClBM,IAAI;MACR,aAAa,EAAEI,uBAAuB,CAACC,sBAAsB,EAAG;MAChE,UAAU,EAAED,uBAAuB,CAACE,MAAM,CAACT,UAAU,EAAED,UAAU,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,IAEnE,oBAAC,IAAI;MAAC,KAAK,EAAEE,KAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAEL,KAAK,CAACc,QAAQ,CAACC,IAAI,CAACT,QAAQ,CAAC,CAAQ,CAClC;EAE9B,CAAC,MAAM;IACL,OACE,oBAAC,gBAAgB;MAAC,KAAK,EAAED;IAAM,GAAKE,IAAI;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,IACrCD,QAAQ,CACQ;EAEvB;AACF"},"metadata":{},"sourceType":"module"}