{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport color from 'color';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"../Typography/Text\";\nimport Icon from \"../Icon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\n\nvar DrawerItem = function DrawerItem(_ref) {\n  var icon = _ref.icon,\n    label = _ref.label,\n    active = _ref.active,\n    theme = _ref.theme,\n    style = _ref.style,\n    onPress = _ref.onPress,\n    accessibilityLabel = _ref.accessibilityLabel,\n    rest = _objectWithoutProperties(_ref, [\"icon\", \"label\", \"active\", \"theme\", \"style\", \"onPress\", \"accessibilityLabel\"]);\n  var colors = theme.colors,\n    roundness = theme.roundness;\n  var backgroundColor = active ? color(colors.primary).alpha(0.12).rgb().string() : 'transparent';\n  var contentColor = active ? colors.primary : color(colors.text).alpha(0.68).rgb().string();\n  var font = theme.fonts.medium;\n  var labelMargin = icon ? 32 : 0;\n  return React.createElement(View, _extends({}, rest, {\n    style: [styles.container, {\n      backgroundColor: backgroundColor,\n      borderRadius: roundness\n    }, style]\n  }), React.createElement(TouchableRipple, {\n    borderless: true,\n    delayPressIn: 0,\n    onPress: onPress,\n    style: {\n      borderRadius: roundness\n    },\n    accessibilityTraits: active ? ['button', 'selected'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: active\n    },\n    accessibilityLabel: accessibilityLabel\n  }, React.createElement(View, {\n    style: styles.wrapper\n  }, icon ? React.createElement(Icon, {\n    source: icon,\n    size: 24,\n    color: contentColor\n  }) : null, React.createElement(Text, {\n    numberOfLines: 1,\n    style: [styles.label, _objectSpread(_objectSpread({\n      color: contentColor\n    }, font), {}, {\n      marginLeft: labelMargin\n    })]\n  }, label))));\n};\nDrawerItem.displayName = 'Drawer.Item';\nvar styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  label: {\n    marginRight: 32\n  }\n});\nexport default withTheme(DrawerItem);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAAA;AAAA;AAEA,OAAOC,IAAP;AACA,OAAOC,IAAP;AACA,OAAOC,eAAP;AACA,SAASC,SAAT;;AAuDA,IAAMC,UAAU,GAAG,SAAbA,UAAU,CAAGC,MASN;EAAA,IARXC,IADkB,GASPD,KARXC,IADkB;IAElBC,KAFkB,GASPF,KAPXE,KAFkB;IAGlBC,MAHkB,GASPH,KANXG,MAHkB;IAIlBC,KAJkB,GASPJ,KALXI,KAJkB;IAKlBC,KALkB,GASPL,KAJXK,KALkB;IAMlBC,OANkB,GASPN,KAHXM,OANkB;IAOlBC,qBAEWP,KAFXO;IACGC,IACQ;EAAA,IACHC,MAAF,GAAwBL,KAA9B,CAAQK,MAAF;IAAUC,YAAcN,KAA9B,CAAgBM;EAChB,IAAMC,eAAe,GAAGR,MAAM,GAC1BV,KAAK,CAACgB,MAAM,CAACG,OAAR,CAAL,CAAsBC,KAAtB,CAA4B,IAA5B,EAAkCC,GAAlC,GAAwCC,MAAxC,EAD0B,GAE1B,aAFJ;EAGA,IAAMC,YAAY,GAAGb,MAAM,GACvBM,MAAM,CAACG,OADgB,GAEvBnB,KAAK,CAACgB,MAAM,CAACQ,IAAR,CAAL,CAAmBJ,KAAnB,CAAyB,IAAzB,EAA+BC,GAA/B,GAAqCC,MAArC,EAFJ;EAGA,IAAMG,IAAI,GAAGd,KAAK,CAACe,KAAN,CAAYC,MAAzB;EACA,IAAMC,WAAW,GAAGpB,IAAI,GAAG,EAAH,GAAQ,CAAhC;EAEA,OACEP,oBAAC4B,IAAD,eACMd,IADN;IAEEH,KAAK,EAAE,CACLkB,MAAM,CAACC,SADF,EAEL;MAAEb,eAAF,EAAEA,eAAF;MAAmBc,YAAY,EAAEf;IAAjC,CAFK,EAGLL,KAHK;EAFT,IAQEX,oBAACG,eAAD;IACE6B,UAAU,MADZ;IAEEC,YAAY,EAAE,CAFhB;IAGErB,OAAO,EAAEA,OAHX;IAIED,KAAK,EAAE;MAAEoB,YAAY,EAAEf;IAAhB,CAJT;IAKEkB,mBAAmB,EAAEzB,MAAM,GAAG,CAAC,QAAD,EAAW,UAAX,CAAH,GAA4B,QALzD;IAME0B,0BAA0B,EAAC,QAN7B;IAOEC,iBAAiB,EAAC,QAPpB;IAQEC,kBAAkB,EAAE;MAAEC,QAAQ,EAAE7B;IAAZ,CARtB;IASEI,kBAAkB,EAAEA;EATtB,GAWEb,oBAAC4B,IAAD;IAAMjB,KAAK,EAAEkB,MAAM,CAACU;EAApB,GACGhC,IAAI,GAAGP,oBAACE,IAAD;IAAMsC,MAAM,EAAEjC,IAAd;IAAoBkC,IAAI,EAAE,EAA1B;IAA8B1C,KAAK,EAAEuB;EAArC,EAAH,GAA2D,IADlE,EAEEtB,oBAACC,IAAD;IACEyC,aAAa,EAAE,CADjB;IAEE/B,KAAK,EAAE,CACLkB,MAAM,CAACrB,KADF;MAGHT,KAAK,EAAEuB;IAHJ,GAIAE,IAJA;MAKHmB,UAAU,EAAEhB;IALT;EAFT,GAWGnB,KAXH,CAFF,CAXF,CARF,CADF;AAuCD,CA3DD;AA6DAH,UAAU,CAACuC,WAAX,GAAyB,aAAzB;AAEA,IAAMf,MAAM,GAAGgB,UAAU,CAACC,MAAX,CAAkB;EAC/BhB,SAAS,EAAE;IACTiB,gBAAgB,EAAE,EADT;IAETC,cAAc,EAAE;EAFP,CADoB;EAK/BT,OAAO,EAAE;IACPU,aAAa,EAAE,KADR;IAEPC,UAAU,EAAE,QAFL;IAGPC,OAAO,EAAE;EAHF,CALsB;EAU/B3C,KAAK,EAAE;IACL4C,WAAW,EAAE;EADR;AAVwB,CAAlB,CAAf;AAeA,eAAehD,SAAS,CAACC,UAAD,CAAxB","names":["color","React","Text","Icon","TouchableRipple","withTheme","DrawerItem","_ref","icon","label","active","theme","style","onPress","accessibilityLabel","rest","colors","roundness","backgroundColor","primary","alpha","rgb","string","contentColor","text","font","fonts","medium","labelMargin","View","styles","container","borderRadius","borderless","delayPressIn","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","selected","wrapper","source","size","numberOfLines","marginLeft","displayName","StyleSheet","create","marginHorizontal","marginVertical","flexDirection","alignItems","padding","marginRight"],"sources":["DrawerItem.tsx"],"sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Text from '../Typography/Text';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The label text of the item.\n   */\n  label: string;\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  active?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/drawer-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *    <Drawer.Item\n *      style={{ backgroundColor: '#64ffda' }}\n *      icon=\"star\"\n *      label=\"First Item\"\n *    />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst DrawerItem = ({\n  icon,\n  label,\n  active,\n  theme,\n  style,\n  onPress,\n  accessibilityLabel,\n  ...rest\n}: Props) => {\n  const { colors, roundness } = theme;\n  const backgroundColor = active\n    ? color(colors.primary).alpha(0.12).rgb().string()\n    : 'transparent';\n  const contentColor = active\n    ? colors.primary\n    : color(colors.text).alpha(0.68).rgb().string();\n  const font = theme.fonts.medium;\n  const labelMargin = icon ? 32 : 0;\n\n  return (\n    <View\n      {...rest}\n      style={[\n        styles.container,\n        { backgroundColor, borderRadius: roundness },\n        style,\n      ]}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        style={{ borderRadius: roundness }}\n        accessibilityTraits={active ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: active }}\n        accessibilityLabel={accessibilityLabel}\n      >\n        <View style={styles.wrapper}>\n          {icon ? <Icon source={icon} size={24} color={contentColor} /> : null}\n          <Text\n            numberOfLines={1}\n            style={[\n              styles.label,\n              {\n                color: contentColor,\n                ...font,\n                marginLeft: labelMargin,\n              },\n            ]}\n          >\n            {label}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </View>\n  );\n};\n\nDrawerItem.displayName = 'Drawer.Item';\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n  },\n});\n\nexport default withTheme(DrawerItem);\n"]},"metadata":{},"sourceType":"module"}