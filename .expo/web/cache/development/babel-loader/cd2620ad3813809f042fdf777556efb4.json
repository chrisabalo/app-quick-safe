{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"E:\\\\local\\\\app-quick-safe\\\\navigation\\\\AuthStack.js\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { createStackNavigator } from '@react-navigation/stack';\nimport FontAwesome from \"@expo/vector-icons/FontAwesome\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { ActivityIndicator } from 'react-native-paper';\nimport FormAccidentScreen from \"../screens/FormAccidentScreen\";\nimport LoadingScreen from \"../screens/LoadingScreen\";\nimport SignupScreen from \"../screens/SignupScreen\";\nimport LoginScreen from \"../screens/LoginScreen\";\nimport OnboardingScreen from \"../screens/Onboarding\";\nimport HomeScreen from \"../screens/HomeScreen\";\nvar Stack = createStackNavigator();\nvar AuthStack = function AuthStack() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    isFirstLaunch = _useState2[0],\n    setIsFirstLaunch = _useState2[1];\n  var _useState3 = useState(),\n    _useState4 = _slicedToArray(_useState3, 2),\n    userType = _useState4[0],\n    setUserType = _useState4[1];\n  var routeName;\n  useEffect(function () {\n    AsyncStorage.getItem('alreadyLaunched').then(function (value) {\n      if (value == null) {\n        AsyncStorage.setItem('alreadyLaunched', 'true');\n        setIsFirstLaunch(true);\n      } else {\n        setIsFirstLaunch(false);\n      }\n    });\n\n  }, []);\n  if (isFirstLaunch === null) {\n    return React.createElement(LoadingScreen, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }\n    });\n\n  } else if (isFirstLaunch === true) {\n    routeName = 'Onboarding';\n  } else {\n    routeName = 'Login';\n  }\n\n  return React.createElement(Stack.Navigator, {\n    initialRouteName: routeName,\n    mode: 'modal',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, React.createElement(Stack.Screen, {\n    name: \"Onboarding\",\n    component: OnboardingScreen,\n    options: {\n      header: function header() {\n        return null;\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Login\",\n    component: LoginScreen,\n    options: {\n      header: function header() {\n        return null;\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Loading\",\n    component: LoadingScreen,\n    options: {\n      header: function header() {\n        return null;\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Accident\",\n    component: FormAccidentScreen,\n    options: {\n      header: function header() {\n        return null;\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 8\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Signup\",\n    component: SignupScreen,\n    options: {\n      header: function header() {\n        return null;\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Home\",\n    component: HomeScreen,\n    options: {\n      header: function header() {\n        return null;\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }));\n};\nexport default AuthStack;","map":{"version":3,"names":["React","useState","useEffect","createStackNavigator","FontAwesome","AsyncStorage","ActivityIndicator","FormAccidentScreen","LoadingScreen","SignupScreen","LoginScreen","OnboardingScreen","HomeScreen","Stack","AuthStack","isFirstLaunch","setIsFirstLaunch","userType","setUserType","routeName","getItem","then","value","setItem","header"],"sources":["E:/local/app-quick-safe/navigation/AuthStack.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {View, StyleSheet} from 'react-native';\nimport {createStackNavigator} from '@react-navigation/stack';\nimport FontAwesome from 'react-native-vector-icons/FontAwesome';\nimport AsyncStorage from '@react-native-async-storage/async-storage'\nimport { ActivityIndicator } from 'react-native-paper';\n\nimport FormAccidentScreen from '../screens/FormAccidentScreen';\nimport LoadingScreen from '../screens/LoadingScreen';\nimport SignupScreen from '../screens/SignupScreen';\nimport LoginScreen from '../screens/LoginScreen';\nimport OnboardingScreen from '../screens/Onboarding';\nimport HomeScreen from \"../screens/HomeScreen\";\n\nconst Stack = createStackNavigator();\n\nconst AuthStack = () => {\n  const [isFirstLaunch, setIsFirstLaunch] = useState(null);\n  const [userType, setUserType] = useState();\n  let routeName;\n\n  useEffect(() => {\n    AsyncStorage.getItem('alreadyLaunched').then((value) => {\n      if (value == null) {\n        AsyncStorage.setItem('alreadyLaunched', 'true'); // No need to wait for `setItem` to finish, although you might want to handle errors\n        setIsFirstLaunch(true);\n      } else {\n        setIsFirstLaunch(false);\n      }\n    }); // Add some error handling, also you can simply do setIsFirstLaunch(null)\n\n    /* GoogleSignin.configure({\n      webClientId: 'YOUR_APP_WEB_CLIENT_ID',\n    }); */\n\n  }, []);\n\n  if (isFirstLaunch === null) {\n    return (\n    //  <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\"}}>\n    //     <ActivityIndicator animating={true} />\n    //   </View>\n      <LoadingScreen />\n    )\n    //routeName = 'Login';\n\n    //return null; // This is the 'tricky' part: The query to AsyncStorage is not finished, but we have to present something to the user. Null will just render nothing, so you can also put a placeholder of some sort, but effectively the interval between the first mount and AsyncStorage retrieving your data won't be noticeable to the user. But if you want to display anything then you can use a LOADER here\n  } else if (isFirstLaunch === true) {\n    routeName = 'Onboarding';\n  } else {\n    //routeName = 'Onboarding';\n    routeName = 'Login';\n    //return <LoadingScreen />\n    //routeName = 'Onboarding';\n    //return null;\n  }\n\n  return (\n    <Stack.Navigator initialRouteName={routeName}\n      mode={'modal'}\n    >\n      <Stack.Screen\n        name=\"Onboarding\"\n        component={OnboardingScreen}\n        options={{header: () => null}}\n      />\n      <Stack.Screen\n        name=\"Login\"\n        component={LoginScreen}\n        options={{header: () => null}}\n      />\n      <Stack.Screen\n        \n        name=\"Loading\"\n        component={LoadingScreen}\n        options={{header: () => null}}\n        \n      />\n       <Stack.Screen\n        \n        name=\"Accident\"\n        component={FormAccidentScreen}\n        options={{header: () => null}}\n        \n      />\n      <Stack.Screen\n        \n        name=\"Signup\"\n        component={SignupScreen}\n        options={{header: () => null}}\n        \n      />\n      <Stack.Screen\n\n          name=\"Home\"\n          component={HomeScreen}\n          options={{header: () => null}}\n\n      />\n    </Stack.Navigator>\n  );\n};\nexport default AuthStack;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}