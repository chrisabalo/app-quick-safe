{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"E:\\\\local\\\\app-quick-safe\\\\node_modules\\\\@react-navigation\\\\drawer\\\\src\\\\views\\\\ResourceSavingScene.tsx\";\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Screen, screensEnabled,\nshouldUseActivityState } from 'react-native-screens';\nvar FAR_FAR_AWAY = 30000;\n\nexport default function ResourceSavingScene(_ref) {\n  var isVisible = _ref.isVisible,\n    children = _ref.children,\n    style = _ref.style,\n    rest = _objectWithoutProperties(_ref, [\"isVisible\", \"children\", \"style\"]);\n  if (screensEnabled != null && screensEnabled() && Platform.OS !== 'web') {\n    if (shouldUseActivityState) {\n      return React.createElement(Screen, _extends({\n        activityState: isVisible ? 2 : 0,\n        style: style\n      }, rest, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 9\n        }\n      }), children);\n    } else {\n      return React.createElement(Screen, _extends({\n        active: isVisible ? 1 : 0,\n        style: style\n      }, rest, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 9\n        }\n      }), children);\n    }\n  }\n  if (Platform.OS === 'web') {\n    return React.createElement(View\n    , _extends({\n      hidden: !isVisible,\n      style: [{\n        display: isVisible ? 'flex' : 'none'\n      }, styles.container, style],\n      pointerEvents: isVisible ? 'auto' : 'none'\n    }, rest, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    }), children);\n  }\n  return React.createElement(View, {\n    style: [styles.container, style]\n    ,\n    pointerEvents: isVisible ? 'auto' : 'none',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    collapsable: false,\n    removeClippedSubviews:\n    Platform.OS === 'ios' ? !isVisible : true,\n    pointerEvents: isVisible ? 'auto' : 'none',\n    style: isVisible ? styles.attached : styles.detached,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, children));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  attached: {\n    flex: 1\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});","map":{"version":3,"names":["React","Screen","screensEnabled","shouldUseActivityState","FAR_FAR_AWAY","ResourceSavingScene","isVisible","children","style","rest","Platform","OS","display","styles","container","attached","detached","StyleSheet","create","flex","top"],"sources":["E:/local/app-quick-safe/node_modules/@react-navigation/drawer/src/views/ResourceSavingScene.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport {\n  Screen,\n  screensEnabled,\n  // @ts-ignore\n  shouldUseActivityState,\n} from 'react-native-screens';\n\ntype Props = {\n  isVisible: boolean;\n  children: React.ReactNode;\n  enabled: boolean;\n  style?: any;\n};\n\nconst FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container\n\nexport default function ResourceSavingScene({\n  isVisible,\n  children,\n  style,\n  ...rest\n}: Props) {\n  // react-native-screens is buggy on web\n  if (screensEnabled?.() && Platform.OS !== 'web') {\n    if (shouldUseActivityState) {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screen activityState={isVisible ? 2 : 0} style={style} {...rest}>\n          {children}\n        </Screen>\n      );\n    } else {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screen active={isVisible ? 1 : 0} style={style} {...rest}>\n          {children}\n        </Screen>\n      );\n    }\n  }\n\n  if (Platform.OS === 'web') {\n    return (\n      <View\n        // @ts-expect-error: hidden exists on web, but not in React Native\n        hidden={!isVisible}\n        style={[\n          { display: isVisible ? 'flex' : 'none' },\n          styles.container,\n          style,\n        ]}\n        pointerEvents={isVisible ? 'auto' : 'none'}\n        {...rest}\n      >\n        {children}\n      </View>\n    );\n  }\n\n  return (\n    <View\n      style={[styles.container, style]}\n      // box-none doesn't seem to work properly on Android\n      pointerEvents={isVisible ? 'auto' : 'none'}\n    >\n      <View\n        collapsable={false}\n        removeClippedSubviews={\n          // On iOS, set removeClippedSubviews to true only when not focused\n          // This is an workaround for a bug where the clipped view never re-appears\n          Platform.OS === 'ios' ? !isVisible : true\n        }\n        pointerEvents={isVisible ? 'auto' : 'none'}\n        style={isVisible ? styles.attached : styles.detached}\n      >\n        {children}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n"],"mappings":";;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAC;AAAA;AAAA;AAE/B,SACEC,MAAM,EACNC,cAAc;AAEdC,sBAAsB,QACjB,sBAAsB;AAS7B,IAAMC,YAAY,GAAG,KAAK;;AAE1B,eAAe,SAASC,mBAAmB,OAKjC;EAAA,IAJRC,SAAS,QAATA,SAAS;IACTC,QAAQ,QAARA,QAAQ;IACRC,KAAK,QAALA,KAAK;IACFC,IAAI;EAGP,IAAIP,cAAc,YAAdA,cAAc,EAAI,IAAIQ,QAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;IAC/C,IAAIR,sBAAsB,EAAE;MAC1B,OAEE,oBAAC,MAAM;QAAC,aAAa,EAAEG,SAAS,GAAG,CAAC,GAAG,CAAE;QAAC,KAAK,EAAEE;MAAM,GAAKC,IAAI;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,IAC7DF,QAAQ,CACF;IAEb,CAAC,MAAM;MACL,OAEE,oBAAC,MAAM;QAAC,MAAM,EAAED,SAAS,GAAG,CAAC,GAAG,CAAE;QAAC,KAAK,EAAEE;MAAM,GAAKC,IAAI;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,IACtDF,QAAQ,CACF;IAEb;EACF;EAEA,IAAIG,QAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;IACzB,OACE,oBAAC;IAAI;MAEH,MAAM,EAAE,CAACL,SAAU;MACnB,KAAK,EAAE,CACL;QAAEM,OAAO,EAAEN,SAAS,GAAG,MAAM,GAAG;MAAO,CAAC,EACxCO,MAAM,CAACC,SAAS,EAChBN,KAAK,CACL;MACF,aAAa,EAAEF,SAAS,GAAG,MAAM,GAAG;IAAO,GACvCG,IAAI;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,IAEPF,QAAQ,CACJ;EAEX;EAEA,OACE,oBAAC,IAAI;IACH,KAAK,EAAE,CAACM,MAAM,CAACC,SAAS,EAAEN,KAAK;IAAE;IAEjC,aAAa,EAAEF,SAAS,GAAG,MAAM,GAAG,MAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAE3C,oBAAC,IAAI;IACH,WAAW,EAAE,KAAM;IACnB,qBAAqB;IAGnBI,QAAQ,CAACC,EAAE,KAAK,KAAK,GAAG,CAACL,SAAS,GAAG,IACtC;IACD,aAAa,EAAEA,SAAS,GAAG,MAAM,GAAG,MAAO;IAC3C,KAAK,EAAEA,SAAS,GAAGO,MAAM,CAACE,QAAQ,GAAGF,MAAM,CAACG,QAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAEpDT,QAAQ,CACJ,CACF;AAEX;AAEA,IAAMM,MAAM,GAAGI,UAAU,CAACC,MAAM,CAAC;EAC/BJ,SAAS,EAAE;IACTK,IAAI,EAAE;EACR,CAAC;EACDJ,QAAQ,EAAE;IACRI,IAAI,EAAE;EACR,CAAC;EACDH,QAAQ,EAAE;IACRG,IAAI,EAAE,CAAC;IACPC,GAAG,EAAEhB;EACP;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module"}