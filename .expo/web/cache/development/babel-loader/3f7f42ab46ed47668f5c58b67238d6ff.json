{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _this = this,\n  _jsxFileName = \"E:\\\\local\\\\app-quick-safe\\\\node_modules\\\\@react-navigation\\\\drawer\\\\src\\\\views\\\\DrawerItem.tsx\";\nimport * as React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport TouchableItem from \"./TouchableItem\";\nvar Touchable = function Touchable(_ref) {\n  var children = _ref.children,\n    style = _ref.style,\n    _onPress = _ref.onPress,\n    to = _ref.to,\n    accessibilityRole = _ref.accessibilityRole,\n    delayPressIn = _ref.delayPressIn,\n    rest = _objectWithoutProperties(_ref, [\"children\", \"style\", \"onPress\", \"to\", \"accessibilityRole\", \"delayPressIn\"]);\n  if (Platform.OS === 'web' && to) {\n    return React.createElement(Link, _extends({}, rest, {\n      to: to,\n      style: [styles.button, style],\n      onPress: function onPress(e) {\n        if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (\n        e.button == null || e.button === 0)) {\n          e.preventDefault();\n          _onPress == null ? void 0 : _onPress(e);\n        }\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }\n    }), children);\n  } else {\n    return React.createElement(TouchableItem, _extends({}, rest, {\n      accessibilityRole: accessibilityRole,\n      delayPressIn: delayPressIn,\n      onPress: _onPress,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }\n    }), React.createElement(View, {\n      style: style,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }\n    }, children));\n  }\n};\n\nexport default function DrawerItem(props) {\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var icon = props.icon,\n    label = props.label,\n    labelStyle = props.labelStyle,\n    to = props.to,\n    _props$focused = props.focused,\n    focused = _props$focused === void 0 ? false : _props$focused,\n    _props$activeTintColo = props.activeTintColor,\n    activeTintColor = _props$activeTintColo === void 0 ? colors.primary : _props$activeTintColo,\n    _props$inactiveTintCo = props.inactiveTintColor,\n    inactiveTintColor = _props$inactiveTintCo === void 0 ? Color(colors.text).alpha(0.68).rgb().string() : _props$inactiveTintCo,\n    _props$activeBackgrou = props.activeBackgroundColor,\n    activeBackgroundColor = _props$activeBackgrou === void 0 ? Color(activeTintColor).alpha(0.12).rgb().string() : _props$activeBackgrou,\n    _props$inactiveBackgr = props.inactiveBackgroundColor,\n    inactiveBackgroundColor = _props$inactiveBackgr === void 0 ? 'transparent' : _props$inactiveBackgr,\n    style = props.style,\n    onPress = props.onPress,\n    pressColor = props.pressColor,\n    pressOpacity = props.pressOpacity,\n    rest = _objectWithoutProperties(props, [\"icon\", \"label\", \"labelStyle\", \"to\", \"focused\", \"activeTintColor\", \"inactiveTintColor\", \"activeBackgroundColor\", \"inactiveBackgroundColor\", \"style\", \"onPress\", \"pressColor\", \"pressOpacity\"]);\n  var _StyleSheet$flatten = StyleSheet.flatten(style || {}),\n    _StyleSheet$flatten$b = _StyleSheet$flatten.borderRadius,\n    borderRadius = _StyleSheet$flatten$b === void 0 ? 4 : _StyleSheet$flatten$b;\n  var color = focused ? activeTintColor : inactiveTintColor;\n  var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n  var iconNode = icon ? icon({\n    size: 24,\n    focused: focused,\n    color: color\n  }) : null;\n  return React.createElement(View, _extends({\n    collapsable: false\n  }, rest, {\n    style: [styles.container, {\n      borderRadius: borderRadius,\n      backgroundColor: backgroundColor\n    }, style],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 5\n    }\n  }), React.createElement(Touchable, {\n    delayPressIn: 0,\n    onPress: onPress,\n    style: [styles.wrapper, {\n      borderRadius: borderRadius\n    }],\n    accessibilityTraits: focused ? ['button', 'selected'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: focused\n    }\n    ,\n    accessibilityStates: focused ? ['selected'] : [],\n    pressColor: pressColor,\n    pressOpacity: pressOpacity,\n    to: to,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }, React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }\n  }, iconNode, React.createElement(View, {\n    style: [styles.label, {\n      marginLeft: iconNode ? 32 : 0,\n      marginVertical: 5\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 11\n    }\n  }, typeof label === 'string' ? React.createElement(Text, {\n    numberOfLines: 1,\n    style: [{\n      color: color,\n      fontWeight: '500'\n    }, labelStyle],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 15\n    }\n  }, label) : label({\n    color: color,\n    focused: focused\n  })))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden'\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  label: {\n    marginRight: 32,\n    flex: 1\n  },\n  button: {\n    display: 'flex'\n  }\n});","map":{"version":3,"names":["React","Link","useTheme","Color","TouchableItem","Touchable","children","style","onPress","to","accessibilityRole","delayPressIn","rest","Platform","OS","styles","button","e","metaKey","altKey","ctrlKey","shiftKey","preventDefault","DrawerItem","props","colors","icon","label","labelStyle","focused","activeTintColor","primary","inactiveTintColor","text","alpha","rgb","string","activeBackgroundColor","inactiveBackgroundColor","pressColor","pressOpacity","StyleSheet","flatten","borderRadius","color","backgroundColor","iconNode","size","container","wrapper","selected","marginLeft","marginVertical","fontWeight","create","marginHorizontal","overflow","flexDirection","alignItems","padding","marginRight","flex","display"],"sources":["E:/local/app-quick-safe/node_modules/@react-navigation/drawer/src/views/DrawerItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Text,\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  Platform,\n  TouchableWithoutFeedbackProps,\n} from 'react-native';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport TouchableItem from './TouchableItem';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  focused?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Color of the touchable effect on press.\n   * Only supported on Android.\n   *\n   * @platform android\n   */\n  pressColor?: string;\n  /**\n   * Opacity of the touchable effect on press.\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  pressOpacity?: string;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nconst Touchable = ({\n  children,\n  style,\n  onPress,\n  to,\n  accessibilityRole,\n  delayPressIn,\n  ...rest\n}: TouchableWithoutFeedbackProps & {\n  to?: string;\n  children: React.ReactNode;\n  onPress?: () => void;\n}) => {\n  if (Platform.OS === 'web' && to) {\n    // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n    // We need to use `onClick` to be able to prevent default browser handling of links.\n    return (\n      <Link\n        {...rest}\n        to={to}\n        style={[styles.button, style]}\n        onPress={(e: any) => {\n          if (\n            !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n            (e.button == null || e.button === 0) // ignore everything but left clicks\n          ) {\n            e.preventDefault();\n            onPress?.(e);\n          }\n        }}\n      >\n        {children}\n      </Link>\n    );\n  } else {\n    return (\n      <TouchableItem\n        {...rest}\n        accessibilityRole={accessibilityRole}\n        delayPressIn={delayPressIn}\n        onPress={onPress}\n      >\n        <View style={style}>{children}</View>\n      </TouchableItem>\n    );\n  }\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport default function DrawerItem(props: Props) {\n  const { colors } = useTheme();\n\n  const {\n    icon,\n    label,\n    labelStyle,\n    to,\n    focused = false,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n    activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    pressColor,\n    pressOpacity,\n    ...rest\n  } = props;\n\n  const { borderRadius = 4 } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\n\n  return (\n    <View\n      collapsable={false}\n      {...rest}\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\n    >\n      <Touchable\n        delayPressIn={0}\n        onPress={onPress}\n        style={[styles.wrapper, { borderRadius }]}\n        accessibilityTraits={focused ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: focused }}\n        // @ts-expect-error: keep for compatibility with older React Native versions\n        accessibilityStates={focused ? ['selected'] : []}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        to={to}\n      >\n        <React.Fragment>\n          {iconNode}\n          <View\n            style={[\n              styles.label,\n              { marginLeft: iconNode ? 32 : 0, marginVertical: 5 },\n            ]}\n          >\n            {typeof label === 'string' ? (\n              <Text\n                numberOfLines={1}\n                style={[\n                  {\n                    color,\n                    fontWeight: '500',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label({ color, focused })\n            )}\n          </View>\n        </React.Fragment>\n      </Touchable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden',\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n    flex: 1,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}