{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport ActivityIndicator from \"./ActivityIndicator\";\nimport Icon from \"./Icon\";\nimport Surface from \"./Surface\";\nimport Text from \"./Typography/Text\";\nimport TouchableRipple from \"./TouchableRipple/TouchableRipple\";\nimport { black, white } from \"../styles/colors\";\nimport { withTheme } from \"../core/theming\";\n\nvar Button = function Button(_ref) {\n  var disabled = _ref.disabled,\n    compact = _ref.compact,\n    _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? 'text' : _ref$mode,\n    dark = _ref.dark,\n    loading = _ref.loading,\n    icon = _ref.icon,\n    buttonColor = _ref.color,\n    children = _ref.children,\n    _ref$uppercase = _ref.uppercase,\n    uppercase = _ref$uppercase === void 0 ? true : _ref$uppercase,\n    accessibilityLabel = _ref.accessibilityLabel,\n    onPress = _ref.onPress,\n    onLongPress = _ref.onLongPress,\n    style = _ref.style,\n    theme = _ref.theme,\n    contentStyle = _ref.contentStyle,\n    labelStyle = _ref.labelStyle,\n    testID = _ref.testID,\n    rest = _objectWithoutProperties(_ref, [\"disabled\", \"compact\", \"mode\", \"dark\", \"loading\", \"icon\", \"color\", \"children\", \"uppercase\", \"accessibilityLabel\", \"onPress\", \"onLongPress\", \"style\", \"theme\", \"contentStyle\", \"labelStyle\", \"testID\"]);\n  var _React$useRef = React.useRef(new Animated.Value(mode === 'contained' ? 2 : 0)),\n    elevation = _React$useRef.current;\n  var handlePressIn = function handlePressIn() {\n    if (mode === 'contained') {\n      var scale = theme.animation.scale;\n      Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n  var handlePressOut = function handlePressOut() {\n    if (mode === 'contained') {\n      var scale = theme.animation.scale;\n      Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n  var colors = theme.colors,\n    roundness = theme.roundness;\n  var font = theme.fonts.medium;\n  var backgroundColor, borderColor, textColor, borderWidth;\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = color(theme.dark ? white : black).alpha(0.12).rgb().string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n  if (mode === 'outlined') {\n    borderColor = color(theme.dark ? white : black).alpha(0.29).rgb().string();\n    borderWidth = StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n  if (disabled) {\n    textColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n  } else if (mode === 'contained') {\n    var isDark;\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark = backgroundColor === 'transparent' ? false : !color(backgroundColor).isLight();\n    }\n    textColor = isDark ? white : black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n  var rippleColor = color(textColor).alpha(0.32).rgb().string();\n  var buttonStyle = {\n    backgroundColor: backgroundColor,\n    borderColor: borderColor,\n    borderWidth: borderWidth,\n    borderRadius: roundness\n  };\n  var touchableStyle = {\n    borderRadius: style ? StyleSheet.flatten(style).borderRadius || roundness : roundness\n  };\n  var _ref2 = StyleSheet.flatten(labelStyle) || {},\n    customLabelColor = _ref2.color,\n    customLabelSize = _ref2.fontSize;\n  var textStyle = _objectSpread({\n    color: textColor\n  }, font);\n  var elevationRes = disabled || mode !== 'contained' ? 0 : elevation;\n  return React.createElement(Surface, _extends({}, rest, {\n    style: [styles.button, compact && styles.compact, {\n      elevation: elevationRes\n    }, buttonStyle, style]\n  }), React.createElement(TouchableRipple, {\n    borderless: true,\n    delayPressIn: 0,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled: disabled\n    },\n    disabled: disabled,\n    rippleColor: rippleColor,\n    style: touchableStyle,\n    testID: testID\n  }, React.createElement(View, {\n    style: [styles.content, contentStyle]\n  }, icon && loading !== true ? React.createElement(View, {\n    style: styles.icon\n  }, React.createElement(Icon, {\n    source: icon,\n    size: customLabelSize || 16,\n    color: customLabelColor || textColor\n  })) : null, loading ? React.createElement(ActivityIndicator, {\n    size: customLabelSize || 16,\n    color: customLabelColor || textColor,\n    style: styles.icon\n  }) : null, React.createElement(Text, {\n    numberOfLines: 1,\n    style: [styles.label, compact && styles.compactLabel, uppercase && styles.uppercaseLabel, textStyle, font, labelStyle]\n  }, children))));\n};\nvar styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid'\n  },\n  compact: {\n    minWidth: 'auto'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16\n  },\n  compactLabel: {\n    marginHorizontal: 8\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  }\n});\nexport default withTheme(Button);","map":{"version":3,"mappings":"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","names":["React","color","ActivityIndicator","Icon","Surface","Text","TouchableRipple","black","white","withTheme","Button","_ref","disabled","compact","mode","dark","loading","icon","buttonColor","children","uppercase","accessibilityLabel","onPress","onLongPress","style","theme","contentStyle","labelStyle","testID","rest","useRef","Animated","Value","elevation","current","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","colors","roundness","font","fonts","medium","backgroundColor","borderColor","textColor","borderWidth","alpha","rgb","string","primary","StyleSheet","hairlineWidth","isDark","isLight","rippleColor","buttonStyle","borderRadius","touchableStyle","flatten","customLabelColor","customLabelSize","fontSize","textStyle","elevationRes","styles","button","borderless","delayPressIn","onPressIn","onPressOut","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","View","content","source","size","numberOfLines","label","compactLabel","uppercaseLabel","create","minWidth","borderStyle","flexDirection","alignItems","justifyContent","marginLeft","marginRight","textAlign","letterSpacing","marginVertical","marginHorizontal","textTransform"],"sources":["Button.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport ActivityIndicator from './ActivityIndicator';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline (low emphasis)\n   * - `outlined` - button with an outline (medium emphasis)\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\n   */\n  mode?: 'text' | 'outlined' | 'contained';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Button = ({\n  disabled,\n  compact,\n  mode = 'text',\n  dark,\n  loading,\n  icon,\n  color: buttonColor,\n  children,\n  uppercase = true,\n  accessibilityLabel,\n  onPress,\n  onLongPress,\n  style,\n  theme,\n  contentStyle,\n  labelStyle,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(mode === 'contained' ? 2 : 0)\n  );\n\n  const handlePressIn = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressOut = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const { colors, roundness } = theme;\n  const font = theme.fonts.medium;\n\n  let backgroundColor, borderColor, textColor, borderWidth;\n\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = color(theme.dark ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n\n  if (mode === 'outlined') {\n    borderColor = color(theme.dark ? white : black)\n      .alpha(0.29)\n      .rgb()\n      .string();\n    borderWidth = StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n\n  if (disabled) {\n    textColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else if (mode === 'contained') {\n    let isDark;\n\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark =\n        backgroundColor === 'transparent'\n          ? false\n          : !color(backgroundColor).isLight();\n    }\n\n    textColor = isDark ? white : black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n\n  const rippleColor = color(textColor).alpha(0.32).rgb().string();\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius: roundness,\n  };\n  const touchableStyle = {\n    borderRadius: style\n      ? StyleSheet.flatten(style).borderRadius || roundness\n      : roundness,\n  };\n\n  const { color: customLabelColor, fontSize: customLabelSize } =\n    StyleSheet.flatten(labelStyle) || {};\n\n  const textStyle = { color: textColor, ...font };\n  const elevationRes = disabled || mode !== 'contained' ? 0 : elevation;\n\n  return (\n    <Surface\n      {...rest}\n      style={[\n        styles.button,\n        compact && styles.compact,\n        { elevation: elevationRes } as ViewStyle,\n        buttonStyle,\n        style,\n      ]}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        disabled={disabled}\n        rippleColor={rippleColor}\n        style={touchableStyle}\n        testID={testID}\n      >\n        <View style={[styles.content, contentStyle]}>\n          {icon && loading !== true ? (\n            <View style={styles.icon}>\n              <Icon\n                source={icon}\n                size={customLabelSize || 16}\n                color={customLabelColor || textColor}\n              />\n            </View>\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size={customLabelSize || 16}\n              color={customLabelColor || textColor}\n              style={styles.icon}\n            />\n          ) : null}\n          <Text\n            numberOfLines={1}\n            style={[\n              styles.label,\n              compact && styles.compactLabel,\n              uppercase && styles.uppercaseLabel,\n              textStyle,\n              font,\n              labelStyle,\n            ]}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n});\n\nexport default withTheme(Button);\n"]},"metadata":{},"sourceType":"module"}