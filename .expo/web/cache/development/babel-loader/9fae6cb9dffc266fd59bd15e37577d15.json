{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _reactNative = require(\"react-native-web/dist/index\");\nvar _SafeContainer = _interopRequireDefault(require(\"./SafeContainer\"));\nvar _jsxFileName = \"/Users/seniv/code/react-native-notifier/src/components/Alert.tsx\";\nvar bgColors = {\n  error: '#E03737',\n  warn: '#FFAC00',\n  info: '#007BFF',\n  success: '#00B104'\n};\nvar s = _reactNative.StyleSheet.create({\n  container: {\n    margin: 10\n  },\n  title: {\n    fontWeight: 'bold',\n    textAlign: 'center',\n    fontSize: 15,\n    lineHeight: 22,\n    color: 'white'\n  },\n  description: {\n    textAlign: 'center',\n    fontSize: 14,\n    lineHeight: 22,\n    color: 'white'\n  }\n});\nvar AlertComponent = function AlertComponent(_ref) {\n  var title = _ref.title,\n    titleStyle = _ref.titleStyle,\n    description = _ref.description,\n    descriptionStyle = _ref.descriptionStyle,\n    _ref$alertType = _ref.alertType,\n    alertType = _ref$alertType === void 0 ? 'success' : _ref$alertType,\n    backgroundColor = _ref.backgroundColor,\n    textColor = _ref.textColor,\n    ContainerComponent = _ref.ContainerComponent,\n    maxTitleLines = _ref.maxTitleLines,\n    maxDescriptionLines = _ref.maxDescriptionLines;\n  var Container = ContainerComponent !== null && ContainerComponent !== void 0 ? ContainerComponent : _SafeContainer.default;\n  var textStyle = textColor ? {\n    color: textColor\n  } : null;\n  return _react.default.createElement(Container, {\n    style: {\n      backgroundColor: backgroundColor || bgColors[alertType]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNative.View, {\n    style: s.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, !!title && _react.default.createElement(_reactNative.Text, {\n    style: [s.title, textStyle, titleStyle],\n    numberOfLines: maxTitleLines,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, title), !!description && _react.default.createElement(_reactNative.Text, {\n    style: [s.description, textStyle, descriptionStyle],\n    numberOfLines: maxDescriptionLines,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, description)));\n};\nvar _default = AlertComponent;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;AAAA;AACA;AAEA;;AAIA,IAAMA,QAAoC,GAAG;EAC3CC,KAAK,EAAE,SADoC;EAE3CC,IAAI,EAAE,SAFqC;EAG3CC,IAAI,EAAE,SAHqC;EAI3CC,OAAO,EAAE;AAJkC,CAA7C;AAOA,IAAMC,CAAC,GAAGC,wBAAWC,MAAX,CAAkB;EAC1BC,SAAS,EAAE;IACTC,MAAM,EAAE;EADC,CADe;EAI1BC,KAAK,EAAE;IACLC,UAAU,EAAE,MADP;IAELC,SAAS,EAAE,QAFN;IAGLC,QAAQ,EAAE,EAHL;IAILC,UAAU,EAAE,EAJP;IAKLC,KAAK,EAAE;EALF,CAJmB;EAW1BC,WAAW,EAAE;IACXJ,SAAS,EAAE,QADA;IAEXC,QAAQ,EAAE,EAFC;IAGXC,UAAU,EAAE,EAHD;IAIXC,KAAK,EAAE;EAJI;AAXa,CAAlB,CAAV;AA0DA,IAAME,cAA+D,GAAG,SAAlEA,cAAkE,OAWlE;EAAA,IAVJP,KAUI,QAVJA,KAUI;IATJQ,UASI,QATJA,UASI;IARJF,WAQI,QARJA,WAQI;IAPJG,gBAOI,QAPJA,gBAOI;IAAAC,sBANJC,SAMI;IANJA,SAMI,+BANQ,SAMR;IALJC,eAKI,QALJA,eAKI;IAJJC,SAII,QAJJA,SAII;IAHJC,kBAGI,QAHJA,kBAGI;IAFJC,aAEI,QAFJA,aAEI;IADJC,mBACI,QADJA,mBACI;EACJ,IAAMC,SAAS,GAAGH,kBAAH,aAAGA,kBAAH,cAAGA,kBAAH,GAAyBI,sBAAxC;EACA,IAAMC,SAAS,GAAGN,SAAS,GAAG;IAAER,KAAK,EAAEQ;EAAT,CAAH,GAA0B,IAArD;EACA,OACEO,6BAACH,SAAD;IAAWI,KAAK,EAAE;MAAET,eAAe,EAAEA,eAAe,IAAItB,QAAQ,CAACqB,SAAD;IAA9C,CAAlB;IAAAW;MAAAC;MAAAC;MAAAC;IAAA;EAAA,GACEL,6BAACM,iBAAD;IAAML,KAAK,EAAE1B,CAAC,CAACG,SAAf;IAAAwB;MAAAC;MAAAC;MAAAC;IAAA;EAAA,GACG,CAAC,CAACzB,KAAF,IACCoB,6BAACM,iBAAD;IAAML,KAAK,EAAE,CAAC1B,CAAC,CAACK,KAAH,EAAUmB,SAAV,EAAqBX,UAArB,CAAb;IAA+CmB,aAAa,EAAEZ,aAA9D;IAAAO;MAAAC;MAAAC;MAAAC;IAAA;EAAA,GACGzB,KADH,CAFJ,EAMG,CAAC,CAACM,WAAF,IACCc,6BAACM,iBAAD;IACEL,KAAK,EAAE,CAAC1B,CAAC,CAACW,WAAH,EAAgBa,SAAhB,EAA2BV,gBAA3B,CADT;IAEEkB,aAAa,EAAEX,mBAFjB;IAAAM;MAAAC;MAAAC;MAAAC;IAAA;EAAA,GAIGnB,WAJH,CAPJ,CADF,CADF;AAmBD,CAjCD;eAmCeC,c","names":["bgColors","error","warn","info","success","s","StyleSheet","create","container","margin","title","fontWeight","textAlign","fontSize","lineHeight","color","description","AlertComponent","titleStyle","descriptionStyle","_ref$alertType","alertType","backgroundColor","textColor","ContainerComponent","maxTitleLines","maxDescriptionLines","Container","SafeContainer","textStyle","_react","style","__source","fileName","lineNumber","columnNumber","_reactNative","numberOfLines"],"sources":["Alert.tsx"],"sourcesContent":["import React from 'react';\nimport { StyleSheet, View, Text, TextStyle, StyleProp } from 'react-native';\n\nimport SafeContainer from './SafeContainer';\n\ntype AlertTypes = 'error' | 'warn' | 'info' | 'success';\n\nconst bgColors: Record<AlertTypes, string> = {\n  error: '#E03737',\n  warn: '#FFAC00',\n  info: '#007BFF',\n  success: '#00B104',\n};\n\nconst s = StyleSheet.create({\n  container: {\n    margin: 10,\n  },\n  title: {\n    fontWeight: 'bold',\n    textAlign: 'center',\n    fontSize: 15,\n    lineHeight: 22,\n    color: 'white',\n  },\n  description: {\n    textAlign: 'center',\n    fontSize: 14,\n    lineHeight: 22,\n    color: 'white',\n  },\n});\n\nexport interface AlertComponentProps {\n  /** Background color will be changed depending on the type. Available values: `error`(red), `success`(green), `warn`(orange) and `info`(blue).\n   * @default 'success' */\n  alertType: AlertTypes;\n\n  /** While the background of the alert depends on `alertType`, you can also set the other color you want.\n   * @default null */\n  backgroundColor?: string;\n\n  /** Color of `title` and `description`.\n   * @default 'white' */\n  textColor?: string;\n\n  /** The maximum number of lines to use for rendering title.\n   * @default null */\n  maxTitleLines?: number;\n\n  /** The maximum number of lines to use for rendering description.\n   * @default null */\n  maxDescriptionLines?: number;\n\n  /** A container of the component. Set it in case you use different SafeAreaView than the standard\n   * @default SafeAreaView */\n  ContainerComponent?: React.ElementType;\n\n  /** The style to use for rendering title\n   * @default null */\n  titleStyle?: StyleProp<TextStyle>;\n\n  /** The style to use for rendering description\n   * @default null */\n  descriptionStyle?: StyleProp<TextStyle>;\n}\n\ninterface AlertComponentAllProps extends AlertComponentProps {\n  title?: string;\n  description?: string;\n}\n\nconst AlertComponent: React.FunctionComponent<AlertComponentAllProps> = ({\n  title,\n  titleStyle,\n  description,\n  descriptionStyle,\n  alertType = 'success',\n  backgroundColor,\n  textColor,\n  ContainerComponent,\n  maxTitleLines,\n  maxDescriptionLines,\n}) => {\n  const Container = ContainerComponent ?? SafeContainer;\n  const textStyle = textColor ? { color: textColor } : null;\n  return (\n    <Container style={{ backgroundColor: backgroundColor || bgColors[alertType] }}>\n      <View style={s.container}>\n        {!!title && (\n          <Text style={[s.title, textStyle, titleStyle]} numberOfLines={maxTitleLines}>\n            {title}\n          </Text>\n        )}\n        {!!description && (\n          <Text\n            style={[s.description, textStyle, descriptionStyle]}\n            numberOfLines={maxDescriptionLines}\n          >\n            {description}\n          </Text>\n        )}\n      </View>\n    </Container>\n  );\n};\n\nexport default AlertComponent;\n"]},"metadata":{},"sourceType":"script"}