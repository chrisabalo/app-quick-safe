{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"E:\\\\local\\\\app-quick-safe\\\\node_modules\\\\@react-navigation\\\\drawer\\\\src\\\\views\\\\DrawerView.tsx\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport { ScreenContainer } from 'react-native-screens';\nimport { NavigationHelpersContext, NavigationContext, NavigationRouteContext, DrawerActions, useTheme } from '@react-navigation/native';\nimport { GestureHandlerRootView } from \"./GestureHandler\";\nimport SafeAreaProviderCompat from \"./SafeAreaProviderCompat\";\nimport ResourceSavingScene from \"./ResourceSavingScene\";\nimport Header from \"./Header\";\nimport DrawerContent from \"./DrawerContent\";\nimport Drawer from \"./Drawer\";\nimport DrawerOpenContext from \"../utils/DrawerOpenContext\";\nimport DrawerPositionContext from \"../utils/DrawerPositionContext\";\nimport useWindowDimensions from \"../utils/useWindowDimensions\";\nimport getIsDrawerOpenFromState from \"../utils/getIsDrawerOpenFromState\";\nvar getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n  var height = _ref.height,\n    width = _ref.width;\n  var smallerAxisSize = Math.min(height, width);\n  var isLandscape = width > height;\n  var isTablet = smallerAxisSize >= 600;\n  var appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  var maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\nvar GestureHandlerWrapper = GestureHandlerRootView != null ? GestureHandlerRootView : View;\n\nexport default function DrawerView(_ref2) {\n  var _this = this;\n  var state = _ref2.state,\n    navigation = _ref2.navigation,\n    descriptors = _ref2.descriptors,\n    _ref2$lazy = _ref2.lazy,\n    lazy = _ref2$lazy === void 0 ? true : _ref2$lazy,\n    _ref2$drawerContent = _ref2.drawerContent,\n    drawerContent = _ref2$drawerContent === void 0 ? function (props) {\n      return React.createElement(DrawerContent, _extends({}, props, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 5\n        }\n      }));\n    } : _ref2$drawerContent,\n    _ref2$drawerPosition = _ref2.drawerPosition,\n    drawerPosition = _ref2$drawerPosition === void 0 ? I18nManager.isRTL ? 'right' : 'left' : _ref2$drawerPosition,\n    _ref2$keyboardDismiss = _ref2.keyboardDismissMode,\n    keyboardDismissMode = _ref2$keyboardDismiss === void 0 ? 'on-drag' : _ref2$keyboardDismiss,\n    _ref2$overlayColor = _ref2.overlayColor,\n    overlayColor = _ref2$overlayColor === void 0 ? 'rgba(0, 0, 0, 0.5)' : _ref2$overlayColor,\n    _ref2$drawerType = _ref2.drawerType,\n    drawerType = _ref2$drawerType === void 0 ? 'front' : _ref2$drawerType,\n    _ref2$hideStatusBar = _ref2.hideStatusBar,\n    hideStatusBar = _ref2$hideStatusBar === void 0 ? false : _ref2$hideStatusBar,\n    _ref2$statusBarAnimat = _ref2.statusBarAnimation,\n    statusBarAnimation = _ref2$statusBarAnimat === void 0 ? 'slide' : _ref2$statusBarAnimat,\n    drawerContentOptions = _ref2.drawerContentOptions,\n    drawerStyle = _ref2.drawerStyle,\n    edgeWidth = _ref2.edgeWidth,\n    gestureHandlerProps = _ref2.gestureHandlerProps,\n    minSwipeDistance = _ref2.minSwipeDistance,\n    sceneContainerStyle = _ref2.sceneContainerStyle,\n    _ref2$detachInactiveS = _ref2.detachInactiveScreens,\n    detachInactiveScreens = _ref2$detachInactiveS === void 0 ? true : _ref2$detachInactiveS;\n  var _React$useState = React.useState([state.routes[state.index].key]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    loaded = _React$useState2[0],\n    setLoaded = _React$useState2[1];\n  var dimensions = useWindowDimensions();\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var isDrawerOpen = getIsDrawerOpenFromState(state);\n  var handleDrawerOpen = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.openDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  var handleDrawerClose = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.closeDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  React.useEffect(function () {\n    if (isDrawerOpen) {\n      navigation.emit({\n        type: 'drawerOpen'\n      });\n    } else {\n      navigation.emit({\n        type: 'drawerClose'\n      });\n    }\n  }, [isDrawerOpen, navigation]);\n  React.useEffect(function () {\n    var subscription;\n    if (isDrawerOpen) {\n      subscription = BackHandler.addEventListener('hardwareBackPress', function () {\n        handleDrawerClose();\n        return true;\n      });\n    }\n    return function () {\n      var _subscription;\n      return (_subscription = subscription) == null ? void 0 : _subscription.remove();\n    };\n  }, [handleDrawerClose, isDrawerOpen, navigation, state.key]);\n  var focusedRouteKey = state.routes[state.index].key;\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([].concat(_toConsumableArray(loaded), [focusedRouteKey]));\n  }\n  var renderNavigationView = function renderNavigationView(_ref3) {\n    var progress = _ref3.progress;\n    return React.createElement(DrawerPositionContext.Provider, {\n      value: drawerPosition,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 7\n      }\n    }, drawerContent(_objectSpread(_objectSpread({}, drawerContentOptions), {}, {\n      progress: progress,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    })));\n  };\n  var renderContent = function renderContent() {\n    return React.createElement(ScreenContainer, {\n      enabled: detachInactiveScreens,\n      style: styles.content,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }\n    }, state.routes.map(function (route, index) {\n      var descriptor = descriptors[route.key];\n      var unmountOnBlur = descriptor.options.unmountOnBlur;\n      var isFocused = state.index === index;\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n      if (lazy && !loaded.includes(route.key) && !isFocused) {\n        return null;\n      }\n      var _descriptor$options = descriptor.options,\n        _descriptor$options$h = _descriptor$options.header,\n        header = _descriptor$options$h === void 0 ? function (props) {\n          return React.createElement(Header, _extends({}, props, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 52\n            }\n          }));\n        } : _descriptor$options$h,\n        _descriptor$options$h2 = _descriptor$options.headerShown,\n        headerShown = _descriptor$options$h2 === void 0 ? false : _descriptor$options$h2;\n      return React.createElement(ResourceSavingScene, {\n        key: route.key,\n        style: [StyleSheet.absoluteFill, {\n          opacity: isFocused ? 1 : 0\n        }],\n        isVisible: isFocused,\n        enabled: detachInactiveScreens,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }\n      }, headerShown ? React.createElement(NavigationContext.Provider, {\n        value: descriptor.navigation,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 17\n        }\n      }, React.createElement(NavigationRouteContext.Provider, {\n        value: route,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 19\n        }\n      }, header({\n        layout: dimensions,\n        scene: {\n          route: route,\n          descriptor: descriptor\n        }\n      }))) : null, descriptor.render());\n    }));\n  };\n  var activeKey = state.routes[state.index].key;\n  var _descriptors$activeKe = descriptors[activeKey].options,\n    gestureEnabled = _descriptors$activeKe.gestureEnabled,\n    swipeEnabled = _descriptors$activeKe.swipeEnabled;\n  return React.createElement(NavigationHelpersContext.Provider, {\n    value: navigation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 5\n    }\n  }, React.createElement(GestureHandlerWrapper, {\n    style: styles.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }\n  }, React.createElement(SafeAreaProviderCompat, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }\n  }, React.createElement(DrawerOpenContext.Provider, {\n    value: isDrawerOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 11\n    }\n  }, React.createElement(Drawer, {\n    open: isDrawerOpen,\n    gestureEnabled: gestureEnabled,\n    swipeEnabled: swipeEnabled,\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    gestureHandlerProps: gestureHandlerProps,\n    drawerType: drawerType,\n    drawerPosition: drawerPosition,\n    sceneContainerStyle: [{\n      backgroundColor: colors.background\n    }, sceneContainerStyle],\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(dimensions),\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    swipeEdgeWidth: edgeWidth,\n    swipeDistanceThreshold: minSwipeDistance,\n    hideStatusBar: hideStatusBar,\n    statusBarAnimation: statusBarAnimation,\n    renderDrawerContent: renderNavigationView,\n    renderSceneContent: renderContent,\n    keyboardDismissMode: keyboardDismissMode,\n    dimensions: dimensions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  })))));\n}\nvar styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["React","ScreenContainer","NavigationHelpersContext","NavigationContext","NavigationRouteContext","DrawerActions","useTheme","GestureHandlerRootView","SafeAreaProviderCompat","ResourceSavingScene","Header","DrawerContent","Drawer","DrawerOpenContext","DrawerPositionContext","useWindowDimensions","getIsDrawerOpenFromState","getDefaultDrawerWidth","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","OS","maxWidth","GestureHandlerWrapper","View","DrawerView","state","navigation","descriptors","lazy","drawerContent","props","drawerPosition","I18nManager","isRTL","keyboardDismissMode","overlayColor","drawerType","hideStatusBar","statusBarAnimation","drawerContentOptions","drawerStyle","edgeWidth","gestureHandlerProps","minSwipeDistance","sceneContainerStyle","detachInactiveScreens","useState","routes","index","key","loaded","setLoaded","dimensions","colors","isDrawerOpen","handleDrawerOpen","useCallback","dispatch","openDrawer","target","handleDrawerClose","closeDrawer","useEffect","emit","type","subscription","BackHandler","addEventListener","remove","focusedRouteKey","includes","renderNavigationView","progress","renderContent","styles","content","map","route","descriptor","unmountOnBlur","options","isFocused","header","headerShown","StyleSheet","absoluteFill","opacity","layout","scene","render","activeKey","gestureEnabled","swipeEnabled","backgroundColor","background","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","create","flex"],"sources":["E:/local/app-quick-safe/node_modules/@react-navigation/drawer/src/views/DrawerView.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  BackHandler,\n  NativeEventSubscription,\n} from 'react-native';\nimport { ScreenContainer } from 'react-native-screens';\nimport {\n  NavigationHelpersContext,\n  NavigationContext,\n  NavigationRouteContext,\n  DrawerNavigationState,\n  DrawerActions,\n  useTheme,\n  ParamListBase,\n} from '@react-navigation/native';\n\nimport { GestureHandlerRootView } from './GestureHandler';\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport Header from './Header';\nimport DrawerContent from './DrawerContent';\nimport Drawer from './Drawer';\nimport DrawerOpenContext from '../utils/DrawerOpenContext';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport useWindowDimensions from '../utils/useWindowDimensions';\nimport getIsDrawerOpenFromState from '../utils/getIsDrawerOpenFromState';\nimport type {\n  DrawerDescriptorMap,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerContentComponentProps,\n  DrawerHeaderProps,\n} from '../types';\n\ntype Props = DrawerNavigationConfig & {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Component that renders the drawer.\n */\nexport default function DrawerView({\n  state,\n  navigation,\n  descriptors,\n  lazy = true,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode = 'on-drag',\n  overlayColor = 'rgba(0, 0, 0, 0.5)',\n  drawerType = 'front',\n  hideStatusBar = false,\n  statusBarAnimation = 'slide',\n  drawerContentOptions,\n  drawerStyle,\n  edgeWidth,\n  gestureHandlerProps,\n  minSwipeDistance,\n  sceneContainerStyle,\n  detachInactiveScreens = true,\n}: Props) {\n  const [loaded, setLoaded] = React.useState([state.routes[state.index].key]);\n  const dimensions = useWindowDimensions();\n\n  const { colors } = useTheme();\n\n  const isDrawerOpen = getIsDrawerOpenFromState(state);\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (isDrawerOpen) {\n      navigation.emit({ type: 'drawerOpen' });\n    } else {\n      navigation.emit({ type: 'drawerClose' });\n    }\n  }, [isDrawerOpen, navigation]);\n\n  React.useEffect(() => {\n    let subscription: NativeEventSubscription | undefined;\n\n    if (isDrawerOpen) {\n      // We only add the subscription when drawer opens\n      // This way we can make sure that the subscription is added as late as possible\n      // This will make sure that our handler will run first when back button is pressed\n      subscription = BackHandler.addEventListener('hardwareBackPress', () => {\n        handleDrawerClose();\n\n        return true;\n      });\n    }\n\n    return () => subscription?.remove();\n  }, [handleDrawerClose, isDrawerOpen, navigation, state.key]);\n\n  const focusedRouteKey = state.routes[state.index].key;\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          ...drawerContentOptions,\n          progress: progress,\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderContent = () => {\n    return (\n      // @ts-ignore\n      <ScreenContainer enabled={detachInactiveScreens} style={styles.content}>\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            header = (props: DrawerHeaderProps) => <Header {...props} />,\n            headerShown = false,\n          } = descriptor.options;\n\n          return (\n            <ResourceSavingScene\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]}\n              isVisible={isFocused}\n              enabled={detachInactiveScreens}\n            >\n              {headerShown ? (\n                <NavigationContext.Provider value={descriptor.navigation}>\n                  <NavigationRouteContext.Provider value={route}>\n                    {header({\n                      layout: dimensions,\n                      scene: { route, descriptor },\n                    })}\n                  </NavigationRouteContext.Provider>\n                </NavigationContext.Provider>\n              ) : null}\n              {descriptor.render()}\n            </ResourceSavingScene>\n          );\n        })}\n      </ScreenContainer>\n    );\n  };\n\n  const activeKey = state.routes[state.index].key;\n  const { gestureEnabled, swipeEnabled } = descriptors[activeKey].options;\n\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <GestureHandlerWrapper style={styles.content}>\n        <SafeAreaProviderCompat>\n          <DrawerOpenContext.Provider value={isDrawerOpen}>\n            <Drawer\n              open={isDrawerOpen}\n              gestureEnabled={gestureEnabled}\n              swipeEnabled={swipeEnabled}\n              onOpen={handleDrawerOpen}\n              onClose={handleDrawerClose}\n              gestureHandlerProps={gestureHandlerProps}\n              drawerType={drawerType}\n              drawerPosition={drawerPosition}\n              sceneContainerStyle={[\n                { backgroundColor: colors.background },\n                sceneContainerStyle,\n              ]}\n              drawerStyle={[\n                {\n                  width: getDefaultDrawerWidth(dimensions),\n                  backgroundColor: colors.card,\n                },\n                drawerType === 'permanent' &&\n                  (drawerPosition === 'left'\n                    ? {\n                        borderRightColor: colors.border,\n                        borderRightWidth: StyleSheet.hairlineWidth,\n                      }\n                    : {\n                        borderLeftColor: colors.border,\n                        borderLeftWidth: StyleSheet.hairlineWidth,\n                      }),\n                drawerStyle,\n              ]}\n              overlayStyle={{ backgroundColor: overlayColor }}\n              swipeEdgeWidth={edgeWidth}\n              swipeDistanceThreshold={minSwipeDistance}\n              hideStatusBar={hideStatusBar}\n              statusBarAnimation={statusBarAnimation}\n              renderDrawerContent={renderNavigationView}\n              renderSceneContent={renderContent}\n              keyboardDismissMode={keyboardDismissMode}\n              dimensions={dimensions}\n            />\n          </DrawerOpenContext.Provider>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    </NavigationHelpersContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}