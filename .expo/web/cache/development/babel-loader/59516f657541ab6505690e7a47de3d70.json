{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ListSubheader from \"./ListSubheader\";\nimport { withTheme } from \"../../core/theming\";\n\nvar ListSection = function ListSection(_ref) {\n  var children = _ref.children,\n    title = _ref.title,\n    titleStyle = _ref.titleStyle,\n    style = _ref.style,\n    rest = _objectWithoutProperties(_ref, [\"children\", \"title\", \"titleStyle\", \"style\"]);\n  return React.createElement(View, _extends({}, rest, {\n    style: [styles.container, style]\n  }), title && React.createElement(ListSubheader, {\n    style: titleStyle\n  }, title), children);\n};\nListSection.displayName = 'List.Section';\nvar styles = StyleSheet.create({\n  container: {\n    marginVertical: 8\n  }\n});\nexport default withTheme(ListSection);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA;AAAA;AAQA,OAAOC,aAAP;AACA,SAASC,SAAT;;AAgDA,IAAMC,WAAW,GAAG,SAAdA,WAAW,CAAGC;EAAA,IAClBC,QADmB,GAADD,KAClBC,QADmB;IAEnBC,KAFmB,GAADF,KAElBE,KAFmB;IAGnBC,UAHmB,GAADH,KAGlBG,UAHmB;IAInBC,QAJkBJ,KAIlBI;IACGC,IALe;EAAA,OAOlBT,oBAACU,IAAD,eAAUD,IAAV;IAAgBD,KAAK,EAAE,CAACG,MAAM,CAACC,SAAR,EAAmBJ,KAAnB;EAAvB,IACGF,KAAK,IAAIN,oBAACC,aAAD;IAAeO,KAAK,EAAED;EAAtB,GAAmCD,KAAnC,CADZ,EAEGD,QAFH,CAPkB;AAAA,CAApB;AAaAF,WAAW,CAACU,WAAZ,GAA0B,cAA1B;AAEA,IAAMF,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;EAC/BH,SAAS,EAAE;IACTI,cAAc,EAAE;EADP;AADoB,CAAlB,CAAf;AAMA,eAAed,SAAS,CAACC,WAAD,CAAxB","names":["React","ListSubheader","withTheme","ListSection","_ref","children","title","titleStyle","style","rest","View","styles","container","displayName","StyleSheet","create","marginVertical"],"sources":["ListSection.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport ListSubheader from './ListSubheader';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Title text for the section.\n   */\n  title?: string;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component used to group list items.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/list-section.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Section>\n *     <List.Subheader>Some title</List.Subheader>\n *     <List.Item title=\"First Item\" left={() => <List.Icon icon=\"folder\" />} />\n *     <List.Item\n *       title=\"Second Item\"\n *       left={() => <List.Icon color=\"#000\" icon=\"folder\" />}\n *     />\n *   </List.Section>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst ListSection = ({\n  children,\n  title,\n  titleStyle,\n  style,\n  ...rest\n}: Props) => (\n  <View {...rest} style={[styles.container, style]}>\n    {title && <ListSubheader style={titleStyle}>{title}</ListSubheader>}\n    {children}\n  </View>\n);\n\nListSection.displayName = 'List.Section';\n\nconst styles = StyleSheet.create({\n  container: {\n    marginVertical: 8,\n  },\n});\n\nexport default withTheme(ListSection);\n"]},"metadata":{},"sourceType":"module"}