{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { BottomNavigation, DefaultTheme, DarkTheme } from 'react-native-paper';\nimport { NavigationHelpersContext, TabActions, useTheme, useLinkBuilder, Link } from '@react-navigation/native';\nvar MaterialCommunityIcons;\ntry {\n  MaterialCommunityIcons = require(\"@expo/vector-icons/MaterialCommunityIcons\").default;\n} catch (e) {\n  var _global$__expo, _global$__expo$Icon;\n\n  if ((_global$__expo = global.__expo) === null || _global$__expo === void 0 ? void 0 : (_global$__expo$Icon = _global$__expo.Icon) === null || _global$__expo$Icon === void 0 ? void 0 : _global$__expo$Icon.MaterialCommunityIcons) {\n    MaterialCommunityIcons = global.__expo.Icon.MaterialCommunityIcons;\n  } else {\n    var isErrorLogged = false;\n\n    MaterialCommunityIcons = function MaterialCommunityIcons() {\n      if (!isErrorLogged) {\n        if (!/(Cannot find module|Module not found|Cannot resolve module)/.test(e.message)) {\n          console.error(e);\n        }\n        console.warn(\"Tried to use the icon '\".concat(name, \"' in a component from '@react-navigation/material-bottom-tabs', but 'react-native-vector-icons' could not be loaded.\"), \"To remove this warning, try installing 'react-native-vector-icons' or use another method.\");\n        isErrorLogged = true;\n      }\n      return null;\n    };\n  }\n}\nfunction MaterialBottomTabViewInner(_ref) {\n  var state = _ref.state,\n    navigation = _ref.navigation,\n    descriptors = _ref.descriptors,\n    rest = _objectWithoutProperties(_ref, [\"state\", \"navigation\", \"descriptors\"]);\n  var _useTheme = useTheme(),\n    dark = _useTheme.dark,\n    colors = _useTheme.colors;\n  var buildLink = useLinkBuilder();\n  var theme = React.useMemo(function () {\n    var t = dark ? DarkTheme : DefaultTheme;\n    return _objectSpread(_objectSpread({}, t), {}, {\n      colors: _objectSpread(_objectSpread(_objectSpread({}, t.colors), colors), {}, {\n        surface: colors.card\n      })\n    });\n  }, [colors, dark]);\n  return React.createElement(BottomNavigation, _extends({}, rest, {\n    theme: theme,\n    navigationState: state,\n    onIndexChange: function onIndexChange(index) {\n      return navigation.dispatch(_objectSpread(_objectSpread({}, TabActions.jumpTo(state.routes[index].name)), {}, {\n        target: state.key\n      }));\n    },\n    renderScene: function renderScene(_ref2) {\n      var route = _ref2.route;\n      return descriptors[route.key].render();\n    },\n    renderTouchable: Platform.OS === 'web' ? function (_ref3) {\n      var _onPress = _ref3.onPress,\n        route = _ref3.route,\n        _0 = _ref3.accessibilityRole,\n        _1 = _ref3.borderless,\n        _2 = _ref3.centered,\n        _3 = _ref3.rippleColor,\n        style = _ref3.style,\n        rest = _objectWithoutProperties(_ref3, [\"onPress\", \"route\", \"accessibilityRole\", \"borderless\", \"centered\", \"rippleColor\", \"style\"]);\n      return React.createElement(Link, _extends({}, rest, {\n        to: buildLink(route.name, route.params),\n        accessibilityRole: \"link\",\n        onPress: function onPress(e) {\n          if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (\n          e.button == null || e.button === 0)) {\n            e.preventDefault();\n            _onPress === null || _onPress === void 0 ? void 0 : _onPress(e);\n          }\n        },\n        style: [styles.touchable, style]\n      }));\n    } : undefined,\n    renderIcon: function renderIcon(_ref4) {\n      var route = _ref4.route,\n        focused = _ref4.focused,\n        color = _ref4.color;\n      var options = descriptors[route.key].options;\n      if (typeof options.tabBarIcon === 'string') {\n        return React.createElement(MaterialCommunityIcons, {\n          name: options.tabBarIcon,\n          color: color,\n          size: 24,\n          style: styles.icon\n        });\n      }\n      if (typeof options.tabBarIcon === 'function') {\n        return options.tabBarIcon({\n          focused: focused,\n          color: color\n        });\n      }\n      return null;\n    },\n    getLabelText: function getLabelText(_ref5) {\n      var route = _ref5.route;\n      var options = descriptors[route.key].options;\n      return options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n    },\n    getColor: function getColor(_ref6) {\n      var route = _ref6.route;\n      return descriptors[route.key].options.tabBarColor;\n    },\n    getBadge: function getBadge(_ref7) {\n      var route = _ref7.route;\n      return descriptors[route.key].options.tabBarBadge;\n    },\n    getAccessibilityLabel: function getAccessibilityLabel(_ref8) {\n      var route = _ref8.route;\n      return descriptors[route.key].options.tabBarAccessibilityLabel;\n    },\n    getTestID: function getTestID(_ref9) {\n      var route = _ref9.route;\n      return descriptors[route.key].options.tabBarTestID;\n    },\n    onTabPress: function onTabPress(_ref10) {\n      var route = _ref10.route,\n        preventDefault = _ref10.preventDefault;\n      var event = navigation.emit({\n        type: 'tabPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n      if (event.defaultPrevented) {\n        preventDefault();\n      }\n    }\n  }));\n}\nexport default function MaterialBottomTabView(props) {\n  return React.createElement(NavigationHelpersContext.Provider, {\n    value: props.navigation\n  }, React.createElement(MaterialBottomTabViewInner, props));\n}\nvar styles = StyleSheet.create({\n  icon: {\n    backgroundColor: 'transparent'\n  },\n  touchable: {\n    display: 'flex',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"mappings":"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","names":["React","BottomNavigation","DefaultTheme","DarkTheme","NavigationHelpersContext","TabActions","useTheme","useLinkBuilder","Link","MaterialCommunityIcons","require","default","e","global","__expo","_global$__expo","Icon","_global$__expo$Icon","isErrorLogged","test","message","console","error","warn","name","MaterialBottomTabViewInner","state","navigation","descriptors","rest","dark","colors","buildLink","theme","useMemo","t","surface","card","navigationState","onIndexChange","index","dispatch","jumpTo","routes","target","key","renderScene","route","render","renderTouchable","Platform","OS","onPress","_0","accessibilityRole","_1","borderless","_2","centered","_3","rippleColor","style","to","params","metaKey","altKey","ctrlKey","shiftKey","button","preventDefault","styles","touchable","undefined","renderIcon","focused","color","options","tabBarIcon","size","icon","getLabelText","tabBarLabel","title","getColor","tabBarColor","getBadge","tabBarBadge","getAccessibilityLabel","tabBarAccessibilityLabel","getTestID","tabBarTestID","onTabPress","event","emit","type","canPreventDefault","defaultPrevented","MaterialBottomTabView","props","Provider","value","StyleSheet","create","backgroundColor","display","justifyContent"],"sources":["MaterialBottomTabView.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Platform } from 'react-native';\nimport { BottomNavigation, DefaultTheme, DarkTheme } from 'react-native-paper';\nimport {\n  NavigationHelpersContext,\n  Route,\n  TabNavigationState,\n  TabActions,\n  useTheme,\n  useLinkBuilder,\n  Link,\n  ParamListBase,\n} from '@react-navigation/native';\n\nimport type {\n  MaterialBottomTabDescriptorMap,\n  MaterialBottomTabNavigationConfig,\n  MaterialBottomTabNavigationHelpers,\n} from '../types';\n\ntype Props = MaterialBottomTabNavigationConfig & {\n  state: TabNavigationState<ParamListBase>;\n  navigation: MaterialBottomTabNavigationHelpers;\n  descriptors: MaterialBottomTabDescriptorMap;\n};\n\ntype Scene = { route: { key: string } };\n\n// Optionally require vector-icons referenced from react-native-paper:\n// https://github.com/callstack/react-native-paper/blob/4b26429c49053eaa4c3e0fae208639e01093fa87/src/components/MaterialCommunityIcon.tsx#L14\nlet MaterialCommunityIcons: any;\n\ntry {\n  // Optionally require vector-icons\n  MaterialCommunityIcons = require('react-native-vector-icons/MaterialCommunityIcons')\n    .default;\n} catch (e) {\n  // @ts-expect-error\n  if (global.__expo?.Icon?.MaterialCommunityIcons) {\n    // Snack doesn't properly bundle vector icons from sub-path\n    // Use icons from the __expo global if available\n    // @ts-expect-error\n    MaterialCommunityIcons = global.__expo.Icon.MaterialCommunityIcons;\n  } else {\n    let isErrorLogged = false;\n\n    // Fallback component for icons\n    MaterialCommunityIcons = () => {\n      if (!isErrorLogged) {\n        if (\n          !/(Cannot find module|Module not found|Cannot resolve module)/.test(\n            e.message\n          )\n        ) {\n          console.error(e);\n        }\n\n        console.warn(\n          `Tried to use the icon '${name}' in a component from '@react-navigation/material-bottom-tabs', but 'react-native-vector-icons' could not be loaded.`,\n          `To remove this warning, try installing 'react-native-vector-icons' or use another method.`\n        );\n\n        isErrorLogged = true;\n      }\n\n      return null;\n    };\n  }\n}\n\nfunction MaterialBottomTabViewInner({\n  state,\n  navigation,\n  descriptors,\n  ...rest\n}: Props) {\n  const { dark, colors } = useTheme();\n  const buildLink = useLinkBuilder();\n\n  const theme = React.useMemo(() => {\n    const t = dark ? DarkTheme : DefaultTheme;\n\n    return {\n      ...t,\n      colors: {\n        ...t.colors,\n        ...colors,\n        surface: colors.card,\n      },\n    };\n  }, [colors, dark]);\n\n  return (\n    <BottomNavigation\n      {...rest}\n      theme={theme}\n      navigationState={state}\n      onIndexChange={(index: number) =>\n        navigation.dispatch({\n          ...TabActions.jumpTo(state.routes[index].name),\n          target: state.key,\n        })\n      }\n      renderScene={({ route }) => descriptors[route.key].render()}\n      renderTouchable={\n        Platform.OS === 'web'\n          ? ({\n              onPress,\n              route,\n              accessibilityRole: _0,\n              borderless: _1,\n              centered: _2,\n              rippleColor: _3,\n              style,\n              ...rest\n            }) => {\n              return (\n                <Link\n                  {...rest}\n                  // @ts-expect-error: to could be undefined, but it doesn't affect functionality\n                  to={buildLink(route.name, route.params)}\n                  accessibilityRole=\"link\"\n                  onPress={(e: any) => {\n                    if (\n                      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n                      (e.button == null || e.button === 0) // ignore everything but left clicks\n                    ) {\n                      e.preventDefault();\n                      onPress?.(e);\n                    }\n                  }}\n                  style={[styles.touchable, style]}\n                />\n              );\n            }\n          : undefined\n      }\n      renderIcon={({ route, focused, color }) => {\n        const { options } = descriptors[route.key];\n\n        if (typeof options.tabBarIcon === 'string') {\n          return (\n            <MaterialCommunityIcons\n              name={options.tabBarIcon}\n              color={color}\n              size={24}\n              style={styles.icon}\n            />\n          );\n        }\n\n        if (typeof options.tabBarIcon === 'function') {\n          return options.tabBarIcon({ focused, color });\n        }\n\n        return null;\n      }}\n      getLabelText={({ route }: Scene) => {\n        const { options } = descriptors[route.key];\n\n        return options.tabBarLabel !== undefined\n          ? options.tabBarLabel\n          : options.title !== undefined\n          ? options.title\n          : (route as Route<string>).name;\n      }}\n      getColor={({ route }) => descriptors[route.key].options.tabBarColor}\n      getBadge={({ route }) => descriptors[route.key].options.tabBarBadge}\n      getAccessibilityLabel={({ route }) =>\n        descriptors[route.key].options.tabBarAccessibilityLabel\n      }\n      getTestID={({ route }) => descriptors[route.key].options.tabBarTestID}\n      onTabPress={({ route, preventDefault }) => {\n        const event = navigation.emit({\n          type: 'tabPress',\n          target: route.key,\n          canPreventDefault: true,\n        });\n\n        if (event.defaultPrevented) {\n          preventDefault();\n        }\n      }}\n    />\n  );\n}\n\nexport default function MaterialBottomTabView(props: Props) {\n  return (\n    <NavigationHelpersContext.Provider value={props.navigation}>\n      <MaterialBottomTabViewInner {...props} />\n    </NavigationHelpersContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    backgroundColor: 'transparent',\n  },\n  touchable: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}