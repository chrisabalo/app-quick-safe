{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport color from 'color';\nimport InputLabel from \"./Label/InputLabel\";\nimport TextInputAdornment from \"./Adornment/TextInputAdornment\";\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, FLAT_INPUT_OFFSET } from \"./constants\";\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingFlat, interpolatePlaceholder, calculateFlatAffixTopPosition, calculateFlatInputHorizontalPadding } from \"./helpers\";\nimport { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from \"./Adornment/TextInputAdornment\";\nimport { AdornmentSide, AdornmentType } from \"./Adornment/enums\";\nvar MINIMIZED_LABEL_Y_OFFSET = -18;\nvar LABEL_PADDING_TOP = 30;\nvar LABEL_PADDING_TOP_DENSE = 24;\nvar MIN_HEIGHT = 64;\nvar MIN_DENSE_HEIGHT_WL = 52;\nvar MIN_DENSE_HEIGHT = 40;\nvar TextInputFlat = function (_React$Component) {\n  _inherits(TextInputFlat, _React$Component);\n  var _super = _createSuper(TextInputFlat);\n  function TextInputFlat() {\n    _classCallCheck(this, TextInputFlat);\n    return _super.apply(this, arguments);\n  }\n  _createClass(TextInputFlat, [{\n    key: \"render\",\n    value: function render() {\n      var _affixTopPosition, _onAffixChange, _topPosition;\n      var _this$props = this.props,\n        disabled = _this$props.disabled,\n        editable = _this$props.editable,\n        label = _this$props.label,\n        error = _this$props.error,\n        selectionColor = _this$props.selectionColor,\n        underlineColor = _this$props.underlineColor,\n        dense = _this$props.dense,\n        style = _this$props.style,\n        theme = _this$props.theme,\n        render = _this$props.render,\n        multiline = _this$props.multiline,\n        parentState = _this$props.parentState,\n        innerRef = _this$props.innerRef,\n        onFocus = _this$props.onFocus,\n        forceFocus = _this$props.forceFocus,\n        onBlur = _this$props.onBlur,\n        onChangeText = _this$props.onChangeText,\n        onLayoutAnimatedText = _this$props.onLayoutAnimatedText,\n        onLeftAffixLayoutChange = _this$props.onLeftAffixLayoutChange,\n        onRightAffixLayoutChange = _this$props.onRightAffixLayoutChange,\n        left = _this$props.left,\n        right = _this$props.right,\n        placeholderTextColor = _this$props.placeholderTextColor,\n        rest = _objectWithoutProperties(_this$props, [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\"]);\n      var colors = theme.colors,\n        fonts = theme.fonts;\n      var font = fonts.regular;\n      var hasActiveOutline = parentState.focused || error;\n      var _ref = StyleSheet.flatten(style) || {},\n        fontSizeStyle = _ref.fontSize,\n        fontWeight = _ref.fontWeight,\n        height = _ref.height,\n        paddingHorizontal = _ref.paddingHorizontal,\n        viewStyle = _objectWithoutProperties(_ref, [\"fontSize\", \"fontWeight\", \"height\", \"paddingHorizontal\"]);\n      var fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n      var isPaddingHorizontalPassed = paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n      var adornmentConfig = getAdornmentConfig({\n        left: left,\n        right: right\n      });\n      var _calculateFlatInputHo = calculateFlatInputHorizontalPadding({\n          adornmentConfig: adornmentConfig\n        }),\n        paddingLeft = _calculateFlatInputHo.paddingLeft,\n        paddingRight = _calculateFlatInputHo.paddingRight;\n      if (isPaddingHorizontalPassed) {\n        paddingLeft = paddingHorizontal;\n        paddingRight = paddingHorizontal;\n      }\n      var leftLayout = parentState.leftLayout,\n        rightLayout = parentState.rightLayout;\n      var rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n      var leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n      var adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n        adornmentConfig: adornmentConfig,\n        rightAffixWidth: rightAffixWidth,\n        leftAffixWidth: leftAffixWidth,\n        inputOffset: FLAT_INPUT_OFFSET\n      });\n      var inputTextColor, activeColor, underlineColorCustom, placeholderColor, errorColor;\n      if (disabled) {\n        inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n        placeholderColor = colors.disabled;\n        underlineColorCustom = 'transparent';\n      } else {\n        inputTextColor = colors.text;\n        activeColor = error ? colors.error : colors.primary;\n        placeholderColor = colors.placeholder;\n        errorColor = colors.error;\n        underlineColorCustom = underlineColor || colors.disabled;\n      }\n      var containerStyle = {\n        backgroundColor: theme.dark ? color(colors.background).lighten(0.24).rgb().string() : color(colors.background).darken(0.06).rgb().string(),\n        borderTopLeftRadius: theme.roundness,\n        borderTopRightRadius: theme.roundness\n      };\n      var labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n      var fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n      var labelWidth = parentState.labelLayout.width;\n      var labelHeight = parentState.labelLayout.height;\n      var labelHalfWidth = labelWidth / 2;\n      var labelHalfHeight = labelHeight / 2;\n      var baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2) + (1 - labelScale) * (I18nManager.isRTL ? -1 : 1) * paddingLeft;\n      var minInputHeight = dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE : MIN_HEIGHT - LABEL_PADDING_TOP;\n      var inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n      var topPosition = calculateLabelTopPosition(labelHeight, inputHeight, multiline && height ? 0 : !height ? minInputHeight / 2 : 0);\n      if (height && typeof height !== 'number') {\n        console.warn('Currently we support only numbers in height prop');\n      }\n      var paddingSettings = {\n        height: height ? +height : null,\n        labelHalfHeight: labelHalfHeight,\n        offset: FLAT_INPUT_OFFSET,\n        multiline: multiline ? multiline : null,\n        dense: dense ? dense : null,\n        topPosition: topPosition,\n        fontSize: fontSize,\n        label: label,\n        scale: fontScale,\n        isAndroid: Platform.OS === 'android',\n        styles: StyleSheet.flatten(dense ? styles.inputFlatDense : styles.inputFlat)\n      };\n      var pad = calculatePadding(paddingSettings);\n      var paddingFlat = adjustPaddingFlat(_objectSpread(_objectSpread({}, paddingSettings), {}, {\n        pad: pad\n      }));\n      var baseLabelTranslateY = -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n      var placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n      var minHeight = height || (dense ? label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT : MIN_HEIGHT);\n      var flatHeight = inputHeight + (!height ? dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP : 0);\n      var iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n      var leftAffixTopPosition = leftLayout.height ? calculateFlatAffixTopPosition(_objectSpread(_objectSpread({\n        height: flatHeight\n      }, paddingFlat), {}, {\n        affixHeight: leftLayout.height\n      })) : null;\n      var rightAffixTopPosition = rightLayout.height ? calculateFlatAffixTopPosition(_objectSpread(_objectSpread({\n        height: flatHeight\n      }, paddingFlat), {}, {\n        affixHeight: rightLayout.height\n      })) : null;\n      var labelProps = {\n        label: label,\n        onLayoutAnimatedText: onLayoutAnimatedText,\n        placeholderOpacity: placeholderOpacity,\n        error: error,\n        placeholderStyle: styles.placeholder,\n        baseLabelTranslateY: baseLabelTranslateY,\n        baseLabelTranslateX: baseLabelTranslateX,\n        font: font,\n        fontSize: fontSize,\n        fontWeight: fontWeight,\n        labelScale: labelScale,\n        wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n        topPosition: topPosition,\n        paddingOffset: {\n          paddingLeft: paddingLeft,\n          paddingRight: paddingRight\n        },\n        hasActiveOutline: hasActiveOutline,\n        activeColor: activeColor,\n        placeholderColor: placeholderColor,\n        errorColor: errorColor\n      };\n      var affixTopPosition = (_affixTopPosition = {}, _defineProperty2(_affixTopPosition, AdornmentSide.Left, leftAffixTopPosition), _defineProperty2(_affixTopPosition, AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n      var onAffixChange = (_onAffixChange = {}, _defineProperty2(_onAffixChange, AdornmentSide.Left, onLeftAffixLayoutChange), _defineProperty2(_onAffixChange, AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n      var adornmentProps = {\n        adornmentConfig: adornmentConfig,\n        forceFocus: forceFocus,\n        topPosition: (_topPosition = {}, _defineProperty2(_topPosition, AdornmentType.Affix, affixTopPosition), _defineProperty2(_topPosition, AdornmentType.Icon, iconTopPosition), _topPosition),\n        onAffixChange: onAffixChange,\n        isTextInputFocused: this.props.parentState.focused\n      };\n      if (adornmentConfig.length) {\n        adornmentProps = _objectSpread(_objectSpread({}, adornmentProps), {}, {\n          left: left,\n          right: right,\n          textStyle: _objectSpread(_objectSpread({}, font), {}, {\n            fontSize: fontSize,\n            fontWeight: fontWeight\n          }),\n          visible: this.props.parentState.labeled\n        });\n      }\n      return React.createElement(View, {\n        style: [containerStyle, viewStyle]\n      }, React.createElement(Underline, {\n        parentState: parentState,\n        underlineColorCustom: underlineColorCustom,\n        error: error,\n        colors: colors,\n        activeColor: activeColor\n      }), React.createElement(View, {\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0,\n          minHeight: minHeight\n        }\n      }, React.createElement(InputLabel, {\n        parentState: parentState,\n        labelProps: labelProps\n      }), render === null || render === void 0 ? void 0 : render(_objectSpread(_objectSpread({}, rest), {}, {\n        ref: innerRef,\n        onChangeText: onChangeText,\n        placeholder: label ? parentState.placeholder : this.props.placeholder,\n        placeholderTextColor: placeholderTextColor || placeholderColor,\n        editable: !disabled && editable,\n        selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        underlineColorAndroid: 'transparent',\n        multiline: multiline,\n        style: [styles.input, {\n          paddingLeft: paddingLeft,\n          paddingRight: paddingRight\n        }, !multiline || multiline && height ? {\n          height: flatHeight\n        } : {}, paddingFlat, _objectSpread(_objectSpread({}, font), {}, {\n          fontSize: fontSize,\n          fontWeight: fontWeight,\n          color: inputTextColor,\n          textAlignVertical: multiline ? 'top' : 'center'\n        }), adornmentStyleAdjustmentForNativeInput]\n      }))), React.createElement(TextInputAdornment, adornmentProps));\n    }\n  }]);\n  return TextInputFlat;\n}(React.Component);\n_defineProperty(TextInputFlat, \"defaultProps\", {\n  disabled: false,\n  error: false,\n  multiline: false,\n  editable: true,\n  render: function render(props) {\n    return React.createElement(NativeTextInput, props);\n  }\n});\nexport default TextInputFlat;\nvar Underline = function Underline(_ref2) {\n  var parentState = _ref2.parentState,\n    error = _ref2.error,\n    colors = _ref2.colors,\n    activeColor = _ref2.activeColor,\n    underlineColorCustom = _ref2.underlineColorCustom;\n  var backgroundColor = parentState.focused ? activeColor : underlineColorCustom;\n  if (error) backgroundColor = colors.error;\n  return React.createElement(Animated.View, {\n    style: [styles.underline, {\n      backgroundColor: backgroundColor,\n      transform: [{\n        scaleY: parentState.focused ? 1 : 0.5\n      }]\n    }]\n  });\n};\nvar styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    zIndex: 1\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2\n  }\n});","map":{"version":3,"mappings":"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","names":["React","color","InputLabel","TextInputAdornment","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","ADORNMENT_SIZE","FLAT_INPUT_OFFSET","calculateLabelTopPosition","calculateInputHeight","calculatePadding","adjustPaddingFlat","interpolatePlaceholder","calculateFlatAffixTopPosition","calculateFlatInputHorizontalPadding","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","AdornmentSide","AdornmentType","MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","LABEL_PADDING_TOP_DENSE","MIN_HEIGHT","MIN_DENSE_HEIGHT_WL","MIN_DENSE_HEIGHT","TextInputFlat","props","disabled","_this$props","editable","label","error","selectionColor","underlineColor","dense","style","theme","render","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","rest","colors","fonts","font","regular","hasActiveOutline","focused","StyleSheet","flatten","fontSizeStyle","_ref","fontSize","fontWeight","height","paddingHorizontal","viewStyle","isPaddingHorizontalPassed","undefined","adornmentConfig","paddingLeft","paddingRight","leftLayout","rightLayout","rightAffixWidth","width","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","inputOffset","inputTextColor","activeColor","underlineColorCustom","placeholderColor","errorColor","text","alpha","rgb","string","primary","placeholder","containerStyle","backgroundColor","dark","background","lighten","darken","borderTopLeftRadius","roundness","borderTopRightRadius","labelScale","fontScale","labelWidth","labelLayout","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","isRTL","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","isAndroid","Platform","OS","styles","inputFlatDense","inputFlat","pad","paddingFlat","baseLabelTranslateY","placeholderOpacity","labeled","measured","minHeight","flatHeight","iconTopPosition","leftAffixTopPosition","affixHeight","rightAffixTopPosition","labelProps","placeholderStyle","wiggleOffsetX","paddingOffset","affixTopPosition","Left","Right","onAffixChange","adornmentProps","Affix","Icon","isTextInputFocused","length","textStyle","visible","View","Underline","paddingTop","paddingBottom","ref","underlineColorAndroid","input","textAlignVertical","Component","NativeTextInput","Animated","underline","transform","scaleY","create","position","bottom","flexGrow","margin","textAlign","zIndex"],"sources":["TextInputFlat.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Animated,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\nimport InputLabel from './Label/InputLabel';\nimport TextInputAdornment, {\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  FLAT_INPUT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingFlat,\n  Padding,\n  interpolatePlaceholder,\n  calculateFlatAffixTopPosition,\n  calculateFlatInputHorizontalPadding,\n} from './helpers';\nimport {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n} from './Adornment/TextInputAdornment';\nimport { AdornmentSide, AdornmentType } from './Adornment/enums';\n\nconst MINIMIZED_LABEL_Y_OFFSET = -18;\n\nconst LABEL_PADDING_TOP = 30;\nconst LABEL_PADDING_TOP_DENSE = 24;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT_WL = 52;\nconst MIN_DENSE_HEIGHT = 40;\n\nclass TextInputFlat extends React.Component<ChildTextInputProps> {\n  static defaultProps = {\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  render() {\n    const {\n      disabled,\n      editable,\n      label,\n      error,\n      selectionColor,\n      underlineColor,\n      dense,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      forceFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      onLeftAffixLayoutChange,\n      onRightAffixLayoutChange,\n      left,\n      right,\n      placeholderTextColor,\n      ...rest\n    } = this.props;\n\n    const { colors, fonts } = theme;\n    const font = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n\n    const {\n      fontSize: fontSizeStyle,\n      fontWeight,\n      height,\n      paddingHorizontal,\n      ...viewStyle\n    } = (StyleSheet.flatten(style) || {}) as TextStyle;\n    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n    const isPaddingHorizontalPassed =\n      paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n\n    const adornmentConfig = getAdornmentConfig({\n      left,\n      right,\n    });\n\n    let { paddingLeft, paddingRight } = calculateFlatInputHorizontalPadding({\n      adornmentConfig,\n    });\n\n    if (isPaddingHorizontalPassed) {\n      paddingLeft = paddingHorizontal as number;\n      paddingRight = paddingHorizontal as number;\n    }\n\n    const { leftLayout, rightLayout } = parentState;\n\n    const rightAffixWidth = right\n      ? rightLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const leftAffixWidth = left\n      ? leftLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput(\n      {\n        adornmentConfig,\n        rightAffixWidth,\n        leftAffixWidth,\n        inputOffset: FLAT_INPUT_OFFSET,\n      }\n    );\n\n    let inputTextColor,\n      activeColor,\n      underlineColorCustom,\n      placeholderColor,\n      errorColor;\n\n    if (disabled) {\n      inputTextColor = activeColor = color(colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n      placeholderColor = colors.disabled;\n      underlineColorCustom = 'transparent';\n    } else {\n      inputTextColor = colors.text;\n      activeColor = error ? colors.error : colors.primary;\n      placeholderColor = colors.placeholder;\n      errorColor = colors.error;\n      underlineColorCustom = underlineColor || colors.disabled;\n    }\n\n    const containerStyle = {\n      backgroundColor: theme.dark\n        ? color(colors.background).lighten(0.24).rgb().string()\n        : color(colors.background).darken(0.06).rgb().string(),\n      borderTopLeftRadius: theme.roundness,\n      borderTopRightRadius: theme.roundness,\n    };\n\n    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n    const labelWidth = parentState.labelLayout.width;\n    const labelHeight = parentState.labelLayout.height;\n    const labelHalfWidth = labelWidth / 2;\n    const labelHalfHeight = labelHeight / 2;\n\n    const baseLabelTranslateX =\n      (I18nManager.isRTL ? 1 : -1) *\n        (labelHalfWidth - (labelScale * labelWidth) / 2) +\n      (1 - labelScale) * (I18nManager.isRTL ? -1 : 1) * paddingLeft;\n\n    const minInputHeight = dense\n      ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) -\n        LABEL_PADDING_TOP_DENSE\n      : MIN_HEIGHT - LABEL_PADDING_TOP;\n\n    const inputHeight = calculateInputHeight(\n      labelHeight,\n      height,\n      minInputHeight\n    );\n\n    const topPosition = calculateLabelTopPosition(\n      labelHeight,\n      inputHeight,\n      multiline && height ? 0 : !height ? minInputHeight / 2 : 0\n    );\n\n    if (height && typeof height !== 'number') {\n      // eslint-disable-next-line\n      console.warn('Currently we support only numbers in height prop');\n    }\n\n    const paddingSettings = {\n      height: height ? +height : null,\n      labelHalfHeight,\n      offset: FLAT_INPUT_OFFSET,\n      multiline: multiline ? multiline : null,\n      dense: dense ? dense : null,\n      topPosition,\n      fontSize,\n      label,\n      scale: fontScale,\n      isAndroid: Platform.OS === 'android',\n      styles: StyleSheet.flatten(\n        dense ? styles.inputFlatDense : styles.inputFlat\n      ) as Padding,\n    };\n\n    const pad = calculatePadding(paddingSettings);\n\n    const paddingFlat = adjustPaddingFlat({\n      ...paddingSettings,\n      pad,\n    });\n\n    const baseLabelTranslateY =\n      -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n\n    const placeholderOpacity = hasActiveOutline\n      ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n      : parentState.labelLayout.measured\n      ? 1\n      : 0;\n\n    const minHeight =\n      height ||\n      (dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) : MIN_HEIGHT);\n\n    const flatHeight =\n      inputHeight +\n      (!height ? (dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP) : 0);\n\n    const iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n\n    const leftAffixTopPosition = leftLayout.height\n      ? calculateFlatAffixTopPosition({\n          height: flatHeight,\n          ...paddingFlat,\n          affixHeight: leftLayout.height,\n        })\n      : null;\n\n    const rightAffixTopPosition = rightLayout.height\n      ? calculateFlatAffixTopPosition({\n          height: flatHeight,\n          ...paddingFlat,\n          affixHeight: rightLayout.height,\n        })\n      : null;\n\n    const labelProps = {\n      label,\n      onLayoutAnimatedText,\n      placeholderOpacity,\n      error,\n      placeholderStyle: styles.placeholder,\n      baseLabelTranslateY,\n      baseLabelTranslateX,\n      font,\n      fontSize,\n      fontWeight,\n      labelScale,\n      wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n      topPosition,\n      paddingOffset: { paddingLeft, paddingRight },\n      hasActiveOutline,\n      activeColor,\n      placeholderColor,\n      errorColor,\n    };\n    const affixTopPosition = {\n      [AdornmentSide.Left]: leftAffixTopPosition,\n      [AdornmentSide.Right]: rightAffixTopPosition,\n    };\n    const onAffixChange = {\n      [AdornmentSide.Left]: onLeftAffixLayoutChange,\n      [AdornmentSide.Right]: onRightAffixLayoutChange,\n    };\n\n    let adornmentProps: TextInputAdornmentProps = {\n      adornmentConfig,\n      forceFocus,\n      topPosition: {\n        [AdornmentType.Affix]: affixTopPosition,\n        [AdornmentType.Icon]: iconTopPosition,\n      },\n      onAffixChange,\n      isTextInputFocused: this.props.parentState.focused,\n    };\n    if (adornmentConfig.length) {\n      adornmentProps = {\n        ...adornmentProps,\n        left,\n        right,\n        textStyle: { ...font, fontSize, fontWeight },\n        visible: this.props.parentState.labeled,\n      };\n    }\n\n    return (\n      <View style={[containerStyle, viewStyle]}>\n        <Underline\n          parentState={parentState}\n          underlineColorCustom={underlineColorCustom}\n          error={error}\n          colors={colors}\n          activeColor={activeColor}\n        />\n        <View\n          style={{\n            paddingTop: 0,\n            paddingBottom: 0,\n            minHeight,\n          }}\n        >\n          <InputLabel parentState={parentState} labelProps={labelProps} />\n          {render?.({\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            // @ts-ignore\n            placeholder: label\n              ? parentState.placeholder\n              : this.props.placeholder,\n            placeholderTextColor: placeholderTextColor || placeholderColor,\n            editable: !disabled && editable,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              { paddingLeft, paddingRight },\n              !multiline || (multiline && height) ? { height: flatHeight } : {},\n              paddingFlat,\n              {\n                ...font,\n                fontSize,\n                fontWeight,\n                color: inputTextColor,\n                textAlignVertical: multiline ? 'top' : 'center',\n              },\n              adornmentStyleAdjustmentForNativeInput,\n            ],\n          })}\n        </View>\n        <TextInputAdornment {...adornmentProps} />\n      </View>\n    );\n  }\n}\n\nexport default TextInputFlat;\n\ntype UnderlineProps = {\n  parentState: {\n    focused: boolean;\n  };\n  error?: boolean;\n  colors: {\n    error: string;\n  };\n  activeColor: string;\n  underlineColorCustom?: string;\n};\n\nconst Underline = ({\n  parentState,\n  error,\n  colors,\n  activeColor,\n  underlineColorCustom,\n}: UnderlineProps) => {\n  let backgroundColor = parentState.focused\n    ? activeColor\n    : underlineColorCustom;\n  if (error) backgroundColor = colors.error;\n  return (\n    <Animated.View\n      style={[\n        styles.underline,\n        {\n          backgroundColor,\n          // Underlines is thinner when input is not focused\n          transform: [{ scaleY: parentState.focused ? 1 : 0.5 }],\n        },\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    zIndex: 1,\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4,\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}