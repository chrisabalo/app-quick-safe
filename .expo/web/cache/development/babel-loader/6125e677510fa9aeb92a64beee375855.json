{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport color from 'color';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"../ActivityIndicator\";\n\nimport FABGroup from \"./FABGroup\";\nimport Surface from \"../Surface\";\nimport CrossFadeIcon from \"../CrossFadeIcon\";\nimport Icon from \"../Icon\";\nimport Text from \"../Typography/Text\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { black, white } from \"../../styles/colors\";\nimport { withTheme } from \"../../core/theming\";\n\nvar FAB = function FAB(_ref) {\n  var small = _ref.small,\n    icon = _ref.icon,\n    label = _ref.label,\n    _ref$accessibilityLab = _ref.accessibilityLabel,\n    accessibilityLabel = _ref$accessibilityLab === void 0 ? label : _ref$accessibilityLab,\n    accessibilityState = _ref.accessibilityState,\n    _ref$animated = _ref.animated,\n    animated = _ref$animated === void 0 ? true : _ref$animated,\n    customColor = _ref.color,\n    disabled = _ref.disabled,\n    onPress = _ref.onPress,\n    onLongPress = _ref.onLongPress,\n    theme = _ref.theme,\n    style = _ref.style,\n    _ref$visible = _ref.visible,\n    visible = _ref$visible === void 0 ? true : _ref$visible,\n    _ref$uppercase = _ref.uppercase,\n    uppercase = _ref$uppercase === void 0 ? true : _ref$uppercase,\n    loading = _ref.loading,\n    testID = _ref.testID,\n    rest = _objectWithoutProperties(_ref, [\"small\", \"icon\", \"label\", \"accessibilityLabel\", \"accessibilityState\", \"animated\", \"color\", \"disabled\", \"onPress\", \"onLongPress\", \"theme\", \"style\", \"visible\", \"uppercase\", \"loading\", \"testID\"]);\n  var _React$useRef = React.useRef(new Animated.Value(visible ? 1 : 0)),\n    visibility = _React$useRef.current;\n  var scale = theme.animation.scale;\n  React.useEffect(function () {\n    if (visible) {\n      Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n  var IconComponent = animated ? CrossFadeIcon : Icon;\n  var disabledColor = color(theme.dark ? white : black).alpha(0.12).rgb().string();\n  var _ref2 = StyleSheet.flatten(style) || {},\n    _ref2$backgroundColor = _ref2.backgroundColor,\n    backgroundColor = _ref2$backgroundColor === void 0 ? disabled ? disabledColor : theme.colors.accent : _ref2$backgroundColor;\n  var foregroundColor;\n  if (typeof customColor !== 'undefined') {\n    foregroundColor = customColor;\n  } else if (disabled) {\n    foregroundColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n  } else {\n    foregroundColor = !color(backgroundColor).isLight() ? white : 'rgba(0, 0, 0, .54)';\n  }\n  var rippleColor = color(foregroundColor).alpha(0.32).rgb().string();\n  return React.createElement(Surface, _extends({}, rest, {\n    style: [{\n      backgroundColor: backgroundColor,\n      opacity: visibility,\n      transform: [{\n        scale: visibility\n      }]\n    }, styles.container, disabled && styles.disabled, style],\n    pointerEvents: visible ? 'auto' : 'none'\n  }), React.createElement(TouchableRipple, {\n    borderless: true,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    rippleColor: rippleColor,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: _objectSpread(_objectSpread({}, accessibilityState), {}, {\n      disabled: disabled\n    }),\n    style: styles.touchable,\n    testID: testID\n  }, React.createElement(View, {\n    style: [styles.content, label ? styles.extended : small ? styles.small : styles.standard],\n    pointerEvents: \"none\"\n  }, icon && loading !== true ? React.createElement(IconComponent, {\n    source: icon,\n    size: 24,\n    color: foregroundColor\n  }) : null, loading ? React.createElement(ActivityIndicator, {\n    size: 18,\n    color: foregroundColor\n  }) : null, label ? React.createElement(Text, {\n    style: [styles.label, uppercase && styles.uppercaseLabel, _objectSpread({\n      color: foregroundColor\n    }, theme.fonts.medium)]\n  }, label) : null)));\n};\n\nFAB.Group = FABGroup;\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 28,\n    elevation: 6\n  },\n  touchable: {\n    borderRadius: 28\n  },\n  standard: {\n    height: 56,\n    width: 56\n  },\n  small: {\n    height: 40,\n    width: 40\n  },\n  extended: {\n    height: 48,\n    paddingHorizontal: 16\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  label: {\n    marginHorizontal: 8\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  },\n  disabled: {\n    elevation: 0\n  }\n});\nexport default withTheme(FAB);","map":{"version":3,"mappings":"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","names":["color","React","ActivityIndicator","FABGroup","Surface","CrossFadeIcon","Icon","Text","TouchableRipple","black","white","withTheme","FAB","_ref","small","icon","label","accessibilityLabel","accessibilityState","animated","customColor","disabled","onPress","onLongPress","theme","style","visible","uppercase","loading","testID","rest","useRef","Animated","Value","visibility","current","scale","animation","useEffect","timing","toValue","duration","useNativeDriver","start","IconComponent","disabledColor","dark","alpha","rgb","string","StyleSheet","flatten","backgroundColor","colors","accent","foregroundColor","isLight","rippleColor","opacity","transform","styles","container","pointerEvents","borderless","accessibilityTraits","accessibilityComponentType","accessibilityRole","touchable","View","content","extended","standard","source","size","uppercaseLabel","fonts","medium","Group","create","borderRadius","elevation","height","width","paddingHorizontal","flexDirection","alignItems","justifyContent","marginHorizontal","textTransform"],"sources":["FAB.tsx"],"sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { Animated, View, ViewStyle, StyleSheet, StyleProp } from 'react-native';\nimport ActivityIndicator from '../ActivityIndicator';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport FABGroup, { FABGroup as _FABGroup } from './FABGroup';\nimport Surface from '../Surface';\nimport CrossFadeIcon from '../CrossFadeIcon';\nimport Icon from '../Icon';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\nimport type { IconSource } from './../Icon';\nimport type { AccessibilityState } from 'react-native';\n\ntype Props = $RemoveChildren<typeof Surface> & {\n  /**\n   * Icon to display for the `FAB`.\n   */\n  icon: IconSource;\n  /**\n   * Optional label for extended `FAB`.\n   */\n  label?: string;\n  /**\n   * Make the label text uppercased.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\n   * Uses `label` by default if specified.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility state for the FAB. This is read by the screen reader when the user taps the FAB.\n   */\n  accessibilityState?: AccessibilityState;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   *  Whether FAB is mini-sized, used to create visual continuity with other elements. This has no effect if `label` is specified.\n   */\n  small?: boolean;\n  /**\n   * Custom color for the icon and label of the `FAB`.\n   */\n  color?: string;\n  /**\n   * Whether `FAB` is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether `FAB` is currently visible.\n   */\n  visible?: boolean;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  testID?: string;\n};\n\n/**\n * A floating action button represents the primary action in an application.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/fab-1.png\" />\n *   <img src=\"screenshots/fab-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { StyleSheet } from 'react-native';\n * import { FAB } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <FAB\n *     style={styles.fab}\n *     small\n *     icon=\"plus\"\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * const styles = StyleSheet.create({\n *   fab: {\n *     position: 'absolute',\n *     margin: 16,\n *     right: 0,\n *     bottom: 0,\n *   },\n * })\n *\n * export default MyComponent;\n * ```\n */\nconst FAB = ({\n  small,\n  icon,\n  label,\n  accessibilityLabel = label,\n  accessibilityState,\n  animated = true,\n  color: customColor,\n  disabled,\n  onPress,\n  onLongPress,\n  theme,\n  style,\n  visible = true,\n  uppercase = true,\n  loading,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: visibility } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    if (visible) {\n      Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n\n  const disabledColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  const { backgroundColor = disabled ? disabledColor : theme.colors.accent } =\n    StyleSheet.flatten(style) || {};\n\n  let foregroundColor;\n\n  if (typeof customColor !== 'undefined') {\n    foregroundColor = customColor;\n  } else if (disabled) {\n    foregroundColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else {\n    foregroundColor = !color(backgroundColor).isLight()\n      ? white\n      : 'rgba(0, 0, 0, .54)';\n  }\n\n  const rippleColor = color(foregroundColor).alpha(0.32).rgb().string();\n\n  return (\n    <Surface\n      {...rest}\n      style={\n        [\n          {\n            backgroundColor,\n            opacity: visibility,\n            transform: [\n              {\n                scale: visibility,\n              },\n            ],\n          },\n          styles.container,\n          disabled && styles.disabled,\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      pointerEvents={visible ? 'auto' : 'none'}\n    >\n      <TouchableRipple\n        borderless\n        onPress={onPress}\n        onLongPress={onLongPress}\n        rippleColor={rippleColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ ...accessibilityState, disabled }}\n        style={styles.touchable}\n        testID={testID}\n      >\n        <View\n          style={[\n            styles.content,\n            label ? styles.extended : small ? styles.small : styles.standard,\n          ]}\n          pointerEvents=\"none\"\n        >\n          {icon && loading !== true ? (\n            <IconComponent source={icon} size={24} color={foregroundColor} />\n          ) : null}\n          {loading ? (\n            <ActivityIndicator size={18} color={foregroundColor} />\n          ) : null}\n          {label ? (\n            <Text\n              style={[\n                styles.label,\n                uppercase && styles.uppercaseLabel,\n                { color: foregroundColor, ...theme.fonts.medium },\n              ]}\n            >\n              {label}\n            </Text>\n          ) : null}\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\n// @component ./FABGroup.tsx\nFAB.Group = FABGroup;\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 28,\n    elevation: 6,\n  },\n  touchable: {\n    borderRadius: 28,\n  },\n  standard: {\n    height: 56,\n    width: 56,\n  },\n  small: {\n    height: 40,\n    width: 40,\n  },\n  extended: {\n    height: 48,\n    paddingHorizontal: 16,\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  label: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n  disabled: {\n    elevation: 0,\n  },\n});\n\nexport default withTheme(FAB);\n"]},"metadata":{},"sourceType":"module"}