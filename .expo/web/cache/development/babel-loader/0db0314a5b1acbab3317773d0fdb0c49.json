{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"E:\\\\local\\\\app-quick-safe\\\\node_modules\\\\@react-navigation\\\\drawer\\\\src\\\\views\\\\Drawer.tsx\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport View from \"react-native-web/dist/exports/View\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Animated from 'react-native-reanimated';\nimport { PanGestureHandler, TapGestureHandler, GestureState } from \"./GestureHandler\";\nimport Overlay from \"./Overlay\";\nvar Clock = Animated.Clock,\n  Value = Animated.Value,\n  onChange = Animated.onChange,\n  clockRunning = Animated.clockRunning,\n  startClock = Animated.startClock,\n  stopClock = Animated.stopClock,\n  spring = Animated.spring,\n  abs = Animated.abs,\n  add = Animated.add,\n  and = Animated.and,\n  block = Animated.block,\n  call = Animated.call,\n  cond = Animated.cond,\n  divide = Animated.divide,\n  eq = Animated.eq,\n  event = Animated.event,\n  greaterThan = Animated.greaterThan,\n  lessThan = Animated.lessThan,\n  max = Animated.max,\n  min = Animated.min,\n  multiply = Animated.multiply,\n  neq = Animated.neq,\n  or = Animated.or,\n  set = Animated.set,\n  sub = Animated.sub;\nvar TRUE = 1;\nvar FALSE = 0;\nvar NOOP = 0;\nvar UNSET = -1;\nvar DIRECTION_LEFT = 1;\nvar DIRECTION_RIGHT = -1;\nvar SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\nvar SWIPE_DISTANCE_MINIMUM = 5;\nvar DEFAULT_DRAWER_WIDTH = '80%';\nvar SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01\n};\nvar ANIMATED_ZERO = new Animated.Value(0);\nvar ANIMATED_ONE = new Animated.Value(1);\nvar DrawerView = function (_React$Component) {\n  _inherits(DrawerView, _React$Component);\n  var _super = _createSuper(DrawerView);\n  function DrawerView() {\n    var _this;\n    _classCallCheck(this, DrawerView);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.handleEscape = function (e) {\n      var _this$props = _this.props,\n        open = _this$props.open,\n        onClose = _this$props.onClose;\n      if (e.key === 'Escape') {\n        if (open) {\n          onClose();\n        }\n      }\n    };\n    _this.handleEndInteraction = function () {\n      if (_this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(_this.interactionHandle);\n        _this.interactionHandle = undefined;\n      }\n    };\n    _this.handleStartInteraction = function () {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    };\n    _this.getDrawerWidth = function () {\n      var _this$props2 = _this.props,\n        drawerStyle = _this$props2.drawerStyle,\n        dimensions = _this$props2.dimensions;\n      var _ref = StyleSheet.flatten(drawerStyle) || {},\n        _ref$width = _ref.width,\n        width = _ref$width === void 0 ? DEFAULT_DRAWER_WIDTH : _ref$width;\n      if (typeof width === 'string' && width.endsWith('%')) {\n        var percentage = Number(width.replace(/%$/, ''));\n        if (Number.isFinite(percentage)) {\n          return dimensions.width * (percentage / 100);\n        }\n      }\n      return typeof width === 'number' ? width : 0;\n    };\n    _this.clock = new Clock();\n    _this.isDrawerTypeFront = new Value(_this.props.drawerType === 'front' ? TRUE : FALSE);\n    _this.isOpen = new Value(_this.props.open ? TRUE : FALSE);\n    _this.nextIsOpen = new Value(UNSET);\n    _this.isSwiping = new Value(FALSE);\n    _this.initialDrawerWidth = _this.getDrawerWidth();\n    _this.gestureState = new Value(GestureState.UNDETERMINED);\n    _this.touchX = new Value(0);\n    _this.velocityX = new Value(0);\n    _this.gestureX = new Value(0);\n    _this.offsetX = new Value(0);\n    _this.position = new Value(_this.props.open ? _this.initialDrawerWidth * (_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT) : 0);\n    _this.containerWidth = new Value(_this.props.dimensions.width);\n    _this.drawerWidth = new Value(_this.initialDrawerWidth);\n    _this.drawerOpacity = new Value(_this.props.drawerType === 'permanent' ? 1 : 0);\n    _this.drawerPosition = new Value(_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n    _this.touchDistanceFromDrawer = cond(_this.isDrawerTypeFront, cond(eq(_this.drawerPosition, DIRECTION_LEFT), max(\n    sub(sub(_this.touchX, _this.gestureX), _this.drawerWidth), 0), min(multiply(\n    sub(sub(_this.containerWidth, _this.drawerWidth), sub(_this.touchX, _this.gestureX)), DIRECTION_RIGHT), 0)), 0);\n    _this.swipeDistanceThreshold = new Value(_this.props.swipeDistanceThreshold !== undefined ? _this.props.swipeDistanceThreshold : SWIPE_DISTANCE_THRESHOLD_DEFAULT);\n    _this.swipeVelocityThreshold = new Value(_this.props.swipeVelocityThreshold);\n    _this.currentOpenValue = _this.props.open;\n    _this.isStatusBarHidden = false;\n    _this.manuallyTriggerSpring = new Value(FALSE);\n    _this.transitionTo = function (isOpen) {\n      var toValue = new Value(0);\n      var frameTime = new Value(0);\n      var state = {\n        position: _this.position,\n        time: new Value(0),\n        finished: new Value(FALSE),\n        velocity: new Value(0)\n      };\n      return block([cond(clockRunning(_this.clock), NOOP, [\n      set(toValue, multiply(isOpen, _this.drawerWidth, _this.drawerPosition)), set(frameTime, 0), set(state.time, 0), set(state.finished, FALSE), set(state.velocity, _this.velocityX), set(_this.isOpen, isOpen), startClock(_this.clock), call([], _this.handleStartInteraction), set(_this.manuallyTriggerSpring, FALSE)]), spring(_this.clock, state, _objectSpread(_objectSpread({}, SPRING_CONFIG), {}, {\n        toValue: toValue\n      })), cond(state.finished, [\n      set(_this.touchX, 0), set(_this.gestureX, 0), set(_this.velocityX, 0), set(_this.offsetX, 0),\n      stopClock(_this.clock), call([_this.isOpen], function (_ref2) {\n        var _ref3 = _slicedToArray(_ref2, 1),\n          value = _ref3[0];\n        var open = Boolean(value);\n        _this.handleEndInteraction();\n        if (open !== _this.props.open) {\n          _this.toggleDrawer(_this.props.open);\n        }\n      })])]);\n    };\n    _this.dragX = block([onChange(_this.isOpen, call([_this.isOpen], function (_ref4) {\n      var _ref5 = _slicedToArray(_ref4, 1),\n        value = _ref5[0];\n      var open = Boolean(value);\n      _this.currentOpenValue = open;\n\n      if (open !== _this.props.open) {\n        if (open) {\n          _this.props.onOpen();\n        } else {\n          _this.props.onClose();\n        }\n        _this.pendingOpenValue = open;\n\n        _this.forceUpdate();\n      }\n    })), onChange(_this.nextIsOpen, cond(neq(_this.nextIsOpen, UNSET), [\n    cond(clockRunning(_this.clock), stopClock(_this.clock)),\n    set(_this.isOpen, _this.nextIsOpen), set(_this.gestureX, 0), set(_this.nextIsOpen, UNSET)])),\n    onChange(_this.isSwiping,\n    call([_this.isSwiping], function (_ref6) {\n      var _ref7 = _slicedToArray(_ref6, 1),\n        value = _ref7[0];\n      var keyboardDismissMode = _this.props.keyboardDismissMode;\n      if (value === TRUE) {\n        if (keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n        _this.toggleStatusBar(true);\n      } else {\n        _this.toggleStatusBar(_this.currentOpenValue);\n      }\n    })), onChange(_this.gestureState, cond(eq(_this.gestureState, GestureState.ACTIVE), call([], _this.handleStartInteraction))), cond(eq(_this.gestureState, GestureState.ACTIVE), [cond(_this.isSwiping, NOOP, [\n    set(_this.isSwiping, TRUE),\n    set(_this.offsetX, _this.position)]),\n    set(_this.position, add(_this.offsetX, _this.gestureX, _this.touchDistanceFromDrawer)),\n    stopClock(_this.clock)], [set(_this.isSwiping, FALSE), set(_this.touchX, 0), _this.transitionTo(cond(_this.manuallyTriggerSpring, _this.isOpen, cond(or(and(greaterThan(abs(_this.gestureX), SWIPE_DISTANCE_MINIMUM), greaterThan(abs(_this.velocityX), _this.swipeVelocityThreshold)), greaterThan(abs(_this.gestureX), _this.swipeDistanceThreshold)), cond(eq(_this.drawerPosition, DIRECTION_LEFT),\n    greaterThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0),\n    lessThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0)), _this.isOpen)))]), _this.position]);\n    _this.translateX = cond(eq(_this.drawerPosition, DIRECTION_RIGHT), min(max(multiply(_this.drawerWidth, -1), _this.dragX), 0), max(min(_this.drawerWidth, _this.dragX), 0));\n    _this.progress = cond(\n    eq(_this.drawerWidth, 0), 0, abs(divide(_this.translateX, _this.drawerWidth)));\n    _this.handleGestureEvent = event([{\n      nativeEvent: {\n        x: _this.touchX,\n        translationX: _this.gestureX,\n        velocityX: _this.velocityX\n      }\n    }]);\n    _this.handleGestureStateChange = event([{\n      nativeEvent: {\n        state: function state(s) {\n          return set(_this.gestureState, s);\n        }\n      }\n    }]);\n    _this.handleTapStateChange = event([{\n      nativeEvent: {\n        oldState: function oldState(s) {\n          return cond(eq(s, GestureState.ACTIVE), set(_this.manuallyTriggerSpring, TRUE));\n        }\n      }\n    }]);\n    _this.handleContainerLayout = function (e) {\n      return _this.containerWidth.setValue(e.nativeEvent.layout.width);\n    };\n    _this.handleDrawerLayout = function (e) {\n      _this.drawerWidth.setValue(e.nativeEvent.layout.width);\n      _this.toggleDrawer(_this.props.open);\n\n      requestAnimationFrame(function () {\n        return requestAnimationFrame(function () {\n          return _this.drawerOpacity.setValue(1);\n        });\n      });\n    };\n    _this.toggleDrawer = function (open) {\n      if (_this.currentOpenValue !== open) {\n        _this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n        _this.currentOpenValue = open;\n      }\n    };\n    _this.toggleStatusBar = function (hidden) {\n      var _this$props3 = _this.props,\n        hideStatusBar = _this$props3.hideStatusBar,\n        statusBarAnimation = _this$props3.statusBarAnimation;\n      if (hideStatusBar && _this.isStatusBarHidden !== hidden) {\n        _this.isStatusBarHidden = hidden;\n        StatusBar.setHidden(hidden, statusBarAnimation);\n      }\n    };\n    return _this;\n  }\n  _createClass(DrawerView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (Platform.OS === 'web') {\n        var _document, _document$body;\n        (_document = document) == null ? void 0 : (_document$body = _document.body) == null ? void 0 : _document$body.addEventListener == null ? void 0 : _document$body.addEventListener('keyup', this.handleEscape);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props4 = this.props,\n        open = _this$props4.open,\n        drawerPosition = _this$props4.drawerPosition,\n        drawerType = _this$props4.drawerType,\n        swipeDistanceThreshold = _this$props4.swipeDistanceThreshold,\n        swipeVelocityThreshold = _this$props4.swipeVelocityThreshold,\n        hideStatusBar = _this$props4.hideStatusBar;\n      if (\n      typeof this.pendingOpenValue !== 'boolean' || open !== this.pendingOpenValue) {\n        this.toggleDrawer(open);\n      }\n      this.pendingOpenValue = undefined;\n      if (open !== prevProps.open && hideStatusBar) {\n        this.toggleStatusBar(open);\n      }\n      if (prevProps.drawerPosition !== drawerPosition) {\n        this.drawerPosition.setValue(drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n      }\n      if (prevProps.drawerType !== drawerType) {\n        this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n      }\n      if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n        this.swipeDistanceThreshold.setValue(swipeDistanceThreshold !== undefined ? swipeDistanceThreshold : SWIPE_DISTANCE_THRESHOLD_DEFAULT);\n      }\n      if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n        this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.toggleStatusBar(false);\n      this.handleEndInteraction();\n      if (Platform.OS === 'web') {\n        var _document2, _document2$body;\n        (_document2 = document) == null ? void 0 : (_document2$body = _document2.body) == null ? void 0 : _document2$body.removeEventListener == null ? void 0 : _document2$body.removeEventListener('keyup', this.handleEscape);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props5 = this.props,\n        open = _this$props5.open,\n        gestureEnabled = _this$props5.gestureEnabled,\n        swipeEnabled = _this$props5.swipeEnabled,\n        drawerPosition = _this$props5.drawerPosition,\n        drawerType = _this$props5.drawerType,\n        swipeEdgeWidth = _this$props5.swipeEdgeWidth,\n        sceneContainerStyle = _this$props5.sceneContainerStyle,\n        drawerStyle = _this$props5.drawerStyle,\n        overlayStyle = _this$props5.overlayStyle,\n        renderDrawerContent = _this$props5.renderDrawerContent,\n        renderSceneContent = _this$props5.renderSceneContent,\n        gestureHandlerProps = _this$props5.gestureHandlerProps;\n      var isOpen = drawerType === 'permanent' ? true : open;\n      var isRight = drawerPosition === 'right';\n      var contentTranslateX = drawerType === 'front' || drawerType === 'permanent' ? ANIMATED_ZERO : this.translateX;\n      var drawerTranslateX = drawerType === 'permanent' ? ANIMATED_ZERO : drawerType === 'back' ? I18nManager.isRTL ? multiply(sub(this.containerWidth, this.drawerWidth), isRight ? 1 : -1) : ANIMATED_ZERO : this.translateX;\n      var offset = drawerType === 'back' ? 0 : I18nManager.isRTL ? '100%' : multiply(this.drawerWidth, -1);\n\n      var hitSlop = isRight ?\n      {\n        right: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      } : {\n        left: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      };\n      var progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n      return React.createElement(PanGestureHandler, _extends({\n        activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        onGestureEvent: this.handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange,\n        hitSlop: hitSlop,\n        enabled: drawerType !== 'permanent' && gestureEnabled && swipeEnabled\n      }, gestureHandlerProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 7\n        }\n      }), React.createElement(Animated.View, {\n        onLayout: this.handleContainerLayout,\n        style: [styles.main, {\n          flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 9\n        }\n      }, React.createElement(Animated.View, {\n        style: [styles.content, {\n          transform: [{\n            translateX: contentTranslateX\n          }]\n        }, sceneContainerStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 11\n        }\n      }, React.createElement(View, {\n        accessibilityElementsHidden: isOpen && drawerType !== 'permanent',\n        importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',\n        style: styles.content,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 645,\n          columnNumber: 13\n        }\n      }, renderSceneContent({\n        progress: progress\n      })),\n      drawerType === 'permanent' ? null : Platform.OS === 'web' || Platform.OS === 'windows' || Platform.OS === 'macos' ? React.createElement(TouchableWithoutFeedback, {\n        onPress: gestureEnabled ? function () {\n          return _this2.toggleDrawer(false);\n        } : undefined,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 17\n        }\n      }, React.createElement(Overlay, {\n        progress: progress,\n        style: overlayStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 19\n        }\n      })) : React.createElement(TapGestureHandler, {\n        enabled: gestureEnabled,\n        onHandlerStateChange: this.handleTapStateChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 669,\n          columnNumber: 17\n        }\n      }, React.createElement(Overlay, {\n        progress: progress,\n        style: overlayStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 673,\n          columnNumber: 19\n        }\n      }))), React.createElement(Animated.Code, {\n        exec: this.containerWidth,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 678,\n          columnNumber: 11\n        }\n      }), drawerType === 'permanent' ? null : React.createElement(Animated.Code, {\n        exec: block([onChange(this.manuallyTriggerSpring, [cond(eq(this.manuallyTriggerSpring, TRUE), [set(this.nextIsOpen, FALSE), call([], function () {\n          return _this2.currentOpenValue = false;\n        })])])]),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 13\n        }\n      }), React.createElement(Animated.View, {\n        accessibilityViewIsModal: isOpen && drawerType !== 'permanent',\n        removeClippedSubviews: Platform.OS !== 'ios',\n        onLayout: this.handleDrawerLayout,\n        style: [styles.container, {\n          transform: [{\n            translateX: drawerTranslateX\n          }],\n          opacity: this.drawerOpacity\n        }, drawerType === 'permanent' ?\n        isRight ? {\n          right: 0\n        } : {\n          left: 0\n        } : [styles.nonPermanent, isRight ? {\n          right: offset\n        } : {\n          left: offset\n        }, {\n          zIndex: drawerType === 'back' ? -1 : 0\n        }], drawerStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 695,\n          columnNumber: 11\n        }\n      }, renderDrawerContent({\n        progress: progress\n      }))));\n    }\n  }]);\n  return DrawerView;\n}(React.Component);\nDrawerView.defaultProps = {\n  drawerPosition: I18nManager.isRTL ? 'left' : 'right',\n  drawerType: 'front',\n  gestureEnabled: true,\n  swipeEnabled: Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos',\n  swipeEdgeWidth: 32,\n  swipeVelocityThreshold: 500,\n  keyboardDismissMode: 'on-drag',\n  hideStatusBar: false,\n  statusBarAnimation: 'slide'\n};\nexport { DrawerView as default };\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%'\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH\n  },\n  content: {\n    flex: 1\n  },\n  main: _objectSpread({\n    flex: 1\n  }, Platform.select({\n    web: null,\n    default: {\n      overflow: 'hidden'\n    }\n  }))\n});","map":{"version":3,"names":["React","Animated","PanGestureHandler","TapGestureHandler","GestureState","Overlay","Clock","Value","onChange","clockRunning","startClock","stopClock","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_THRESHOLD_DEFAULT","SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","ANIMATED_ZERO","ANIMATED_ONE","DrawerView","handleEscape","e","props","open","onClose","key","handleEndInteraction","interactionHandle","undefined","InteractionManager","clearInteractionHandle","handleStartInteraction","createInteractionHandle","getDrawerWidth","drawerStyle","dimensions","StyleSheet","flatten","width","endsWith","percentage","Number","replace","isFinite","clock","isDrawerTypeFront","drawerType","isOpen","nextIsOpen","isSwiping","initialDrawerWidth","gestureState","UNDETERMINED","touchX","velocityX","gestureX","offsetX","position","drawerPosition","containerWidth","drawerWidth","drawerOpacity","touchDistanceFromDrawer","swipeDistanceThreshold","swipeVelocityThreshold","currentOpenValue","isStatusBarHidden","manuallyTriggerSpring","transitionTo","toValue","frameTime","state","time","finished","velocity","value","Boolean","toggleDrawer","dragX","onOpen","pendingOpenValue","forceUpdate","keyboardDismissMode","Keyboard","dismiss","toggleStatusBar","ACTIVE","translateX","progress","handleGestureEvent","nativeEvent","x","translationX","handleGestureStateChange","s","handleTapStateChange","oldState","handleContainerLayout","setValue","layout","handleDrawerLayout","requestAnimationFrame","hidden","hideStatusBar","statusBarAnimation","StatusBar","setHidden","Platform","OS","document","body","addEventListener","prevProps","removeEventListener","gestureEnabled","swipeEnabled","swipeEdgeWidth","sceneContainerStyle","overlayStyle","renderDrawerContent","renderSceneContent","gestureHandlerProps","isRight","contentTranslateX","drawerTranslateX","I18nManager","isRTL","offset","hitSlop","right","left","styles","main","flexDirection","content","transform","container","opacity","nonPermanent","zIndex","Component","defaultProps","create","backgroundColor","maxWidth","top","bottom","flex","select","web","default","overflow"],"sources":["E:/local/app-quick-safe/node_modules/@react-navigation/drawer/src/views/Drawer.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  ViewStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n  Keyboard,\n  StatusBar,\n  StyleProp,\n  View,\n  InteractionManager,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport {\n  PanGestureHandler,\n  TapGestureHandler,\n  GestureState,\n} from './GestureHandler';\nimport Overlay from './Overlay';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst DEFAULT_DRAWER_WIDTH = '80%';\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst ANIMATED_ZERO = new Animated.Value(0);\nconst ANIMATED_ONE = new Animated.Value(1);\n\ntype Binary = 0 | 1;\n\ntype Renderer = (props: { progress: Animated.Node<number> }) => React.ReactNode;\n\ntype Props = {\n  open: boolean;\n  onOpen: () => void;\n  onClose: () => void;\n  gestureEnabled: boolean;\n  swipeEnabled: boolean;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide' | 'permanent';\n  keyboardDismissMode: 'none' | 'on-drag';\n  swipeEdgeWidth: number;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold: number;\n  hideStatusBar: boolean;\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  overlayStyle?: StyleProp<ViewStyle>;\n  drawerStyle?: StyleProp<ViewStyle>;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  renderDrawerContent: Renderer;\n  renderSceneContent: Renderer;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n  dimensions: { width: number; height: number };\n};\n\nexport default class DrawerView extends React.Component<Props> {\n  static defaultProps = {\n    drawerPosition: I18nManager.isRTL ? 'left' : 'right',\n    drawerType: 'front',\n    gestureEnabled: true,\n    swipeEnabled:\n      Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n    swipeEdgeWidth: 32,\n    swipeVelocityThreshold: 500,\n    keyboardDismissMode: 'on-drag',\n    hideStatusBar: false,\n    statusBarAnimation: 'slide',\n  };\n\n  componentDidMount() {\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', this.handleEscape);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBar,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(\n        swipeDistanceThreshold !== undefined\n          ? swipeDistanceThreshold\n          : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n      );\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n\n    if (Platform.OS === 'web') {\n      document?.body?.removeEventListener?.('keyup', this.handleEscape);\n    }\n  }\n\n  private handleEscape = (e: KeyboardEvent) => {\n    const { open, onClose } = this.props;\n\n    if (e.key === 'Escape') {\n      if (open) {\n        onClose();\n      }\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private getDrawerWidth = (): number => {\n    const { drawerStyle, dimensions } = this.props;\n    const { width = DEFAULT_DRAWER_WIDTH } =\n      StyleSheet.flatten(drawerStyle) || {};\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  private clock = new Clock();\n  private interactionHandle: number | undefined;\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private initialDrawerWidth = this.getDrawerWidth();\n\n  private gestureState = new Value<number>(GestureState.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(\n    this.props.open\n      ? this.initialDrawerWidth *\n        (this.props.drawerPosition === 'right'\n          ? DIRECTION_RIGHT\n          : DIRECTION_LEFT)\n      : 0\n  );\n\n  private containerWidth = new Value<number>(this.props.dimensions.width);\n  private drawerWidth = new Value<number>(this.initialDrawerWidth);\n  private drawerOpacity = new Value<number>(\n    this.props.drawerType === 'permanent' ? 1 : 0\n  );\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold !== undefined\n      ? this.props.swipeDistanceThreshold\n      : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        call([], this.handleStartInteraction),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n          this.handleEndInteraction();\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    onChange(\n      this.gestureState,\n      cond(\n        eq(this.gestureState, GestureState.ACTIVE),\n        call([], this.handleStartInteraction)\n      )\n    ),\n    cond(\n      eq(this.gestureState, GestureState.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleTapStateChange = event([\n    {\n      nativeEvent: {\n        oldState: (s: Animated.Value<number>) =>\n          cond(\n            eq(s, GestureState.ACTIVE),\n            set(this.manuallyTriggerSpring, TRUE)\n          ),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBar, statusBarAnimation } = this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      gestureEnabled,\n      swipeEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      sceneContainerStyle,\n      drawerStyle,\n      overlayStyle,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const isOpen = drawerType === 'permanent' ? true : open;\n    const isRight = drawerPosition === 'right';\n\n    const contentTranslateX =\n      drawerType === 'front' || drawerType === 'permanent'\n        ? ANIMATED_ZERO\n        : this.translateX;\n\n    const drawerTranslateX =\n      drawerType === 'permanent'\n        ? ANIMATED_ZERO\n        : drawerType === 'back'\n        ? I18nManager.isRTL\n          ? multiply(\n              sub(this.containerWidth, this.drawerWidth),\n              isRight ? 1 : -1\n            )\n          : ANIMATED_ZERO\n        : this.translateX;\n\n    const offset =\n      drawerType === 'back'\n        ? 0\n        : I18nManager.isRTL\n        ? '100%'\n        : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/kmagiera/react-native-gesture-handler/issues/569\n    const hitSlop = isRight\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n      : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n\n    return (\n      <PanGestureHandler\n        activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        onGestureEvent={this.handleGestureEvent}\n        onHandlerStateChange={this.handleGestureStateChange}\n        hitSlop={hitSlop}\n        enabled={drawerType !== 'permanent' && gestureEnabled && swipeEnabled}\n        {...gestureHandlerProps}\n      >\n        <Animated.View\n          onLayout={this.handleContainerLayout}\n          style={[\n            styles.main,\n            {\n              flexDirection:\n                drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row',\n            },\n          ]}\n        >\n          <Animated.View\n            style={[\n              styles.content,\n              { transform: [{ translateX: contentTranslateX }] },\n              sceneContainerStyle as any,\n            ]}\n          >\n            <View\n              accessibilityElementsHidden={isOpen && drawerType !== 'permanent'}\n              importantForAccessibility={\n                isOpen && drawerType !== 'permanent'\n                  ? 'no-hide-descendants'\n                  : 'auto'\n              }\n              style={styles.content}\n            >\n              {renderSceneContent({ progress })}\n            </View>\n            {\n              // Disable overlay if sidebar is permanent\n              drawerType === 'permanent' ? null : Platform.OS === 'web' ||\n                Platform.OS === 'windows' ||\n                Platform.OS === 'macos' ? (\n                <TouchableWithoutFeedback\n                  onPress={\n                    gestureEnabled ? () => this.toggleDrawer(false) : undefined\n                  }\n                >\n                  <Overlay progress={progress} style={overlayStyle as any} />\n                </TouchableWithoutFeedback>\n              ) : (\n                <TapGestureHandler\n                  enabled={gestureEnabled}\n                  onHandlerStateChange={this.handleTapStateChange}\n                >\n                  <Overlay progress={progress} style={overlayStyle as any} />\n                </TapGestureHandler>\n              )\n            }\n          </Animated.View>\n          <Animated.Code\n            // This is needed to make sure that container width updates with `setValue`\n            // Without this, it won't update when not used in styles\n            exec={this.containerWidth}\n          />\n          {drawerType === 'permanent' ? null : (\n            <Animated.Code\n              exec={block([\n                onChange(this.manuallyTriggerSpring, [\n                  cond(eq(this.manuallyTriggerSpring, TRUE), [\n                    set(this.nextIsOpen, FALSE),\n                    call([], () => (this.currentOpenValue = false)),\n                  ]),\n                ]),\n              ])}\n            />\n          )}\n          <Animated.View\n            accessibilityViewIsModal={isOpen && drawerType !== 'permanent'}\n            removeClippedSubviews={Platform.OS !== 'ios'}\n            onLayout={this.handleDrawerLayout}\n            style={[\n              styles.container,\n              {\n                transform: [{ translateX: drawerTranslateX }],\n                opacity: this.drawerOpacity,\n              },\n              drawerType === 'permanent'\n                ? // Without this, the `left`/`right` values don't get reset\n                  isRight\n                  ? { right: 0 }\n                  : { left: 0 }\n                : [\n                    styles.nonPermanent,\n                    isRight ? { right: offset } : { left: offset },\n                    { zIndex: drawerType === 'back' ? -1 : 0 },\n                  ],\n              drawerStyle as any,\n            ]}\n          >\n            {renderDrawerContent({ progress })}\n          </Animated.View>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%',\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH,\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: { overflow: 'hidden' },\n    }),\n  },\n});\n"],"mappings":";;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAc/B,OAAOC,QAAQ,MAAM,yBAAyB;AAC9C,SACEC,iBAAiB,EACjBC,iBAAiB,EACjBC,YAAY;AAEd,OAAOC,OAAO;AAAkB,IAG9BC,KAAK,GAyBHL,QAAQ,CAzBVK,KAAK;EACLC,KAAK,GAwBHN,QAAQ,CAxBVM,KAAK;EACLC,QAAQ,GAuBNP,QAAQ,CAvBVO,QAAQ;EACRC,YAAY,GAsBVR,QAAQ,CAtBVQ,YAAY;EACZC,UAAU,GAqBRT,QAAQ,CArBVS,UAAU;EACVC,SAAS,GAoBPV,QAAQ,CApBVU,SAAS;EACTC,MAAM,GAmBJX,QAAQ,CAnBVW,MAAM;EACNC,GAAG,GAkBDZ,QAAQ,CAlBVY,GAAG;EACHC,GAAG,GAiBDb,QAAQ,CAjBVa,GAAG;EACHC,GAAG,GAgBDd,QAAQ,CAhBVc,GAAG;EACHC,KAAK,GAeHf,QAAQ,CAfVe,KAAK;EACLC,IAAI,GAcFhB,QAAQ,CAdVgB,IAAI;EACJC,IAAI,GAaFjB,QAAQ,CAbViB,IAAI;EACJC,MAAM,GAYJlB,QAAQ,CAZVkB,MAAM;EACNC,EAAE,GAWAnB,QAAQ,CAXVmB,EAAE;EACFC,KAAK,GAUHpB,QAAQ,CAVVoB,KAAK;EACLC,WAAW,GASTrB,QAAQ,CATVqB,WAAW;EACXC,QAAQ,GAQNtB,QAAQ,CARVsB,QAAQ;EACRC,GAAG,GAODvB,QAAQ,CAPVuB,GAAG;EACHC,GAAG,GAMDxB,QAAQ,CANVwB,GAAG;EACHC,QAAQ,GAKNzB,QAAQ,CALVyB,QAAQ;EACRC,GAAG,GAID1B,QAAQ,CAJV0B,GAAG;EACHC,EAAE,GAGA3B,QAAQ,CAHV2B,EAAE;EACFC,GAAG,GAED5B,QAAQ,CAFV4B,GAAG;EACHC,GAAG,GACD7B,QAAQ,CADV6B,GAAG;AAGL,IAAMC,IAAI,GAAG,CAAC;AACd,IAAMC,KAAK,GAAG,CAAC;AACf,IAAMC,IAAI,GAAG,CAAC;AACd,IAAMC,KAAK,GAAG,CAAC,CAAC;AAEhB,IAAMC,cAAc,GAAG,CAAC;AACxB,IAAMC,eAAe,GAAG,CAAC,CAAC;AAE1B,IAAMC,gCAAgC,GAAG,EAAE;AAC3C,IAAMC,sBAAsB,GAAG,CAAC;AAEhC,IAAMC,oBAAoB,GAAG,KAAK;AAElC,IAAMC,aAAa,GAAG;EACpBC,SAAS,EAAE,IAAI;EACfC,OAAO,EAAE,GAAG;EACZC,IAAI,EAAE,CAAC;EACPC,iBAAiB,EAAE,IAAI;EACvBC,yBAAyB,EAAE,IAAI;EAC/BC,kBAAkB,EAAE;AACtB,CAAC;AAED,IAAMC,aAAa,GAAG,IAAI9C,QAAQ,CAACM,KAAK,CAAC,CAAC,CAAC;AAC3C,IAAMyC,YAAY,GAAG,IAAI/C,QAAQ,CAACM,KAAK,CAAC,CAAC,CAAC;AAAC,IA6BtB0C,UAAU;EAAA;EAAA;EAAA;IAAA;IAAA;IAAA;MAAA;IAAA;IAAA;IAAA,MA8ErBC,YAAY,GAAG,UAACC,CAAgB,EAAK;MAAA,kBACjB,MAAKC,KAAK;QAA5BC,IAAI,eAAJA,IAAI;QAAEC,OAAO,eAAPA,OAAO;MAErB,IAAIH,CAAC,CAACI,GAAG,KAAK,QAAQ,EAAE;QACtB,IAAIF,IAAI,EAAE;UACRC,OAAO,EAAE;QACX;MACF;IACF,CAAC;IAAA,MAEOE,oBAAoB,GAAG,YAAM;MACnC,IAAI,MAAKC,iBAAiB,KAAKC,SAAS,EAAE;QACxCC,kBAAkB,CAACC,sBAAsB,CAAC,MAAKH,iBAAiB,CAAC;QACjE,MAAKA,iBAAiB,GAAGC,SAAS;MACpC;IACF,CAAC;IAAA,MAEOG,sBAAsB,GAAG,YAAM;MACrC,IAAI,MAAKJ,iBAAiB,KAAKC,SAAS,EAAE;QACxC,MAAKD,iBAAiB,GAAGE,kBAAkB,CAACG,uBAAuB,EAAE;MACvE;IACF,CAAC;IAAA,MAEOC,cAAc,GAAG,YAAc;MAAA,mBACD,MAAKX,KAAK;QAAtCY,WAAW,gBAAXA,WAAW;QAAEC,UAAU,gBAAVA,UAAU;MAAA,WAE7BC,UAAU,CAACC,OAAO,CAACH,WAAW,CAAC,IAAI,CAAC,CAAC;QAAA,kBAD/BI,KAAK;QAALA,KAAK,2BAAG7B,oBAAoB;MAGpC,IAAI,OAAO6B,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAEpD,IAAMC,UAAU,GAAGC,MAAM,CAACH,KAAK,CAACI,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAElD,IAAID,MAAM,CAACE,QAAQ,CAACH,UAAU,CAAC,EAAE;UAC/B,OAAOL,UAAU,CAACG,KAAK,IAAIE,UAAU,GAAG,GAAG,CAAC;QAC9C;MACF;MAEA,OAAO,OAAOF,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAG,CAAC;IAC9C,CAAC;IAAA,MAEOM,KAAK,GAAG,IAAIpE,KAAK,EAAE;IAAA,MAGnBqE,iBAAiB,GAAG,IAAIpE,KAAK,CACnC,MAAK6C,KAAK,CAACwB,UAAU,KAAK,OAAO,GAAG7C,IAAI,GAAGC,KAAK,CACjD;IAAA,MAEO6C,MAAM,GAAG,IAAItE,KAAK,CAAS,MAAK6C,KAAK,CAACC,IAAI,GAAGtB,IAAI,GAAGC,KAAK,CAAC;IAAA,MAC1D8C,UAAU,GAAG,IAAIvE,KAAK,CAAc2B,KAAK,CAAC;IAAA,MAC1C6C,SAAS,GAAG,IAAIxE,KAAK,CAASyB,KAAK,CAAC;IAAA,MAEpCgD,kBAAkB,GAAG,MAAKjB,cAAc,EAAE;IAAA,MAE1CkB,YAAY,GAAG,IAAI1E,KAAK,CAASH,YAAY,CAAC8E,YAAY,CAAC;IAAA,MAC3DC,MAAM,GAAG,IAAI5E,KAAK,CAAS,CAAC,CAAC;IAAA,MAC7B6E,SAAS,GAAG,IAAI7E,KAAK,CAAS,CAAC,CAAC;IAAA,MAChC8E,QAAQ,GAAG,IAAI9E,KAAK,CAAS,CAAC,CAAC;IAAA,MAC/B+E,OAAO,GAAG,IAAI/E,KAAK,CAAS,CAAC,CAAC;IAAA,MAC9BgF,QAAQ,GAAG,IAAIhF,KAAK,CAC1B,MAAK6C,KAAK,CAACC,IAAI,GACX,MAAK2B,kBAAkB,IACtB,MAAK5B,KAAK,CAACoC,cAAc,KAAK,OAAO,GAClCpD,eAAe,GACfD,cAAc,CAAC,GACnB,CAAC,CACN;IAAA,MAEOsD,cAAc,GAAG,IAAIlF,KAAK,CAAS,MAAK6C,KAAK,CAACa,UAAU,CAACG,KAAK,CAAC;IAAA,MAC/DsB,WAAW,GAAG,IAAInF,KAAK,CAAS,MAAKyE,kBAAkB,CAAC;IAAA,MACxDW,aAAa,GAAG,IAAIpF,KAAK,CAC/B,MAAK6C,KAAK,CAACwB,UAAU,KAAK,WAAW,GAAG,CAAC,GAAG,CAAC,CAC9C;IAAA,MACOY,cAAc,GAAG,IAAIjF,KAAK,CAChC,MAAK6C,KAAK,CAACoC,cAAc,KAAK,OAAO,GAAGpD,eAAe,GAAGD,cAAc,CACzE;IAAA,MA2BOyD,uBAAuB,GAAG1E,IAAI,CACpC,MAAKyD,iBAAiB,EACtBzD,IAAI,CACFE,EAAE,CAAC,MAAKoE,cAAc,EAAErD,cAAc,CAAC,EACvCX,GAAG;IAEDM,GAAG,CAACA,GAAG,CAAC,MAAKqD,MAAM,EAAE,MAAKE,QAAQ,CAAC,EAAE,MAAKK,WAAW,CAAC,EACtD,CAAC,CACF,EACDjE,GAAG,CACDC,QAAQ;IAENI,GAAG,CACDA,GAAG,CAAC,MAAK2D,cAAc,EAAE,MAAKC,WAAW,CAAC,EAC1C5D,GAAG,CAAC,MAAKqD,MAAM,EAAE,MAAKE,QAAQ,CAAC,CAChC,EACDjD,eAAe,CAChB,EACD,CAAC,CACF,CACF,EACD,CAAC,CACF;IAAA,MAEOyD,sBAAsB,GAAG,IAAItF,KAAK,CACxC,MAAK6C,KAAK,CAACyC,sBAAsB,KAAKnC,SAAS,GAC3C,MAAKN,KAAK,CAACyC,sBAAsB,GACjCxD,gCAAgC,CACrC;IAAA,MACOyD,sBAAsB,GAAG,IAAIvF,KAAK,CACxC,MAAK6C,KAAK,CAAC0C,sBAAsB,CAClC;IAAA,MAEOC,gBAAgB,GAAY,MAAK3C,KAAK,CAACC,IAAI;IAAA,MAG3C2C,iBAAiB,GAAY,KAAK;IAAA,MAElCC,qBAAqB,GAAG,IAAI1F,KAAK,CAASyB,KAAK,CAAC;IAAA,MAEhDkE,YAAY,GAAG,UAACrB,MAAsC,EAAK;MACjE,IAAMsB,OAAO,GAAG,IAAI5F,KAAK,CAAC,CAAC,CAAC;MAC5B,IAAM6F,SAAS,GAAG,IAAI7F,KAAK,CAAC,CAAC,CAAC;MAE9B,IAAM8F,KAAK,GAAG;QACZd,QAAQ,EAAE,MAAKA,QAAQ;QACvBe,IAAI,EAAE,IAAI/F,KAAK,CAAC,CAAC,CAAC;QAClBgG,QAAQ,EAAE,IAAIhG,KAAK,CAACyB,KAAK,CAAC;QAC1BwE,QAAQ,EAAE,IAAIjG,KAAK,CAAC,CAAC;MACvB,CAAC;MAED,OAAOS,KAAK,CAAC,CACXE,IAAI,CAACT,YAAY,CAAC,MAAKiE,KAAK,CAAC,EAAEzC,IAAI,EAAE;MAGnCJ,GAAG,CAACsE,OAAO,EAAEzE,QAAQ,CAACmD,MAAM,EAAE,MAAKa,WAAW,EAAE,MAAKF,cAAc,CAAC,CAAC,EACrE3D,GAAG,CAACuE,SAAS,EAAE,CAAC,CAAC,EACjBvE,GAAG,CAACwE,KAAK,CAACC,IAAI,EAAE,CAAC,CAAC,EAClBzE,GAAG,CAACwE,KAAK,CAACE,QAAQ,EAAEvE,KAAK,CAAC,EAC1BH,GAAG,CAACwE,KAAK,CAACG,QAAQ,EAAE,MAAKpB,SAAS,CAAC,EACnCvD,GAAG,CAAC,MAAKgD,MAAM,EAAEA,MAAM,CAAC,EACxBnE,UAAU,CAAC,MAAKgE,KAAK,CAAC,EACtBzD,IAAI,CAAC,EAAE,EAAE,MAAK4C,sBAAsB,CAAC,EACrChC,GAAG,CAAC,MAAKoE,qBAAqB,EAAEjE,KAAK,CAAC,CACvC,CAAC,EACFpB,MAAM,CAAC,MAAK8D,KAAK,EAAE2B,KAAK,kCAAO7D,aAAa;QAAE2D,OAAO,EAAPA;MAAO,GAAG,EACxDjF,IAAI,CAACmF,KAAK,CAACE,QAAQ,EAAE;MAEnB1E,GAAG,CAAC,MAAKsD,MAAM,EAAE,CAAC,CAAC,EACnBtD,GAAG,CAAC,MAAKwD,QAAQ,EAAE,CAAC,CAAC,EACrBxD,GAAG,CAAC,MAAKuD,SAAS,EAAE,CAAC,CAAC,EACtBvD,GAAG,CAAC,MAAKyD,OAAO,EAAE,CAAC,CAAC;MAEpB3E,SAAS,CAAC,MAAK+D,KAAK,CAAC,EACrBzD,IAAI,CAAC,CAAC,MAAK4D,MAAM,CAAC,EAAE,iBAAgC;QAAA;UAA9B4B,KAAK;QACzB,IAAMpD,IAAI,GAAGqD,OAAO,CAACD,KAAK,CAAC;QAC3B,MAAKjD,oBAAoB,EAAE;QAE3B,IAAIH,IAAI,KAAK,MAAKD,KAAK,CAACC,IAAI,EAAE;UAG5B,MAAKsD,YAAY,CAAC,MAAKvD,KAAK,CAACC,IAAI,CAAC;QACpC;MACF,CAAC,CAAC,CACH,CAAC,CACH,CAAC;IACJ,CAAC;IAAA,MAEOuD,KAAK,GAAG5F,KAAK,CAAC,CACpBR,QAAQ,CACN,MAAKqE,MAAM,EACX5D,IAAI,CAAC,CAAC,MAAK4D,MAAM,CAAC,EAAE,iBAAgC;MAAA;QAA9B4B,KAAK;MACzB,IAAMpD,IAAI,GAAGqD,OAAO,CAACD,KAAK,CAAC;MAE3B,MAAKV,gBAAgB,GAAG1C,IAAI;;MAG5B,IAAIA,IAAI,KAAK,MAAKD,KAAK,CAACC,IAAI,EAAE;QAE5B,IAAIA,IAAI,EAAE;UACR,MAAKD,KAAK,CAACyD,MAAM,EAAE;QACrB,CAAC,MAAM;UACL,MAAKzD,KAAK,CAACE,OAAO,EAAE;QACtB;QAEA,MAAKwD,gBAAgB,GAAGzD,IAAI;;QAK5B,MAAK0D,WAAW,EAAE;MACpB;IACF,CAAC,CAAC,CACH,EACDvG,QAAQ,CACN,MAAKsE,UAAU,EACf5D,IAAI,CAACS,GAAG,CAAC,MAAKmD,UAAU,EAAE5C,KAAK,CAAC,EAAE;IAEhChB,IAAI,CAACT,YAAY,CAAC,MAAKiE,KAAK,CAAC,EAAE/D,SAAS,CAAC,MAAK+D,KAAK,CAAC,CAAC;IAErD7C,GAAG,CAAC,MAAKgD,MAAM,EAAE,MAAKC,UAAU,CAAC,EACjCjD,GAAG,CAAC,MAAKwD,QAAQ,EAAE,CAAC,CAAC,EACrBxD,GAAG,CAAC,MAAKiD,UAAU,EAAE5C,KAAK,CAAC,CAC5B,CAAC,CACH;IAED1B,QAAQ,CACN,MAAKuE,SAAS;IAId9D,IAAI,CAAC,CAAC,MAAK8D,SAAS,CAAC,EAAE,iBAAgC;MAAA;QAA9B0B,KAAK;MAAA,IACpBO,mBAAmB,GAAK,MAAK5D,KAAK,CAAlC4D,mBAAmB;MAE3B,IAAIP,KAAK,KAAK1E,IAAI,EAAE;QAClB,IAAIiF,mBAAmB,KAAK,SAAS,EAAE;UACrCC,QAAQ,CAACC,OAAO,EAAE;QACpB;QAEA,MAAKC,eAAe,CAAC,IAAI,CAAC;MAC5B,CAAC,MAAM;QACL,MAAKA,eAAe,CAAC,MAAKpB,gBAAgB,CAAC;MAC7C;IACF,CAAC,CAAC,CACH,EACDvF,QAAQ,CACN,MAAKyE,YAAY,EACjB/D,IAAI,CACFE,EAAE,CAAC,MAAK6D,YAAY,EAAE7E,YAAY,CAACgH,MAAM,CAAC,EAC1CnG,IAAI,CAAC,EAAE,EAAE,MAAK4C,sBAAsB,CAAC,CACtC,CACF,EACD3C,IAAI,CACFE,EAAE,CAAC,MAAK6D,YAAY,EAAE7E,YAAY,CAACgH,MAAM,CAAC,EAC1C,CACElG,IAAI,CAAC,MAAK6D,SAAS,EAAE9C,IAAI,EAAE;IAEzBJ,GAAG,CAAC,MAAKkD,SAAS,EAAEhD,IAAI,CAAC;IAEzBF,GAAG,CAAC,MAAKyD,OAAO,EAAE,MAAKC,QAAQ,CAAC,CACjC,CAAC;IAEF1D,GAAG,CACD,MAAK0D,QAAQ,EACbzE,GAAG,CAAC,MAAKwE,OAAO,EAAE,MAAKD,QAAQ,EAAE,MAAKO,uBAAuB,CAAC,CAC/D;IAEDjF,SAAS,CAAC,MAAK+D,KAAK,CAAC,CACtB,EACD,CACE7C,GAAG,CAAC,MAAKkD,SAAS,EAAE/C,KAAK,CAAC,EAC1BH,GAAG,CAAC,MAAKsD,MAAM,EAAE,CAAC,CAAC,EACnB,MAAKe,YAAY,CACfhF,IAAI,CACF,MAAK+E,qBAAqB,EAC1B,MAAKpB,MAAM,EACX3D,IAAI,CACFU,EAAE,CACAb,GAAG,CACDO,WAAW,CAACT,GAAG,CAAC,MAAKwE,QAAQ,CAAC,EAAE/C,sBAAsB,CAAC,EACvDhB,WAAW,CAACT,GAAG,CAAC,MAAKuE,SAAS,CAAC,EAAE,MAAKU,sBAAsB,CAAC,CAC9D,EACDxE,WAAW,CAACT,GAAG,CAAC,MAAKwE,QAAQ,CAAC,EAAE,MAAKQ,sBAAsB,CAAC,CAC7D,EACD3E,IAAI,CACFE,EAAE,CAAC,MAAKoE,cAAc,EAAErD,cAAc,CAAC;IAEvCb,WAAW,CACTJ,IAAI,CAACE,EAAE,CAAC,MAAKgE,SAAS,EAAE,CAAC,CAAC,EAAE,MAAKC,QAAQ,EAAE,MAAKD,SAAS,CAAC,EAC1D,CAAC,CACF;IAED7D,QAAQ,CACNL,IAAI,CAACE,EAAE,CAAC,MAAKgE,SAAS,EAAE,CAAC,CAAC,EAAE,MAAKC,QAAQ,EAAE,MAAKD,SAAS,CAAC,EAC1D,CAAC,CACF,CACF,EACD,MAAKP,MAAM,CACZ,CACF,CACF,CACF,CACF,EACD,MAAKU,QAAQ,CACd,CAAC;IAAA,MAEM8B,UAAU,GAAGnG,IAAI,CACvBE,EAAE,CAAC,MAAKoE,cAAc,EAAEpD,eAAe,CAAC,EACxCX,GAAG,CAACD,GAAG,CAACE,QAAQ,CAAC,MAAKgE,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,MAAKkB,KAAK,CAAC,EAAE,CAAC,CAAC,EACvDpF,GAAG,CAACC,GAAG,CAAC,MAAKiE,WAAW,EAAE,MAAKkB,KAAK,CAAC,EAAE,CAAC,CAAC,CAC1C;IAAA,MAEOU,QAAQ,GAAGpG,IAAI;IAErBE,EAAE,CAAC,MAAKsE,WAAW,EAAE,CAAC,CAAC,EACvB,CAAC,EACD7E,GAAG,CAACM,MAAM,CAAC,MAAKkG,UAAU,EAAE,MAAK3B,WAAW,CAAC,CAAC,CAC/C;IAAA,MAEO6B,kBAAkB,GAAGlG,KAAK,CAAC,CACjC;MACEmG,WAAW,EAAE;QACXC,CAAC,EAAE,MAAKtC,MAAM;QACduC,YAAY,EAAE,MAAKrC,QAAQ;QAC3BD,SAAS,EAAE,MAAKA;MAClB;IACF,CAAC,CACF,CAAC;IAAA,MAEMuC,wBAAwB,GAAGtG,KAAK,CAAC,CACvC;MACEmG,WAAW,EAAE;QACXnB,KAAK,EAAE,eAACuB,CAAyB;UAAA,OAAK/F,GAAG,CAAC,MAAKoD,YAAY,EAAE2C,CAAC,CAAC;QAAA;MACjE;IACF,CAAC,CACF,CAAC;IAAA,MAEMC,oBAAoB,GAAGxG,KAAK,CAAC,CACnC;MACEmG,WAAW,EAAE;QACXM,QAAQ,EAAE,kBAACF,CAAyB;UAAA,OAClC1G,IAAI,CACFE,EAAE,CAACwG,CAAC,EAAExH,YAAY,CAACgH,MAAM,CAAC,EAC1BvF,GAAG,CAAC,MAAKoE,qBAAqB,EAAElE,IAAI,CAAC,CACtC;QAAA;MACL;IACF,CAAC,CACF,CAAC;IAAA,MAEMgG,qBAAqB,GAAG,UAAC5E,CAAoB;MAAA,OACnD,MAAKsC,cAAc,CAACuC,QAAQ,CAAC7E,CAAC,CAACqE,WAAW,CAACS,MAAM,CAAC7D,KAAK,CAAC;IAAA;IAAA,MAElD8D,kBAAkB,GAAG,UAAC/E,CAAoB,EAAK;MACrD,MAAKuC,WAAW,CAACsC,QAAQ,CAAC7E,CAAC,CAACqE,WAAW,CAACS,MAAM,CAAC7D,KAAK,CAAC;MACrD,MAAKuC,YAAY,CAAC,MAAKvD,KAAK,CAACC,IAAI,CAAC;;MAKlC8E,qBAAqB,CAAC;QAAA,OACpBA,qBAAqB,CAAC;UAAA,OAAM,MAAKxC,aAAa,CAACqC,QAAQ,CAAC,CAAC,CAAC;QAAA,EAAC;MAAA,EAC5D;IACH,CAAC;IAAA,MAEOrB,YAAY,GAAG,UAACtD,IAAa,EAAK;MACxC,IAAI,MAAK0C,gBAAgB,KAAK1C,IAAI,EAAE;QAClC,MAAKyB,UAAU,CAACkD,QAAQ,CAAC3E,IAAI,GAAGtB,IAAI,GAAGC,KAAK,CAAC;;QAI7C,MAAK+D,gBAAgB,GAAG1C,IAAI;MAC9B;IACF,CAAC;IAAA,MAEO8D,eAAe,GAAG,UAACiB,MAAe,EAAK;MAAA,mBACC,MAAKhF,KAAK;QAAhDiF,aAAa,gBAAbA,aAAa;QAAEC,kBAAkB,gBAAlBA,kBAAkB;MAEzC,IAAID,aAAa,IAAI,MAAKrC,iBAAiB,KAAKoC,MAAM,EAAE;QACtD,MAAKpC,iBAAiB,GAAGoC,MAAM;QAC/BG,SAAS,CAACC,SAAS,CAACJ,MAAM,EAAEE,kBAAkB,CAAC;MACjD;IACF,CAAC;IAAA;EAAA;EAAA;IAAA;IAAA,oCA5bmB;MAClB,IAAIG,QAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;QAAA;QACzB,aAAAC,QAAQ,uCAAR,UAAUC,IAAI,qBAAd,eAAgBC,gBAAgB,oBAAhC,eAAgBA,gBAAgB,CAAG,OAAO,EAAE,IAAI,CAAC3F,YAAY,CAAC;MAChE;IACF;EAAC;IAAA;IAAA,mCAEkB4F,SAAgB,EAAE;MAAA,mBAQ/B,IAAI,CAAC1F,KAAK;QANZC,IAAI,gBAAJA,IAAI;QACJmC,cAAc,gBAAdA,cAAc;QACdZ,UAAU,gBAAVA,UAAU;QACViB,sBAAsB,gBAAtBA,sBAAsB;QACtBC,sBAAsB,gBAAtBA,sBAAsB;QACtBuC,aAAa,gBAAbA,aAAa;MAGf;MAEE,OAAO,IAAI,CAACvB,gBAAgB,KAAK,SAAS,IAC1CzD,IAAI,KAAK,IAAI,CAACyD,gBAAgB,EAC9B;QACA,IAAI,CAACH,YAAY,CAACtD,IAAI,CAAC;MACzB;MAEA,IAAI,CAACyD,gBAAgB,GAAGpD,SAAS;MAEjC,IAAIL,IAAI,KAAKyF,SAAS,CAACzF,IAAI,IAAIgF,aAAa,EAAE;QAC5C,IAAI,CAAClB,eAAe,CAAC9D,IAAI,CAAC;MAC5B;MAEA,IAAIyF,SAAS,CAACtD,cAAc,KAAKA,cAAc,EAAE;QAC/C,IAAI,CAACA,cAAc,CAACwC,QAAQ,CAC1BxC,cAAc,KAAK,OAAO,GAAGpD,eAAe,GAAGD,cAAc,CAC9D;MACH;MAEA,IAAI2G,SAAS,CAAClE,UAAU,KAAKA,UAAU,EAAE;QACvC,IAAI,CAACD,iBAAiB,CAACqD,QAAQ,CAACpD,UAAU,KAAK,OAAO,GAAG7C,IAAI,GAAGC,KAAK,CAAC;MACxE;MAEA,IAAI8G,SAAS,CAACjD,sBAAsB,KAAKA,sBAAsB,EAAE;QAC/D,IAAI,CAACA,sBAAsB,CAACmC,QAAQ,CAClCnC,sBAAsB,KAAKnC,SAAS,GAChCmC,sBAAsB,GACtBxD,gCAAgC,CACrC;MACH;MAEA,IAAIyG,SAAS,CAAChD,sBAAsB,KAAKA,sBAAsB,EAAE;QAC/D,IAAI,CAACA,sBAAsB,CAACkC,QAAQ,CAAClC,sBAAsB,CAAC;MAC9D;IACF;EAAC;IAAA;IAAA,uCAEsB;MACrB,IAAI,CAACqB,eAAe,CAAC,KAAK,CAAC;MAC3B,IAAI,CAAC3D,oBAAoB,EAAE;MAE3B,IAAIiF,QAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;QAAA;QACzB,cAAAC,QAAQ,wCAAR,WAAUC,IAAI,qBAAd,gBAAgBG,mBAAmB,oBAAnC,gBAAgBA,mBAAmB,CAAG,OAAO,EAAE,IAAI,CAAC7F,YAAY,CAAC;MACnE;IACF;EAAC;IAAA;IAAA,yBAkYQ;MAAA;MAAA,mBAcH,IAAI,CAACE,KAAK;QAZZC,IAAI,gBAAJA,IAAI;QACJ2F,cAAc,gBAAdA,cAAc;QACdC,YAAY,gBAAZA,YAAY;QACZzD,cAAc,gBAAdA,cAAc;QACdZ,UAAU,gBAAVA,UAAU;QACVsE,cAAc,gBAAdA,cAAc;QACdC,mBAAmB,gBAAnBA,mBAAmB;QACnBnF,WAAW,gBAAXA,WAAW;QACXoF,YAAY,gBAAZA,YAAY;QACZC,mBAAmB,gBAAnBA,mBAAmB;QACnBC,kBAAkB,gBAAlBA,kBAAkB;QAClBC,mBAAmB,gBAAnBA,mBAAmB;MAGrB,IAAM1E,MAAM,GAAGD,UAAU,KAAK,WAAW,GAAG,IAAI,GAAGvB,IAAI;MACvD,IAAMmG,OAAO,GAAGhE,cAAc,KAAK,OAAO;MAE1C,IAAMiE,iBAAiB,GACrB7E,UAAU,KAAK,OAAO,IAAIA,UAAU,KAAK,WAAW,GAChD7B,aAAa,GACb,IAAI,CAACsE,UAAU;MAErB,IAAMqC,gBAAgB,GACpB9E,UAAU,KAAK,WAAW,GACtB7B,aAAa,GACb6B,UAAU,KAAK,MAAM,GACrB+E,WAAW,CAACC,KAAK,GACflI,QAAQ,CACNI,GAAG,CAAC,IAAI,CAAC2D,cAAc,EAAE,IAAI,CAACC,WAAW,CAAC,EAC1C8D,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,CACjB,GACDzG,aAAa,GACf,IAAI,CAACsE,UAAU;MAErB,IAAMwC,MAAM,GACVjF,UAAU,KAAK,MAAM,GACjB,CAAC,GACD+E,WAAW,CAACC,KAAK,GACjB,MAAM,GACNlI,QAAQ,CAAC,IAAI,CAACgE,WAAW,EAAE,CAAC,CAAC,CAAC;;MAIpC,IAAMoE,OAAO,GAAGN,OAAO;MAGnB;QAAEO,KAAK,EAAE,CAAC;QAAE3F,KAAK,EAAES,MAAM,GAAGnB,SAAS,GAAGwF;MAAe,CAAC,GACxD;QAAEc,IAAI,EAAE,CAAC;QAAE5F,KAAK,EAAES,MAAM,GAAGnB,SAAS,GAAGwF;MAAe,CAAC;MAE3D,IAAM5B,QAAQ,GAAG1C,UAAU,KAAK,WAAW,GAAG5B,YAAY,GAAG,IAAI,CAACsE,QAAQ;MAE1E,OACE,oBAAC,iBAAiB;QAChB,aAAa,EAAE,CAAC,CAAChF,sBAAsB,EAAEA,sBAAsB,CAAE;QACjE,WAAW,EAAE,CAAC,CAACA,sBAAsB,EAAEA,sBAAsB,CAAE;QAC/D,cAAc,EAAE,IAAI,CAACiF,kBAAmB;QACxC,oBAAoB,EAAE,IAAI,CAACI,wBAAyB;QACpD,OAAO,EAAEmC,OAAQ;QACjB,OAAO,EAAElF,UAAU,KAAK,WAAW,IAAIoE,cAAc,IAAIC;MAAa,GAClEM,mBAAmB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,IAEvB,oBAAC,QAAQ,CAAC,IAAI;QACZ,QAAQ,EAAE,IAAI,CAACxB,qBAAsB;QACrC,KAAK,EAAE,CACLkC,MAAM,CAACC,IAAI,EACX;UACEC,aAAa,EACXvF,UAAU,KAAK,WAAW,IAAI,CAAC4E,OAAO,GAAG,aAAa,GAAG;QAC7D,CAAC,CACD;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAEF,oBAAC,QAAQ,CAAC,IAAI;QACZ,KAAK,EAAE,CACLS,MAAM,CAACG,OAAO,EACd;UAAEC,SAAS,EAAE,CAAC;YAAEhD,UAAU,EAAEoC;UAAkB,CAAC;QAAE,CAAC,EAClDN,mBAAmB,CACnB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAEF,oBAAC,IAAI;QACH,2BAA2B,EAAEtE,MAAM,IAAID,UAAU,KAAK,WAAY;QAClE,yBAAyB,EACvBC,MAAM,IAAID,UAAU,KAAK,WAAW,GAChC,qBAAqB,GACrB,MACL;QACD,KAAK,EAAEqF,MAAM,CAACG,OAAQ;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAErBd,kBAAkB,CAAC;QAAEhC,QAAQ,EAARA;MAAS,CAAC,CAAC,CAC5B;MAGL1C,UAAU,KAAK,WAAW,GAAG,IAAI,GAAG6D,QAAQ,CAACC,EAAE,KAAK,KAAK,IACvDD,QAAQ,CAACC,EAAE,KAAK,SAAS,IACzBD,QAAQ,CAACC,EAAE,KAAK,OAAO,GACvB,oBAAC,wBAAwB;QACvB,OAAO,EACLM,cAAc,GAAG;UAAA,OAAM,MAAI,CAACrC,YAAY,CAAC,KAAK,CAAC;QAAA,IAAGjD,SACnD;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAED,oBAAC,OAAO;QAAC,QAAQ,EAAE4D,QAAS;QAAC,KAAK,EAAE8B,YAAoB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAAG,CAClC,GAE3B,oBAAC,iBAAiB;QAChB,OAAO,EAAEJ,cAAe;QACxB,oBAAoB,EAAE,IAAI,CAACnB,oBAAqB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAEhD,oBAAC,OAAO;QAAC,QAAQ,EAAEP,QAAS;QAAC,KAAK,EAAE8B,YAAoB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAAG,CAE9D,CAEW,EAChB,oBAAC,QAAQ,CAAC,IAAI;QAGZ,IAAI,EAAE,IAAI,CAAC3D,cAAe;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAC1B,EACDb,UAAU,KAAK,WAAW,GAAG,IAAI,GAChC,oBAAC,QAAQ,CAAC,IAAI;QACZ,IAAI,EAAE5D,KAAK,CAAC,CACVR,QAAQ,CAAC,IAAI,CAACyF,qBAAqB,EAAE,CACnC/E,IAAI,CAACE,EAAE,CAAC,IAAI,CAAC6E,qBAAqB,EAAElE,IAAI,CAAC,EAAE,CACzCF,GAAG,CAAC,IAAI,CAACiD,UAAU,EAAE9C,KAAK,CAAC,EAC3Bf,IAAI,CAAC,EAAE,EAAE;UAAA,OAAO,MAAI,CAAC8E,gBAAgB,GAAG,KAAK;QAAA,CAAC,CAAC,CAChD,CAAC,CACH,CAAC,CACH,CAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAEN,EACD,oBAAC,QAAQ,CAAC,IAAI;QACZ,wBAAwB,EAAElB,MAAM,IAAID,UAAU,KAAK,WAAY;QAC/D,qBAAqB,EAAE6D,QAAQ,CAACC,EAAE,KAAK,KAAM;QAC7C,QAAQ,EAAE,IAAI,CAACR,kBAAmB;QAClC,KAAK,EAAE,CACL+B,MAAM,CAACK,SAAS,EAChB;UACED,SAAS,EAAE,CAAC;YAAEhD,UAAU,EAAEqC;UAAiB,CAAC,CAAC;UAC7Ca,OAAO,EAAE,IAAI,CAAC5E;QAChB,CAAC,EACDf,UAAU,KAAK,WAAW;QAEtB4E,OAAO,GACL;UAAEO,KAAK,EAAE;QAAE,CAAC,GACZ;UAAEC,IAAI,EAAE;QAAE,CAAC,GACb,CACEC,MAAM,CAACO,YAAY,EACnBhB,OAAO,GAAG;UAAEO,KAAK,EAAEF;QAAO,CAAC,GAAG;UAAEG,IAAI,EAAEH;QAAO,CAAC,EAC9C;UAAEY,MAAM,EAAE7F,UAAU,KAAK,MAAM,GAAG,CAAC,CAAC,GAAG;QAAE,CAAC,CAC3C,EACLZ,WAAW,CACX;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAEDqF,mBAAmB,CAAC;QAAE/B,QAAQ,EAARA;MAAS,CAAC,CAAC,CACpB,CACF,CACE;IAExB;EAAC;EAAA;AAAA,EA5mBqCtH,KAAK,CAAC0K,SAAS;AAAlCzH,UAAU,CACtB0H,YAAY,GAAG;EACpBnF,cAAc,EAAEmE,WAAW,CAACC,KAAK,GAAG,MAAM,GAAG,OAAO;EACpDhF,UAAU,EAAE,OAAO;EACnBoE,cAAc,EAAE,IAAI;EACpBC,YAAY,EACVR,QAAQ,CAACC,EAAE,KAAK,KAAK,IACrBD,QAAQ,CAACC,EAAE,KAAK,SAAS,IACzBD,QAAQ,CAACC,EAAE,KAAK,OAAO;EACzBQ,cAAc,EAAE,EAAE;EAClBpD,sBAAsB,EAAE,GAAG;EAC3BkB,mBAAmB,EAAE,SAAS;EAC9BqB,aAAa,EAAE,KAAK;EACpBC,kBAAkB,EAAE;AACtB,CAAC;AAAA,SAdkBrF,UAAU;AA+mB/B,IAAMgH,MAAM,GAAG/F,UAAU,CAAC0G,MAAM,CAAC;EAC/BN,SAAS,EAAE;IACTO,eAAe,EAAE,OAAO;IACxBC,QAAQ,EAAE;EACZ,CAAC;EACDN,YAAY,EAAE;IACZjF,QAAQ,EAAE,UAAU;IACpBwF,GAAG,EAAE,CAAC;IACNC,MAAM,EAAE,CAAC;IACT5G,KAAK,EAAE7B;EACT,CAAC;EACD6H,OAAO,EAAE;IACPa,IAAI,EAAE;EACR,CAAC;EACDf,IAAI;IACFe,IAAI,EAAE;EAAC,GACJxC,QAAQ,CAACyC,MAAM,CAAC;IAGjBC,GAAG,EAAE,IAAI;IACTC,OAAO,EAAE;MAAEC,QAAQ,EAAE;IAAS;EAChC,CAAC,CAAC;AAEN,CAAC,CAAC"},"metadata":{},"sourceType":"module"}