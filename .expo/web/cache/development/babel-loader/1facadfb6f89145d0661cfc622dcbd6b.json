{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar MaterialCommunityIcons;\ntry {\n  MaterialCommunityIcons = require(\"@expo/vector-icons/MaterialCommunityIcons\").default;\n} catch (e) {\n  if (\n  global.__expo &&\n  global.__expo.Icon &&\n  global.__expo.Icon.MaterialCommunityIcons) {\n    MaterialCommunityIcons = global.__expo.Icon.MaterialCommunityIcons;\n  } else {\n    var isErrorLogged = false;\n\n    MaterialCommunityIcons = function MaterialCommunityIcons(_ref) {\n      var name = _ref.name,\n        color = _ref.color,\n        size = _ref.size,\n        rest = _objectWithoutProperties(_ref, [\"name\", \"color\", \"size\"]);\n      if (!isErrorLogged) {\n        if (!/(Cannot find module|Module not found|Cannot resolve module)/.test(e.message)) {\n          console.error(e);\n        }\n        console.warn(\"Tried to use the icon '\".concat(name, \"' in a component from 'react-native-paper', but 'react-native-vector-icons' could not be loaded.\"), \"To remove this warning, try installing 'react-native-vector-icons' or use another method to specify icon: https://callstack.github.io/react-native-paper/icons.html.\");\n        isErrorLogged = true;\n      }\n      return React.createElement(Text, _extends({}, rest, {\n        style: [styles.icon, {\n          color: color,\n          fontSize: size\n        }],\n\n        pointerEvents: \"none\"\n      }), \"\\u25A1\");\n    };\n  }\n}\nexport var accessibilityProps = Platform.OS === 'web' ? {\n  role: 'img',\n  focusable: false\n} : {\n  accessibilityElementsHidden: true,\n  importantForAccessibility: 'no-hide-descendants'\n};\nvar defaultIcon = function defaultIcon(_ref2) {\n  var name = _ref2.name,\n    color = _ref2.color,\n    size = _ref2.size,\n    direction = _ref2.direction,\n    allowFontScaling = _ref2.allowFontScaling;\n  return React.createElement(MaterialCommunityIcons, _extends({\n    allowFontScaling: allowFontScaling,\n    name: name,\n    color: color,\n    size: size,\n    style: [{\n      transform: [{\n        scaleX: direction === 'rtl' ? -1 : 1\n      }],\n      lineHeight: size\n    }, styles.icon],\n    pointerEvents: \"none\"\n  }, accessibilityProps));\n};\nvar styles = StyleSheet.create({\n  icon: {\n    backgroundColor: 'transparent'\n  }\n});\nexport default defaultIcon;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA;AAAA;AAAA;AAWA,IAAIC,sBAAJ;AAEA,IAAI;EAEFA,sBAAsB,GAAGC,OAAO,6CAAP,CACtBC,OADH;AAED,CAJD,CAIE,OAAOC,CAAP,EAAU;EACV;EAEEC,MAAM,CAACC,MAAP;EAEAD,MAAM,CAACC,MAAP,CAAcC,IAFd;EAIAF,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBN,sBANrB,EAOE;IAIAA,sBAAsB,GAAGI,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBN,sBAA5C;EACD,CAZD,MAYO;IACL,IAAIO,aAAa,GAAG,KAApB;;IAIAP,sBAAsB,GAAG,sCAAoC;MAAA,IAAjCQ,IAAF,GAAmCC,KAAjCD,IAAF;QAAQE,KAAR,GAAmCD,KAA3BC,KAAR;QAAeC,OAAoBF,KAApBE;QAASC,IAAW;MAE3D,IAAI,CAACL,aAAL,EAAoB;QAClB,IACE,CAAC,8DAA8DM,IAA9D,CACCV,CAAC,CAACW,OADH,CADH,EAIE;UACAC,OAAO,CAACC,KAAR,CAAcb,CAAd;QACD;QAEDY,OAAO,CAACE,IAAR,kCAC4BT,IAD5B;QAKAD,aAAa,GAAG,IAAhB;MACD;MAED,OACER,oBAACmB,IAAD,eACMN,IADN;QAEEO,KAAK,EAAE,CAACC,MAAM,CAACC,IAAR,EAAc;UAAEX,KAAF,EAAEA,KAAF;UAASY,QAAQ,EAAEX;QAAnB,CAAd,CAFT;;QAIEY,aAAa,EAAC;MAJhB,aADF;IAUD,CA7BD;EA8BD;AACF;AAED,OAAO,IAAMC,kBAAkB,GAC7BC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GACI;EACEC,IAAI,EAAE,KADR;EAEEC,SAAS,EAAE;AAFb,CADJ,GAKI;EACEC,2BAA2B,EAAE,IAD/B;EAEEC,yBAAyB,EAAE;AAF7B,CANC;AAWP,IAAMC,WAAW,GAAG,SAAdA,WAAW;EAAA,IACfvB,IADmB,SACnBA,IADmB;IAEnBE,KAFmB,SAEnBA,KAFmB;IAGnBC,IAHmB,SAGnBA,IAHmB;IAInBqB,SAJmB,SAInBA,SAJmB;IAKnBC;EAAAA,OAEAlC,oBAACC,sBAAD;IACEiC,gBAAgB,EAAEA,gBADpB;IAEEzB,IAAI,EAAEA,IAFR;IAGEE,KAAK,EAAEA,KAHT;IAIEC,IAAI,EAAEA,IAJR;IAKEQ,KAAK,EAAE,CACL;MACEe,SAAS,EAAE,CAAC;QAAEC,MAAM,EAAEH,SAAS,KAAK,KAAd,GAAsB,CAAC,CAAvB,GAA2B;MAArC,CAAD,CADb;MAEEI,UAAU,EAAEzB;IAFd,CADK,EAKLS,MAAM,CAACC,IALF,CALT;IAYEE,aAAa,EAAC;EAZhB,GAaMC,kBAbN,EAPF;AAAA;AAwBA,IAAMJ,MAAM,GAAGiB,UAAU,CAACC,MAAX,CAAkB;EAC/BjB,IAAI,EAAE;IACJkB,eAAe,EAAE;EADb;AADyB,CAAlB,CAAf;AAMA,eAAeR,WAAf","names":["React","MaterialCommunityIcons","require","default","e","global","__expo","Icon","isErrorLogged","name","_ref","color","size","rest","test","message","console","error","warn","Text","style","styles","icon","fontSize","pointerEvents","accessibilityProps","Platform","OS","role","focusable","accessibilityElementsHidden","importantForAccessibility","defaultIcon","direction","allowFontScaling","transform","scaleX","lineHeight","StyleSheet","create","backgroundColor"],"sources":["MaterialCommunityIcon.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Text, Platform } from 'react-native';\n\nexport type IconProps = {\n  name: string;\n  color: string;\n  size: number;\n  direction: 'rtl' | 'ltr';\n  allowFontScaling?: boolean;\n};\n\nlet MaterialCommunityIcons: any;\n\ntry {\n  // Optionally require vector-icons\n  MaterialCommunityIcons = require('react-native-vector-icons/MaterialCommunityIcons')\n    .default;\n} catch (e) {\n  if (\n    // @ts-ignore\n    global.__expo &&\n    // @ts-ignore\n    global.__expo.Icon &&\n    // @ts-ignore\n    global.__expo.Icon.MaterialCommunityIcons\n  ) {\n    // Snack doesn't properly bundle vector icons from subpath\n    // Use icons from the __expo global if available\n    // @ts-ignore\n    MaterialCommunityIcons = global.__expo.Icon.MaterialCommunityIcons;\n  } else {\n    let isErrorLogged = false;\n\n    // Fallback component for icons\n    // @ts-ignore\n    MaterialCommunityIcons = ({ name, color, size, ...rest }) => {\n      /* eslint-disable no-console */\n      if (!isErrorLogged) {\n        if (\n          !/(Cannot find module|Module not found|Cannot resolve module)/.test(\n            e.message\n          )\n        ) {\n          console.error(e);\n        }\n\n        console.warn(\n          `Tried to use the icon '${name}' in a component from 'react-native-paper', but 'react-native-vector-icons' could not be loaded.`,\n          `To remove this warning, try installing 'react-native-vector-icons' or use another method to specify icon: https://callstack.github.io/react-native-paper/icons.html.`\n        );\n\n        isErrorLogged = true;\n      }\n\n      return (\n        <Text\n          {...rest}\n          style={[styles.icon, { color, fontSize: size }]}\n          // @ts-ignore\n          pointerEvents=\"none\"\n        >\n          â–¡\n        </Text>\n      );\n    };\n  }\n}\n\nexport const accessibilityProps =\n  Platform.OS === 'web'\n    ? {\n        role: 'img',\n        focusable: false,\n      }\n    : {\n        accessibilityElementsHidden: true,\n        importantForAccessibility: 'no-hide-descendants' as 'no-hide-descendants',\n      };\n\nconst defaultIcon = ({\n  name,\n  color,\n  size,\n  direction,\n  allowFontScaling,\n}: IconProps) => (\n  <MaterialCommunityIcons\n    allowFontScaling={allowFontScaling}\n    name={name}\n    color={color}\n    size={size}\n    style={[\n      {\n        transform: [{ scaleX: direction === 'rtl' ? -1 : 1 }],\n        lineHeight: size,\n      },\n      styles.icon,\n    ]}\n    pointerEvents=\"none\"\n    {...accessibilityProps}\n  />\n);\n\nconst styles = StyleSheet.create({\n  icon: {\n    backgroundColor: 'transparent',\n  },\n});\n\nexport default defaultIcon;\n"]},"metadata":{},"sourceType":"module"}