{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport IconButton from \"../../IconButton\";\nexport var ICON_SIZE = 24;\nvar ICON_OFFSET = 12;\nvar StyleContext = React.createContext({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: function forceFocus() {}\n});\nvar IconAdornment = function IconAdornment(_ref2) {\n  var icon = _ref2.icon,\n    topPosition = _ref2.topPosition,\n    side = _ref2.side,\n    isTextInputFocused = _ref2.isTextInputFocused,\n    forceFocus = _ref2.forceFocus;\n  var style = _defineProperty({\n    top: topPosition\n  }, side, ICON_OFFSET);\n  var contextState = {\n    style: style,\n    isTextInputFocused: isTextInputFocused,\n    forceFocus: forceFocus\n  };\n  return React.createElement(StyleContext.Provider, {\n    value: contextState\n  }, icon);\n};\nvar TextInputIcon = function TextInputIcon(_ref) {\n  var name = _ref.name,\n    onPress = _ref.onPress,\n    forceTextInputFocus = _ref.forceTextInputFocus,\n    rest = _objectWithoutProperties(_ref, [\"name\", \"onPress\", \"forceTextInputFocus\"]);\n  var _React$useContext = React.useContext(StyleContext),\n    style = _React$useContext.style,\n    isTextInputFocused = _React$useContext.isTextInputFocused,\n    forceFocus = _React$useContext.forceFocus;\n  var onPressWithFocusControl = React.useCallback(function () {\n    if (forceTextInputFocus && !isTextInputFocused) {\n      forceFocus();\n    }\n    onPress === null || onPress === void 0 ? void 0 : onPress();\n  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\n  return React.createElement(View, {\n    style: [styles.container, style]\n  }, React.createElement(IconButton, _extends({\n    icon: name,\n    style: styles.iconButton,\n    size: ICON_SIZE,\n    onPress: onPressWithFocusControl\n  }, rest)));\n};\nTextInputIcon.displayName = 'TextInput.Icon';\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true\n};\nvar styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  iconButton: {\n    margin: 0\n  }\n});\nexport default TextInputIcon;\n\nexport { IconAdornment };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAAA;AAAA;AAGA,OAAOC,UAAP;AAeA,OAAO,IAAMC,SAAS,GAAG,EAAlB;AACP,IAAMC,WAAW,GAAG,EAApB;AAQA,IAAMC,YAAY,GAAGJ,KAAK,CAACK,aAAN,CAAsC;EACzDC,KAAK,EAAE,EADkD;EAEzDC,kBAAkB,EAAE,KAFqC;EAGzDC,UAAU,EAAE,sBAAM,CAAE;AAHqC,CAAtC,CAArB;AAMA,IAAMC,aAOL,GAAG,SAPEA,aAOL,QAAoE;EAAA,IAA9DC,IAAF,SAAEA,IAAF;IAAQC,WAAR,SAAQA,WAAR;IAAqBC,IAArB,SAAqBA,IAArB;IAA2BL,kBAA3B,SAA2BA,kBAA3B;IAA+CC;EAClD,IAAMF,KAAK;IACTO,GAAG,EAAEF;EADO,GAEXC,IAAD,EAAQT,YAFV;EAIA,IAAMW,YAAY,GAAG;IAAER,KAAF,EAAEA,KAAF;IAASC,kBAAT,EAASA,kBAAT;IAA6BC;EAA7B,CAArB;EAEA,OACER,oBAACI,YAAD,CAAcW,QAAd;IAAuBC,KAAK,EAAEF;EAA9B,GAA6CJ,IAA7C,CADF;AAGD,CAjBD;AAmBA,IAAMO,aAAa,GAAG,SAAhBA,aAAa,CAAGC,MAKT;EAAA,IAJXC,IADqB,GAKVD,KAJXC,IADqB;IAErBC,OAFqB,GAKVF,KAHXE,OAFqB;IAGrBC,sBAEWH,KAFXG;IACGC,IACQ;EAAA,wBACuCtB,KAAK,CAACuB,UAAN,CAChDnB,YADgD,CAAlD;IAAQE,KAAF,qBAAEA,KAAF;IAASC,kBAAT,qBAASA,kBAAT;IAA6BC;EAInC,IAAMgB,uBAAuB,GAAGxB,KAAK,CAACyB,WAAN,CAAkB,YAAM;IACtD,IAAIJ,mBAAmB,IAAI,CAACd,kBAA5B,EAAgD;MAC9CC,UAAU;IACX;IACDY,OAAO,SAAP,WAAO,WAAP,mBAAO;EACR,CAL+B,EAK7B,CAACC,mBAAD,EAAsBb,UAAtB,EAAkCD,kBAAlC,EAAsDa,OAAtD,CAL6B,CAAhC;EAOA,OACEpB,oBAAC0B,IAAD;IAAMpB,KAAK,EAAE,CAACqB,MAAM,CAACC,SAAR,EAAmBtB,KAAnB;EAAb,GACEN,oBAACC,UAAD;IACES,IAAI,EAAES,IADR;IAEEb,KAAK,EAAEqB,MAAM,CAACE,UAFhB;IAGEC,IAAI,EAAE5B,SAHR;IAIEkB,OAAO,EAAEI;EAJX,GAKMF,IALN,EADF,CADF;AAWD,CA5BD;AA6BAL,aAAa,CAACc,WAAd,GAA4B,gBAA5B;AAEAd,aAAa,CAACe,YAAd,GAA6B;EAC3BX,mBAAmB,EAAE;AADM,CAA7B;AAIA,IAAMM,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;EAC/BN,SAAS,EAAE;IACTO,QAAQ,EAAE,UADD;IAETC,KAAK,EAAElC,SAFE;IAGTmC,MAAM,EAAEnC,SAHC;IAIToC,cAAc,EAAE,QAJP;IAKTC,UAAU,EAAE;EALH,CADoB;EAQ/BV,UAAU,EAAE;IACVW,MAAM,EAAE;EADE;AARmB,CAAlB,CAAf;AAaA,eAAevB,aAAf;;AAGA,SAASR,aAAT","names":["React","IconButton","ICON_SIZE","ICON_OFFSET","StyleContext","createContext","style","isTextInputFocused","forceFocus","IconAdornment","icon","topPosition","side","top","contextState","Provider","value","TextInputIcon","_ref","name","onPress","forceTextInputFocus","rest","useContext","onPressWithFocusControl","useCallback","View","styles","container","iconButton","size","displayName","defaultProps","StyleSheet","create","position","width","height","justifyContent","alignItems","margin"],"sources":["TextInputIcon.tsx"],"sourcesContent":["import React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\n\nimport IconButton from '../../IconButton';\nimport type { $Omit } from '../../../../src/types';\nimport type { IconSource } from '../../Icon';\n\ntype Props = $Omit<\n  React.ComponentProps<typeof IconButton>,\n  'icon' | 'theme'\n> & {\n  name: IconSource;\n  onPress?: () => void;\n  forceTextInputFocus?: boolean;\n  style?: StyleProp<ViewStyle>;\n  theme?: ReactNativePaper.Theme;\n};\n\nexport const ICON_SIZE = 24;\nconst ICON_OFFSET = 12;\n\ntype StyleContextType = {\n  style: StyleProp<ViewStyle>;\n  isTextInputFocused: boolean;\n  forceFocus: () => void;\n};\n\nconst StyleContext = React.createContext<StyleContextType>({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: () => {},\n});\n\nconst IconAdornment: React.FunctionComponent<\n  {\n    testID: string;\n    icon: React.ReactNode;\n    topPosition: number;\n    side: 'left' | 'right';\n  } & Omit<StyleContextType, 'style'>\n> = ({ icon, topPosition, side, isTextInputFocused, forceFocus }) => {\n  const style = {\n    top: topPosition,\n    [side]: ICON_OFFSET,\n  };\n  const contextState = { style, isTextInputFocused, forceFocus };\n\n  return (\n    <StyleContext.Provider value={contextState}>{icon}</StyleContext.Provider>\n  );\n};\n\nconst TextInputIcon = ({\n  name,\n  onPress,\n  forceTextInputFocus,\n  ...rest\n}: Props) => {\n  const { style, isTextInputFocused, forceFocus } = React.useContext(\n    StyleContext\n  );\n\n  const onPressWithFocusControl = React.useCallback(() => {\n    if (forceTextInputFocus && !isTextInputFocused) {\n      forceFocus();\n    }\n    onPress?.();\n  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\n\n  return (\n    <View style={[styles.container, style]}>\n      <IconButton\n        icon={name}\n        style={styles.iconButton}\n        size={ICON_SIZE}\n        onPress={onPressWithFocusControl}\n        {...rest}\n      />\n    </View>\n  );\n};\nTextInputIcon.displayName = 'TextInput.Icon';\n\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true,\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  iconButton: {\n    margin: 0,\n  },\n});\n\nexport default TextInputIcon;\n\n// @component-docs ignore-next-line\nexport { IconAdornment };\n"]},"metadata":{},"sourceType":"module"}