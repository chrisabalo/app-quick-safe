{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"E:\\\\local\\\\app-quick-safe\\\\node_modules\\\\react-native-elements\\\\src\\\\config\\\\ThemeProvider.js\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport deepmerge from 'deepmerge';\nimport colors from \"./colors\";\nimport darkColors from \"./colorsDark\";\nexport var ThemeContext = React.createContext({\n  theme: {\n    colors: colors\n  }\n});\nvar ThemeProvider = function (_React$Component) {\n  _inherits(ThemeProvider, _React$Component);\n  var _super = _createSuper(ThemeProvider);\n  function ThemeProvider(props) {\n    var _this;\n    _classCallCheck(this, ThemeProvider);\n    _this = _super.call(this, props);\n    _this.updateTheme = function (updates) {\n      _this.setState(function (_ref) {\n        var theme = _ref.theme;\n        return {\n          theme: deepmerge(theme, updates)\n        };\n      });\n    };\n    _this.replaceTheme = function (theme) {\n      _this.setState(function () {\n        return {\n          theme: deepmerge(_this.defaultTheme, theme)\n        };\n      });\n    };\n    _this.getTheme = function () {\n      return _this.state.theme;\n    };\n    var defaultColors = props.useDark ? darkColors : colors;\n    _this.defaultTheme = deepmerge({\n      colors: defaultColors\n    }, props.theme);\n    _this.state = {\n      theme: _this.defaultTheme,\n      useDark: props.useDark\n    };\n    return _this;\n  }\n  _createClass(ThemeProvider, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ThemeContext.Provider, {\n        value: {\n          theme: this.state.theme,\n          updateTheme: this.updateTheme,\n          replaceTheme: this.replaceTheme\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 7\n        }\n      }, this.props.children);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var useDark = props.useDark;\n      if (useDark !== state.useDark) {\n        var defaultColors = useDark ? darkColors : colors;\n        return {\n          theme: deepmerge(state.theme, deepmerge({\n            colors: defaultColors\n          }, props.theme)),\n          useDark: useDark\n        };\n      }\n      return null;\n    }\n  }]);\n  return ThemeProvider;\n}(React.Component);\nexport { ThemeProvider as default };\nThemeProvider.propTypes = {\n  theme: PropTypes.object,\n  children: PropTypes.node.isRequired,\n  useDark: PropTypes.bool\n};\nThemeProvider.defaultProps = {\n  theme: {},\n  useDark: false\n};\nexport var ThemeConsumer = ThemeContext.Consumer;","map":{"version":3,"names":["React","PropTypes","deepmerge","colors","darkColors","ThemeContext","createContext","theme","ThemeProvider","props","updateTheme","updates","setState","replaceTheme","defaultTheme","getTheme","state","defaultColors","useDark","children","Component","propTypes","object","node","isRequired","bool","defaultProps","ThemeConsumer","Consumer"],"sources":["E:/local/app-quick-safe/node_modules/react-native-elements/src/config/ThemeProvider.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport deepmerge from 'deepmerge';\n\nimport colors from './colors';\nimport darkColors from './colorsDark';\n\nexport const ThemeContext = React.createContext({\n  theme: {\n    colors,\n  },\n});\n\nexport default class ThemeProvider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const defaultColors = props.useDark ? darkColors : colors;\n\n    this.defaultTheme = deepmerge(\n      {\n        colors: defaultColors,\n      },\n      props.theme\n    );\n    this.state = {\n      theme: this.defaultTheme,\n      useDark: props.useDark,\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const { useDark } = props;\n    if (useDark !== state.useDark) {\n      const defaultColors = useDark ? darkColors : colors;\n      return {\n        theme: deepmerge(\n          state.theme,\n          deepmerge(\n            {\n              colors: defaultColors,\n            },\n            props.theme\n          )\n        ),\n        useDark,\n      };\n    }\n    return null;\n  }\n  updateTheme = (updates) => {\n    this.setState(({ theme }) => ({\n      theme: deepmerge(theme, updates),\n    }));\n  };\n\n  replaceTheme = (theme) => {\n    this.setState(() => ({\n      theme: deepmerge(this.defaultTheme, theme),\n    }));\n  };\n\n  getTheme = () => this.state.theme;\n\n  render() {\n    return (\n      <ThemeContext.Provider\n        value={{\n          theme: this.state.theme,\n          updateTheme: this.updateTheme,\n          replaceTheme: this.replaceTheme,\n        }}\n      >\n        {this.props.children}\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nThemeProvider.propTypes = {\n  theme: PropTypes.object,\n  children: PropTypes.node.isRequired,\n  useDark: PropTypes.bool,\n};\n\nThemeProvider.defaultProps = {\n  theme: {},\n  useDark: false,\n};\n\nexport const ThemeConsumer = ThemeContext.Consumer;\n"],"mappings":";;;;;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,SAAS,MAAM,WAAW;AAEjC,OAAOC,MAAM;AACb,OAAOC,UAAU;AAEjB,OAAO,IAAMC,YAAY,GAAGL,KAAK,CAACM,aAAa,CAAC;EAC9CC,KAAK,EAAE;IACLJ,MAAM,EAANA;EACF;AACF,CAAC,CAAC;AAAC,IAEkBK,aAAa;EAAA;EAAA;EAChC,uBAAYC,KAAK,EAAE;IAAA;IAAA;IACjB,0BAAMA,KAAK;IAAE,MAmCfC,WAAW,GAAG,UAACC,OAAO,EAAK;MACzB,MAAKC,QAAQ,CAAC;QAAA,IAAGL,KAAK,QAALA,KAAK;QAAA,OAAQ;UAC5BA,KAAK,EAAEL,SAAS,CAACK,KAAK,EAAEI,OAAO;QACjC,CAAC;MAAA,CAAC,CAAC;IACL,CAAC;IAAA,MAEDE,YAAY,GAAG,UAACN,KAAK,EAAK;MACxB,MAAKK,QAAQ,CAAC;QAAA,OAAO;UACnBL,KAAK,EAAEL,SAAS,CAAC,MAAKY,YAAY,EAAEP,KAAK;QAC3C,CAAC;MAAA,CAAC,CAAC;IACL,CAAC;IAAA,MAEDQ,QAAQ,GAAG;MAAA,OAAM,MAAKC,KAAK,CAACT,KAAK;IAAA;IA7C/B,IAAMU,aAAa,GAAGR,KAAK,CAACS,OAAO,GAAGd,UAAU,GAAGD,MAAM;IAEzD,MAAKW,YAAY,GAAGZ,SAAS,CAC3B;MACEC,MAAM,EAAEc;IACV,CAAC,EACDR,KAAK,CAACF,KAAK,CACZ;IACD,MAAKS,KAAK,GAAG;MACXT,KAAK,EAAE,MAAKO,YAAY;MACxBI,OAAO,EAAET,KAAK,CAACS;IACjB,CAAC;IAAC;EACJ;EAAC;IAAA;IAAA,yBAmCQ;MACP,OACE,oBAAC,YAAY,CAAC,QAAQ;QACpB,KAAK,EAAE;UACLX,KAAK,EAAE,IAAI,CAACS,KAAK,CAACT,KAAK;UACvBG,WAAW,EAAE,IAAI,CAACA,WAAW;UAC7BG,YAAY,EAAE,IAAI,CAACA;QACrB,CAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAED,IAAI,CAACJ,KAAK,CAACU,QAAQ,CACE;IAE5B;EAAC;IAAA;IAAA,yCA7C+BV,KAAK,EAAEO,KAAK,EAAE;MAAA,IACpCE,OAAO,GAAKT,KAAK,CAAjBS,OAAO;MACf,IAAIA,OAAO,KAAKF,KAAK,CAACE,OAAO,EAAE;QAC7B,IAAMD,aAAa,GAAGC,OAAO,GAAGd,UAAU,GAAGD,MAAM;QACnD,OAAO;UACLI,KAAK,EAAEL,SAAS,CACdc,KAAK,CAACT,KAAK,EACXL,SAAS,CACP;YACEC,MAAM,EAAEc;UACV,CAAC,EACDR,KAAK,CAACF,KAAK,CACZ,CACF;UACDW,OAAO,EAAPA;QACF,CAAC;MACH;MACA,OAAO,IAAI;IACb;EAAC;EAAA;AAAA,EApCwClB,KAAK,CAACoB,SAAS;AAAA,SAArCZ,aAAa;AAkElCA,aAAa,CAACa,SAAS,GAAG;EACxBd,KAAK,EAAEN,SAAS,CAACqB,MAAM;EACvBH,QAAQ,EAAElB,SAAS,CAACsB,IAAI,CAACC,UAAU;EACnCN,OAAO,EAAEjB,SAAS,CAACwB;AACrB,CAAC;AAEDjB,aAAa,CAACkB,YAAY,GAAG;EAC3BnB,KAAK,EAAE,CAAC,CAAC;EACTW,OAAO,EAAE;AACX,CAAC;AAED,OAAO,IAAMS,aAAa,GAAGtB,YAAY,CAACuB,QAAQ"},"metadata":{},"sourceType":"module"}