{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport View from \"react-native-web/dist/exports/View\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Animated from 'react-native-reanimated';\nimport { PanGestureHandler, TapGestureHandler, GestureState } from \"./GestureHandler\";\nimport Overlay from \"./Overlay\";\nvar Clock = Animated.Clock,\n  Value = Animated.Value,\n  onChange = Animated.onChange,\n  clockRunning = Animated.clockRunning,\n  startClock = Animated.startClock,\n  stopClock = Animated.stopClock,\n  spring = Animated.spring,\n  abs = Animated.abs,\n  add = Animated.add,\n  and = Animated.and,\n  block = Animated.block,\n  call = Animated.call,\n  cond = Animated.cond,\n  divide = Animated.divide,\n  eq = Animated.eq,\n  event = Animated.event,\n  greaterThan = Animated.greaterThan,\n  lessThan = Animated.lessThan,\n  max = Animated.max,\n  min = Animated.min,\n  multiply = Animated.multiply,\n  neq = Animated.neq,\n  or = Animated.or,\n  set = Animated.set,\n  sub = Animated.sub;\nvar TRUE = 1;\nvar FALSE = 0;\nvar NOOP = 0;\nvar UNSET = -1;\nvar DIRECTION_LEFT = 1;\nvar DIRECTION_RIGHT = -1;\nvar SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\nvar SWIPE_DISTANCE_MINIMUM = 5;\nvar DEFAULT_DRAWER_WIDTH = '80%';\nvar SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01\n};\nvar ANIMATED_ZERO = new Animated.Value(0);\nvar ANIMATED_ONE = new Animated.Value(1);\nvar DrawerView = function (_React$Component) {\n  _inherits(DrawerView, _React$Component);\n  var _super = _createSuper(DrawerView);\n  function DrawerView() {\n    var _this;\n    _classCallCheck(this, DrawerView);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"handleEscape\", function (e) {\n      var _this$props = _this.props,\n        open = _this$props.open,\n        onClose = _this$props.onClose;\n      if (e.key === 'Escape') {\n        if (open) {\n          onClose();\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleEndInteraction\", function () {\n      if (_this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(_this.interactionHandle);\n        _this.interactionHandle = undefined;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleStartInteraction\", function () {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getDrawerWidth\", function () {\n      var _this$props2 = _this.props,\n        drawerStyle = _this$props2.drawerStyle,\n        dimensions = _this$props2.dimensions;\n      var _ref = StyleSheet.flatten(drawerStyle) || {},\n        _ref$width = _ref.width,\n        width = _ref$width === void 0 ? DEFAULT_DRAWER_WIDTH : _ref$width;\n      if (typeof width === 'string' && width.endsWith('%')) {\n        var percentage = Number(width.replace(/%$/, ''));\n        if (Number.isFinite(percentage)) {\n          return dimensions.width * (percentage / 100);\n        }\n      }\n      return typeof width === 'number' ? width : 0;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"clock\", new Clock());\n    _defineProperty(_assertThisInitialized(_this), \"interactionHandle\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"isDrawerTypeFront\", new Value(_this.props.drawerType === 'front' ? TRUE : FALSE));\n    _defineProperty(_assertThisInitialized(_this), \"isOpen\", new Value(_this.props.open ? TRUE : FALSE));\n    _defineProperty(_assertThisInitialized(_this), \"nextIsOpen\", new Value(UNSET));\n    _defineProperty(_assertThisInitialized(_this), \"isSwiping\", new Value(FALSE));\n    _defineProperty(_assertThisInitialized(_this), \"initialDrawerWidth\", _this.getDrawerWidth());\n    _defineProperty(_assertThisInitialized(_this), \"gestureState\", new Value(GestureState.UNDETERMINED));\n    _defineProperty(_assertThisInitialized(_this), \"touchX\", new Value(0));\n    _defineProperty(_assertThisInitialized(_this), \"velocityX\", new Value(0));\n    _defineProperty(_assertThisInitialized(_this), \"gestureX\", new Value(0));\n    _defineProperty(_assertThisInitialized(_this), \"offsetX\", new Value(0));\n    _defineProperty(_assertThisInitialized(_this), \"position\", new Value(_this.props.open ? _this.initialDrawerWidth * (_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT) : 0));\n    _defineProperty(_assertThisInitialized(_this), \"containerWidth\", new Value(_this.props.dimensions.width));\n    _defineProperty(_assertThisInitialized(_this), \"drawerWidth\", new Value(_this.initialDrawerWidth));\n    _defineProperty(_assertThisInitialized(_this), \"drawerOpacity\", new Value(_this.props.drawerType === 'permanent' ? 1 : 0));\n    _defineProperty(_assertThisInitialized(_this), \"drawerPosition\", new Value(_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT));\n    _defineProperty(_assertThisInitialized(_this), \"touchDistanceFromDrawer\", cond(_this.isDrawerTypeFront, cond(eq(_this.drawerPosition, DIRECTION_LEFT), max(\n    sub(sub(_this.touchX, _this.gestureX), _this.drawerWidth), 0), min(multiply(\n    sub(sub(_this.containerWidth, _this.drawerWidth), sub(_this.touchX, _this.gestureX)), DIRECTION_RIGHT), 0)), 0));\n    _defineProperty(_assertThisInitialized(_this), \"swipeDistanceThreshold\", new Value(_this.props.swipeDistanceThreshold !== undefined ? _this.props.swipeDistanceThreshold : SWIPE_DISTANCE_THRESHOLD_DEFAULT));\n    _defineProperty(_assertThisInitialized(_this), \"swipeVelocityThreshold\", new Value(_this.props.swipeVelocityThreshold));\n    _defineProperty(_assertThisInitialized(_this), \"currentOpenValue\", _this.props.open);\n    _defineProperty(_assertThisInitialized(_this), \"pendingOpenValue\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"isStatusBarHidden\", false);\n    _defineProperty(_assertThisInitialized(_this), \"manuallyTriggerSpring\", new Value(FALSE));\n    _defineProperty(_assertThisInitialized(_this), \"transitionTo\", function (isOpen) {\n      var toValue = new Value(0);\n      var frameTime = new Value(0);\n      var state = {\n        position: _this.position,\n        time: new Value(0),\n        finished: new Value(FALSE),\n        velocity: new Value(0)\n      };\n      return block([cond(clockRunning(_this.clock), NOOP, [\n      set(toValue, multiply(isOpen, _this.drawerWidth, _this.drawerPosition)), set(frameTime, 0), set(state.time, 0), set(state.finished, FALSE), set(state.velocity, _this.velocityX), set(_this.isOpen, isOpen), startClock(_this.clock), call([], _this.handleStartInteraction), set(_this.manuallyTriggerSpring, FALSE)]), spring(_this.clock, state, _objectSpread(_objectSpread({}, SPRING_CONFIG), {}, {\n        toValue: toValue\n      })), cond(state.finished, [\n      set(_this.touchX, 0), set(_this.gestureX, 0), set(_this.velocityX, 0), set(_this.offsetX, 0),\n      stopClock(_this.clock), call([_this.isOpen], function (_ref2) {\n        var _ref3 = _slicedToArray(_ref2, 1),\n          value = _ref3[0];\n        var open = Boolean(value);\n        _this.handleEndInteraction();\n        if (open !== _this.props.open) {\n          _this.toggleDrawer(_this.props.open);\n        }\n      })])]);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"dragX\", block([onChange(_this.isOpen, call([_this.isOpen], function (_ref4) {\n      var _ref5 = _slicedToArray(_ref4, 1),\n        value = _ref5[0];\n      var open = Boolean(value);\n      _this.currentOpenValue = open;\n\n      if (open !== _this.props.open) {\n        if (open) {\n          _this.props.onOpen();\n        } else {\n          _this.props.onClose();\n        }\n        _this.pendingOpenValue = open;\n\n        _this.forceUpdate();\n      }\n    })), onChange(_this.nextIsOpen, cond(neq(_this.nextIsOpen, UNSET), [\n    cond(clockRunning(_this.clock), stopClock(_this.clock)),\n    set(_this.isOpen, _this.nextIsOpen), set(_this.gestureX, 0), set(_this.nextIsOpen, UNSET)])),\n    onChange(_this.isSwiping,\n    call([_this.isSwiping], function (_ref6) {\n      var _ref7 = _slicedToArray(_ref6, 1),\n        value = _ref7[0];\n      var keyboardDismissMode = _this.props.keyboardDismissMode;\n      if (value === TRUE) {\n        if (keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n        _this.toggleStatusBar(true);\n      } else {\n        _this.toggleStatusBar(_this.currentOpenValue);\n      }\n    })), onChange(_this.gestureState, cond(eq(_this.gestureState, GestureState.ACTIVE), call([], _this.handleStartInteraction))), cond(eq(_this.gestureState, GestureState.ACTIVE), [cond(_this.isSwiping, NOOP, [\n    set(_this.isSwiping, TRUE),\n    set(_this.offsetX, _this.position)]),\n    set(_this.position, add(_this.offsetX, _this.gestureX, _this.touchDistanceFromDrawer)),\n    stopClock(_this.clock)], [set(_this.isSwiping, FALSE), set(_this.touchX, 0), _this.transitionTo(cond(_this.manuallyTriggerSpring, _this.isOpen, cond(or(and(greaterThan(abs(_this.gestureX), SWIPE_DISTANCE_MINIMUM), greaterThan(abs(_this.velocityX), _this.swipeVelocityThreshold)), greaterThan(abs(_this.gestureX), _this.swipeDistanceThreshold)), cond(eq(_this.drawerPosition, DIRECTION_LEFT),\n    greaterThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0),\n    lessThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0)), _this.isOpen)))]), _this.position]));\n    _defineProperty(_assertThisInitialized(_this), \"translateX\", cond(eq(_this.drawerPosition, DIRECTION_RIGHT), min(max(multiply(_this.drawerWidth, -1), _this.dragX), 0), max(min(_this.drawerWidth, _this.dragX), 0)));\n    _defineProperty(_assertThisInitialized(_this), \"progress\", cond(\n    eq(_this.drawerWidth, 0), 0, abs(divide(_this.translateX, _this.drawerWidth))));\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureEvent\", event([{\n      nativeEvent: {\n        x: _this.touchX,\n        translationX: _this.gestureX,\n        velocityX: _this.velocityX\n      }\n    }]));\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureStateChange\", event([{\n      nativeEvent: {\n        state: function state(s) {\n          return set(_this.gestureState, s);\n        }\n      }\n    }]));\n    _defineProperty(_assertThisInitialized(_this), \"handleTapStateChange\", event([{\n      nativeEvent: {\n        oldState: function oldState(s) {\n          return cond(eq(s, GestureState.ACTIVE), set(_this.manuallyTriggerSpring, TRUE));\n        }\n      }\n    }]));\n    _defineProperty(_assertThisInitialized(_this), \"handleContainerLayout\", function (e) {\n      return _this.containerWidth.setValue(e.nativeEvent.layout.width);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleDrawerLayout\", function (e) {\n      _this.drawerWidth.setValue(e.nativeEvent.layout.width);\n      _this.toggleDrawer(_this.props.open);\n\n      requestAnimationFrame(function () {\n        return requestAnimationFrame(function () {\n          return _this.drawerOpacity.setValue(1);\n        });\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"toggleDrawer\", function (open) {\n      if (_this.currentOpenValue !== open) {\n        _this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n        _this.currentOpenValue = open;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"toggleStatusBar\", function (hidden) {\n      var _this$props3 = _this.props,\n        hideStatusBar = _this$props3.hideStatusBar,\n        statusBarAnimation = _this$props3.statusBarAnimation;\n      if (hideStatusBar && _this.isStatusBarHidden !== hidden) {\n        _this.isStatusBarHidden = hidden;\n        StatusBar.setHidden(hidden, statusBarAnimation);\n      }\n    });\n    return _this;\n  }\n  _createClass(DrawerView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (Platform.OS === 'web') {\n        var _document, _document$body, _document$body$addEve;\n        (_document = document) === null || _document === void 0 ? void 0 : (_document$body = _document.body) === null || _document$body === void 0 ? void 0 : (_document$body$addEve = _document$body.addEventListener) === null || _document$body$addEve === void 0 ? void 0 : _document$body$addEve.call(_document$body, 'keyup', this.handleEscape);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props4 = this.props,\n        open = _this$props4.open,\n        drawerPosition = _this$props4.drawerPosition,\n        drawerType = _this$props4.drawerType,\n        swipeDistanceThreshold = _this$props4.swipeDistanceThreshold,\n        swipeVelocityThreshold = _this$props4.swipeVelocityThreshold,\n        hideStatusBar = _this$props4.hideStatusBar;\n      if (\n      typeof this.pendingOpenValue !== 'boolean' || open !== this.pendingOpenValue) {\n        this.toggleDrawer(open);\n      }\n      this.pendingOpenValue = undefined;\n      if (open !== prevProps.open && hideStatusBar) {\n        this.toggleStatusBar(open);\n      }\n      if (prevProps.drawerPosition !== drawerPosition) {\n        this.drawerPosition.setValue(drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n      }\n      if (prevProps.drawerType !== drawerType) {\n        this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n      }\n      if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n        this.swipeDistanceThreshold.setValue(swipeDistanceThreshold !== undefined ? swipeDistanceThreshold : SWIPE_DISTANCE_THRESHOLD_DEFAULT);\n      }\n      if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n        this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.toggleStatusBar(false);\n      this.handleEndInteraction();\n      if (Platform.OS === 'web') {\n        var _document2, _document2$body, _document2$body$remov;\n        (_document2 = document) === null || _document2 === void 0 ? void 0 : (_document2$body = _document2.body) === null || _document2$body === void 0 ? void 0 : (_document2$body$remov = _document2$body.removeEventListener) === null || _document2$body$remov === void 0 ? void 0 : _document2$body$remov.call(_document2$body, 'keyup', this.handleEscape);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props5 = this.props,\n        open = _this$props5.open,\n        gestureEnabled = _this$props5.gestureEnabled,\n        swipeEnabled = _this$props5.swipeEnabled,\n        drawerPosition = _this$props5.drawerPosition,\n        drawerType = _this$props5.drawerType,\n        swipeEdgeWidth = _this$props5.swipeEdgeWidth,\n        sceneContainerStyle = _this$props5.sceneContainerStyle,\n        drawerStyle = _this$props5.drawerStyle,\n        overlayStyle = _this$props5.overlayStyle,\n        renderDrawerContent = _this$props5.renderDrawerContent,\n        renderSceneContent = _this$props5.renderSceneContent,\n        gestureHandlerProps = _this$props5.gestureHandlerProps;\n      var isOpen = drawerType === 'permanent' ? true : open;\n      var isRight = drawerPosition === 'right';\n      var contentTranslateX = drawerType === 'front' || drawerType === 'permanent' ? ANIMATED_ZERO : this.translateX;\n      var drawerTranslateX = drawerType === 'permanent' ? ANIMATED_ZERO : drawerType === 'back' ? I18nManager.isRTL ? multiply(sub(this.containerWidth, this.drawerWidth), isRight ? 1 : -1) : ANIMATED_ZERO : this.translateX;\n      var offset = drawerType === 'back' ? 0 : I18nManager.isRTL ? '100%' : multiply(this.drawerWidth, -1);\n\n      var hitSlop = isRight ?\n      {\n        right: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      } : {\n        left: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      };\n      var progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n      return React.createElement(PanGestureHandler, _extends({\n        activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        onGestureEvent: this.handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange,\n        hitSlop: hitSlop,\n        enabled: drawerType !== 'permanent' && gestureEnabled && swipeEnabled\n      }, gestureHandlerProps), React.createElement(Animated.View, {\n        onLayout: this.handleContainerLayout,\n        style: [styles.main, {\n          flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n        }]\n      }, React.createElement(Animated.View, {\n        style: [styles.content, {\n          transform: [{\n            translateX: contentTranslateX\n          }]\n        }, sceneContainerStyle]\n      }, React.createElement(View, {\n        accessibilityElementsHidden: isOpen && drawerType !== 'permanent',\n        importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',\n        style: styles.content\n      }, renderSceneContent({\n        progress: progress\n      })),\n      drawerType === 'permanent' ? null : Platform.OS === 'web' || Platform.OS === 'windows' || Platform.OS === 'macos' ? React.createElement(TouchableWithoutFeedback, {\n        onPress: gestureEnabled ? function () {\n          return _this2.toggleDrawer(false);\n        } : undefined\n      }, React.createElement(Overlay, {\n        progress: progress,\n        style: overlayStyle\n      })) : React.createElement(TapGestureHandler, {\n        enabled: gestureEnabled,\n        onHandlerStateChange: this.handleTapStateChange\n      }, React.createElement(Overlay, {\n        progress: progress,\n        style: overlayStyle\n      }))), React.createElement(Animated.Code, {\n        exec: this.containerWidth\n      }), drawerType === 'permanent' ? null : React.createElement(Animated.Code, {\n        exec: block([onChange(this.manuallyTriggerSpring, [cond(eq(this.manuallyTriggerSpring, TRUE), [set(this.nextIsOpen, FALSE), call([], function () {\n          return _this2.currentOpenValue = false;\n        })])])])\n      }), React.createElement(Animated.View, {\n        accessibilityViewIsModal: isOpen && drawerType !== 'permanent',\n        removeClippedSubviews: Platform.OS !== 'ios',\n        onLayout: this.handleDrawerLayout,\n        style: [styles.container, {\n          transform: [{\n            translateX: drawerTranslateX\n          }],\n          opacity: this.drawerOpacity\n        }, drawerType === 'permanent' ?\n        isRight ? {\n          right: 0\n        } : {\n          left: 0\n        } : [styles.nonPermanent, isRight ? {\n          right: offset\n        } : {\n          left: offset\n        }, {\n          zIndex: drawerType === 'back' ? -1 : 0\n        }], drawerStyle]\n      }, renderDrawerContent({\n        progress: progress\n      }))));\n    }\n  }]);\n  return DrawerView;\n}(React.Component);\nexport { DrawerView as default };\n_defineProperty(DrawerView, \"defaultProps\", {\n  drawerPosition: I18nManager.isRTL ? 'left' : 'right',\n  drawerType: 'front',\n  gestureEnabled: true,\n  swipeEnabled: Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos',\n  swipeEdgeWidth: 32,\n  swipeVelocityThreshold: 500,\n  keyboardDismissMode: 'on-drag',\n  hideStatusBar: false,\n  statusBarAnimation: 'slide'\n});\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%'\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH\n  },\n  content: {\n    flex: 1\n  },\n  main: _objectSpread({\n    flex: 1\n  }, Platform.select({\n    web: null,\n    default: {\n      overflow: 'hidden'\n    }\n  }))\n});","map":{"version":3,"mappings":"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","names":["React","Animated","PanGestureHandler","TapGestureHandler","GestureState","Overlay","Clock","Value","onChange","clockRunning","startClock","stopClock","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_THRESHOLD_DEFAULT","SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","ANIMATED_ZERO","ANIMATED_ONE","DrawerView","args","_defineProperty","e","props","open","onClose","key","interactionHandle","undefined","InteractionManager","clearInteractionHandle","createInteractionHandle","drawerStyle","dimensions","StyleSheet","flatten","width","endsWith","percentage","Number","replace","isFinite","drawerType","getDrawerWidth","UNDETERMINED","initialDrawerWidth","drawerPosition","isDrawerTypeFront","touchX","gestureX","drawerWidth","containerWidth","swipeDistanceThreshold","swipeVelocityThreshold","isOpen","toValue","frameTime","state","position","time","finished","velocity","clock","velocityX","handleStartInteraction","manuallyTriggerSpring","offsetX","value","Boolean","handleEndInteraction","toggleDrawer","currentOpenValue","onOpen","pendingOpenValue","forceUpdate","nextIsOpen","isSwiping","keyboardDismissMode","Keyboard","dismiss","toggleStatusBar","gestureState","ACTIVE","touchDistanceFromDrawer","transitionTo","dragX","translateX","nativeEvent","x","translationX","s","oldState","setValue","layout","requestAnimationFrame","drawerOpacity","hidden","hideStatusBar","statusBarAnimation","isStatusBarHidden","StatusBar","setHidden","Platform","OS","body","addEventListener","handleEscape","prevProps","removeEventListener","gestureEnabled","swipeEnabled","swipeEdgeWidth","sceneContainerStyle","overlayStyle","renderDrawerContent","renderSceneContent","gestureHandlerProps","isRight","contentTranslateX","drawerTranslateX","I18nManager","isRTL","offset","hitSlop","right","left","progress","activeOffsetX","failOffsetY","onGestureEvent","handleGestureEvent","onHandlerStateChange","handleGestureStateChange","enabled","View","onLayout","handleContainerLayout","style","styles","main","flexDirection","content","transform","accessibilityElementsHidden","importantForAccessibility","TouchableWithoutFeedback","onPress","handleTapStateChange","Code","exec","accessibilityViewIsModal","removeClippedSubviews","handleDrawerLayout","container","opacity","nonPermanent","zIndex","Component","create","backgroundColor","maxWidth","top","bottom","flex","select","web","default","overflow"],"sources":["Drawer.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  ViewStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n  Keyboard,\n  StatusBar,\n  StyleProp,\n  View,\n  InteractionManager,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport {\n  PanGestureHandler,\n  TapGestureHandler,\n  GestureState,\n} from './GestureHandler';\nimport Overlay from './Overlay';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst DEFAULT_DRAWER_WIDTH = '80%';\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst ANIMATED_ZERO = new Animated.Value(0);\nconst ANIMATED_ONE = new Animated.Value(1);\n\ntype Binary = 0 | 1;\n\ntype Renderer = (props: { progress: Animated.Node<number> }) => React.ReactNode;\n\ntype Props = {\n  open: boolean;\n  onOpen: () => void;\n  onClose: () => void;\n  gestureEnabled: boolean;\n  swipeEnabled: boolean;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide' | 'permanent';\n  keyboardDismissMode: 'none' | 'on-drag';\n  swipeEdgeWidth: number;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold: number;\n  hideStatusBar: boolean;\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  overlayStyle?: StyleProp<ViewStyle>;\n  drawerStyle?: StyleProp<ViewStyle>;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  renderDrawerContent: Renderer;\n  renderSceneContent: Renderer;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n  dimensions: { width: number; height: number };\n};\n\nexport default class DrawerView extends React.Component<Props> {\n  static defaultProps = {\n    drawerPosition: I18nManager.isRTL ? 'left' : 'right',\n    drawerType: 'front',\n    gestureEnabled: true,\n    swipeEnabled:\n      Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n    swipeEdgeWidth: 32,\n    swipeVelocityThreshold: 500,\n    keyboardDismissMode: 'on-drag',\n    hideStatusBar: false,\n    statusBarAnimation: 'slide',\n  };\n\n  componentDidMount() {\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', this.handleEscape);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBar,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(\n        swipeDistanceThreshold !== undefined\n          ? swipeDistanceThreshold\n          : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n      );\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n\n    if (Platform.OS === 'web') {\n      document?.body?.removeEventListener?.('keyup', this.handleEscape);\n    }\n  }\n\n  private handleEscape = (e: KeyboardEvent) => {\n    const { open, onClose } = this.props;\n\n    if (e.key === 'Escape') {\n      if (open) {\n        onClose();\n      }\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private getDrawerWidth = (): number => {\n    const { drawerStyle, dimensions } = this.props;\n    const { width = DEFAULT_DRAWER_WIDTH } =\n      StyleSheet.flatten(drawerStyle) || {};\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  private clock = new Clock();\n  private interactionHandle: number | undefined;\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private initialDrawerWidth = this.getDrawerWidth();\n\n  private gestureState = new Value<number>(GestureState.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(\n    this.props.open\n      ? this.initialDrawerWidth *\n        (this.props.drawerPosition === 'right'\n          ? DIRECTION_RIGHT\n          : DIRECTION_LEFT)\n      : 0\n  );\n\n  private containerWidth = new Value<number>(this.props.dimensions.width);\n  private drawerWidth = new Value<number>(this.initialDrawerWidth);\n  private drawerOpacity = new Value<number>(\n    this.props.drawerType === 'permanent' ? 1 : 0\n  );\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold !== undefined\n      ? this.props.swipeDistanceThreshold\n      : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        call([], this.handleStartInteraction),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n          this.handleEndInteraction();\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    onChange(\n      this.gestureState,\n      cond(\n        eq(this.gestureState, GestureState.ACTIVE),\n        call([], this.handleStartInteraction)\n      )\n    ),\n    cond(\n      eq(this.gestureState, GestureState.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleTapStateChange = event([\n    {\n      nativeEvent: {\n        oldState: (s: Animated.Value<number>) =>\n          cond(\n            eq(s, GestureState.ACTIVE),\n            set(this.manuallyTriggerSpring, TRUE)\n          ),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBar, statusBarAnimation } = this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      gestureEnabled,\n      swipeEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      sceneContainerStyle,\n      drawerStyle,\n      overlayStyle,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const isOpen = drawerType === 'permanent' ? true : open;\n    const isRight = drawerPosition === 'right';\n\n    const contentTranslateX =\n      drawerType === 'front' || drawerType === 'permanent'\n        ? ANIMATED_ZERO\n        : this.translateX;\n\n    const drawerTranslateX =\n      drawerType === 'permanent'\n        ? ANIMATED_ZERO\n        : drawerType === 'back'\n        ? I18nManager.isRTL\n          ? multiply(\n              sub(this.containerWidth, this.drawerWidth),\n              isRight ? 1 : -1\n            )\n          : ANIMATED_ZERO\n        : this.translateX;\n\n    const offset =\n      drawerType === 'back'\n        ? 0\n        : I18nManager.isRTL\n        ? '100%'\n        : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/kmagiera/react-native-gesture-handler/issues/569\n    const hitSlop = isRight\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n      : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n\n    return (\n      <PanGestureHandler\n        activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        onGestureEvent={this.handleGestureEvent}\n        onHandlerStateChange={this.handleGestureStateChange}\n        hitSlop={hitSlop}\n        enabled={drawerType !== 'permanent' && gestureEnabled && swipeEnabled}\n        {...gestureHandlerProps}\n      >\n        <Animated.View\n          onLayout={this.handleContainerLayout}\n          style={[\n            styles.main,\n            {\n              flexDirection:\n                drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row',\n            },\n          ]}\n        >\n          <Animated.View\n            style={[\n              styles.content,\n              { transform: [{ translateX: contentTranslateX }] },\n              sceneContainerStyle as any,\n            ]}\n          >\n            <View\n              accessibilityElementsHidden={isOpen && drawerType !== 'permanent'}\n              importantForAccessibility={\n                isOpen && drawerType !== 'permanent'\n                  ? 'no-hide-descendants'\n                  : 'auto'\n              }\n              style={styles.content}\n            >\n              {renderSceneContent({ progress })}\n            </View>\n            {\n              // Disable overlay if sidebar is permanent\n              drawerType === 'permanent' ? null : Platform.OS === 'web' ||\n                Platform.OS === 'windows' ||\n                Platform.OS === 'macos' ? (\n                <TouchableWithoutFeedback\n                  onPress={\n                    gestureEnabled ? () => this.toggleDrawer(false) : undefined\n                  }\n                >\n                  <Overlay progress={progress} style={overlayStyle as any} />\n                </TouchableWithoutFeedback>\n              ) : (\n                <TapGestureHandler\n                  enabled={gestureEnabled}\n                  onHandlerStateChange={this.handleTapStateChange}\n                >\n                  <Overlay progress={progress} style={overlayStyle as any} />\n                </TapGestureHandler>\n              )\n            }\n          </Animated.View>\n          <Animated.Code\n            // This is needed to make sure that container width updates with `setValue`\n            // Without this, it won't update when not used in styles\n            exec={this.containerWidth}\n          />\n          {drawerType === 'permanent' ? null : (\n            <Animated.Code\n              exec={block([\n                onChange(this.manuallyTriggerSpring, [\n                  cond(eq(this.manuallyTriggerSpring, TRUE), [\n                    set(this.nextIsOpen, FALSE),\n                    call([], () => (this.currentOpenValue = false)),\n                  ]),\n                ]),\n              ])}\n            />\n          )}\n          <Animated.View\n            accessibilityViewIsModal={isOpen && drawerType !== 'permanent'}\n            removeClippedSubviews={Platform.OS !== 'ios'}\n            onLayout={this.handleDrawerLayout}\n            style={[\n              styles.container,\n              {\n                transform: [{ translateX: drawerTranslateX }],\n                opacity: this.drawerOpacity,\n              },\n              drawerType === 'permanent'\n                ? // Without this, the `left`/`right` values don't get reset\n                  isRight\n                  ? { right: 0 }\n                  : { left: 0 }\n                : [\n                    styles.nonPermanent,\n                    isRight ? { right: offset } : { left: offset },\n                    { zIndex: drawerType === 'back' ? -1 : 0 },\n                  ],\n              drawerStyle as any,\n            ]}\n          >\n            {renderDrawerContent({ progress })}\n          </Animated.View>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%',\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH,\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: { overflow: 'hidden' },\n    }),\n  },\n});\n"]},"metadata":{},"sourceType":"module"}