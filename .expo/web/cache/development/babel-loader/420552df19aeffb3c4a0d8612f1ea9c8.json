{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport CheckBox from \"./Checkbox\";\nimport Text from \"../Typography/Text\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\n\nvar CheckboxItem = function CheckboxItem(_ref) {\n  var style = _ref.style,\n    status = _ref.status,\n    label = _ref.label,\n    onPress = _ref.onPress,\n    labelStyle = _ref.labelStyle,\n    theme = _ref.theme,\n    testID = _ref.testID,\n    props = _objectWithoutProperties(_ref, [\"style\", \"status\", \"label\", \"onPress\", \"labelStyle\", \"theme\", \"testID\"]);\n  return React.createElement(TouchableRipple, {\n    onPress: onPress,\n    testID: testID\n  }, React.createElement(View, {\n    style: [styles.container, style],\n    pointerEvents: \"none\"\n  }, React.createElement(Text, {\n    style: [styles.label, {\n      color: theme.colors.primary\n    }, labelStyle]\n  }, label), React.createElement(CheckBox, _extends({\n    status: status,\n    theme: theme\n  }, props))));\n};\nCheckboxItem.displayName = 'Checkbox.Item';\nexport default withTheme(CheckboxItem);\n\nexport { CheckboxItem };\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    fontSize: 16\n  }\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA;AAAA;AAUA,OAAOC,QAAP;AACA,OAAOC,IAAP;AACA,OAAOC,eAAP;AACA,SAASC,SAAT;;AAgEA,IAAMC,YAAY,GAAG,SAAfA,YAAY,CAAGC;EAAA,IACnBC,KADoB,GAADD,KACnBC,KADoB;IAEpBC,MAFoB,GAADF,KAEnBE,MAFoB;IAGpBC,KAHoB,GAADH,KAGnBG,KAHoB;IAIpBC,OAJoB,GAADJ,KAInBI,OAJoB;IAKpBC,UALoB,GAADL,KAKnBK,UALoB;IAMpBC,KANoB,GAADN,KAMnBM,KANoB;IAOpBC,SAPmBP,KAOnBO;IACGC,KARgB;EAAA,OAUnBd,oBAACG,eAAD;IAAiBO,OAAO,EAAEA,OAA1B;IAAmCG,MAAM,EAAEA;EAA3C,GACEb,oBAACe,IAAD;IAAMR,KAAK,EAAE,CAACS,MAAM,CAACC,SAAR,EAAmBV,KAAnB,CAAb;IAAwCW,aAAa,EAAC;EAAtD,GACElB,oBAACE,IAAD;IAAMK,KAAK,EAAE,CAACS,MAAM,CAACP,KAAR,EAAe;MAAEU,KAAK,EAAEP,KAAK,CAACQ,MAAN,CAAaC;IAAtB,CAAf,EAAgDV,UAAhD;EAAb,GACGF,KADH,CADF,EAIET,oBAACC,QAAD;IAAUO,MAAM,EAAEA,MAAlB;IAA0BI,KAAK,EAAEA;EAAjC,GAA4CE,KAA5C,EAJF,CADF,CAVmB;AAAA,CAArB;AAoBAT,YAAY,CAACiB,WAAb,GAA2B,eAA3B;AAEA,eAAelB,SAAS,CAACC,YAAD,CAAxB;;AAGA,SAASA,YAAT;AAEA,IAAMW,MAAM,GAAGO,UAAU,CAACC,MAAX,CAAkB;EAC/BP,SAAS,EAAE;IACTQ,aAAa,EAAE,KADN;IAETC,UAAU,EAAE,QAFH;IAGTC,cAAc,EAAE,eAHP;IAITC,eAAe,EAAE,CAJR;IAKTC,iBAAiB,EAAE;EALV,CADoB;EAQ/BpB,KAAK,EAAE;IACLqB,QAAQ,EAAE;EADL;AARwB,CAAlB,CAAf","names":["React","CheckBox","Text","TouchableRipple","withTheme","CheckboxItem","_ref","style","status","label","onPress","labelStyle","theme","testID","props","View","styles","container","pointerEvents","color","colors","primary","displayName","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","fontSize"],"sources":["CheckboxItem.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport CheckBox from './Checkbox';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  labelStyle,\n  theme,\n  testID,\n  ...props\n}: Props) => (\n  <TouchableRipple onPress={onPress} testID={testID}>\n    <View style={[styles.container, style]} pointerEvents=\"none\">\n      <Text style={[styles.label, { color: theme.colors.primary }, labelStyle]}>\n        {label}\n      </Text>\n      <CheckBox status={status} theme={theme} {...props}></CheckBox>\n    </View>\n  </TouchableRipple>\n);\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nexport default withTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nexport { CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}