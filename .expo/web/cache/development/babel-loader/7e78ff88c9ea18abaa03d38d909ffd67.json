{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport color from 'color';\nimport IconButton from \"./IconButton\";\nimport Surface from \"./Surface\";\nimport { withTheme } from \"../core/theming\";\nimport MaterialCommunityIcon from \"./MaterialCommunityIcon\";\n\nvar Searchbar = React.forwardRef(function (_ref, ref) {\n  var _ref$clearAccessibili = _ref.clearAccessibilityLabel,\n    clearAccessibilityLabel = _ref$clearAccessibili === void 0 ? 'clear' : _ref$clearAccessibili,\n    clearIcon = _ref.clearIcon,\n    icon = _ref.icon,\n    customIconColor = _ref.iconColor,\n    inputStyle = _ref.inputStyle,\n    onIconPress = _ref.onIconPress,\n    placeholder = _ref.placeholder,\n    _ref$searchAccessibil = _ref.searchAccessibilityLabel,\n    searchAccessibilityLabel = _ref$searchAccessibil === void 0 ? 'search' : _ref$searchAccessibil,\n    style = _ref.style,\n    theme = _ref.theme,\n    value = _ref.value,\n    rest = _objectWithoutProperties(_ref, [\"clearAccessibilityLabel\", \"clearIcon\", \"icon\", \"iconColor\", \"inputStyle\", \"onIconPress\", \"placeholder\", \"searchAccessibilityLabel\", \"style\", \"theme\", \"value\"]);\n  var root = React.useRef(null);\n  React.useImperativeHandle(ref, function () {\n    var _root$current, _root$current2, _root$current4, _root$current5;\n    return {\n      focus: (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.focus,\n      clear: (_root$current2 = root.current) === null || _root$current2 === void 0 ? void 0 : _root$current2.clear,\n      setNativeProps: function setNativeProps(args) {\n        var _root$current3;\n        return (_root$current3 = root.current) === null || _root$current3 === void 0 ? void 0 : _root$current3.setNativeProps(args);\n      },\n      isFocused: (_root$current4 = root.current) === null || _root$current4 === void 0 ? void 0 : _root$current4.isFocused,\n      blur: (_root$current5 = root.current) === null || _root$current5 === void 0 ? void 0 : _root$current5.blur\n    };\n  });\n  var handleClearPress = function handleClearPress() {\n    var _root$current6, _rest$onChangeText;\n    (_root$current6 = root.current) === null || _root$current6 === void 0 ? void 0 : _root$current6.clear();\n    (_rest$onChangeText = rest.onChangeText) === null || _rest$onChangeText === void 0 ? void 0 : _rest$onChangeText.call(rest, '');\n  };\n  var colors = theme.colors,\n    roundness = theme.roundness,\n    dark = theme.dark,\n    fonts = theme.fonts;\n  var textColor = colors.text;\n  var font = fonts.regular;\n  var iconColor = customIconColor || (dark ? textColor : color(textColor).alpha(0.54).rgb().string());\n  var rippleColor = color(textColor).alpha(0.32).rgb().string();\n  return React.createElement(Surface, {\n    style: [{\n      borderRadius: roundness,\n      elevation: 4\n    }, styles.container, style]\n  }, React.createElement(IconButton, {\n    accessibilityTraits: \"button\",\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onIconPress,\n    color: iconColor,\n    icon: icon || function (_ref2) {\n      var size = _ref2.size,\n        color = _ref2.color;\n      return React.createElement(MaterialCommunityIcon, {\n        name: \"magnify\",\n        color: color,\n        size: size,\n        direction: I18nManager.isRTL ? 'rtl' : 'ltr'\n      });\n    },\n    accessibilityLabel: searchAccessibilityLabel\n  }), React.createElement(TextInput, _extends({\n    style: [styles.input, _objectSpread({\n      color: textColor\n    }, font), inputStyle],\n    placeholder: placeholder || '',\n    placeholderTextColor: colors.placeholder,\n    selectionColor: colors.primary,\n    underlineColorAndroid: \"transparent\",\n    returnKeyType: \"search\",\n    keyboardAppearance: dark ? 'dark' : 'light',\n    accessibilityTraits: \"search\",\n    accessibilityRole: \"search\",\n    ref: root,\n    value: value\n  }, rest)), React.createElement(IconButton, {\n    borderless: true,\n    disabled: !value,\n    accessibilityLabel: clearAccessibilityLabel,\n    color: value ? iconColor : 'rgba(255, 255, 255, 0)',\n    rippleColor: rippleColor,\n    onPress: handleClearPress,\n    icon: clearIcon || function (_ref3) {\n      var size = _ref3.size,\n        color = _ref3.color;\n      return React.createElement(MaterialCommunityIcon, {\n        name: \"close\",\n        color: color,\n        size: size,\n        direction: I18nManager.isRTL ? 'rtl' : 'ltr'\n      });\n    },\n    accessibilityTraits: \"button\",\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\"\n  }));\n});\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0\n  }\n});\nexport default withTheme(Searchbar);","map":{"version":3,"mappings":"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","names":["React","color","IconButton","Surface","withTheme","MaterialCommunityIcon","Searchbar","forwardRef","ref","clearAccessibilityLabel","clearIcon","_ref","icon","customIconColor","iconColor","inputStyle","onIconPress","placeholder","searchAccessibilityLabel","style","theme","value","rest","root","useRef","useImperativeHandle","focus","current","_root$current","clear","_root$current2","setNativeProps","args","_root$current3","isFocused","_root$current4","blur","_root$current5","handleClearPress","onChangeText","colors","roundness","dark","fonts","textColor","text","font","regular","alpha","rgb","string","rippleColor","borderRadius","elevation","styles","container","accessibilityTraits","accessibilityComponentType","accessibilityRole","borderless","onPress","size","name","direction","I18nManager","isRTL","accessibilityLabel","TextInput","input","placeholderTextColor","selectionColor","primary","underlineColorAndroid","returnKeyType","keyboardAppearance","disabled","StyleSheet","create","flexDirection","alignItems","flex","fontSize","paddingLeft","alignSelf","textAlign","minWidth"],"sources":["Searchbar.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  TextInput,\n  I18nManager,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\n\nimport color from 'color';\nimport IconButton from './IconButton';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport type { IconSource } from './Icon';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\n\ntype Props = React.ComponentPropsWithRef<typeof TextInput> & {\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  clearAccessibilityLabel?: string;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  searchAccessibilityLabel?: string;\n  /**\n   * Hint text shown when the input is empty.\n   */\n  placeholder?: string;\n  /**\n   * The value of the text input.\n   */\n  value: string;\n  /**\n   * Icon name for the left icon button (see `onIconPress`).\n   */\n  icon?: IconSource;\n  /**\n   * Callback that is called when the text input's text changes.\n   */\n  onChangeText?: (query: string) => void;\n  /**\n   * Callback to execute if we want the left icon to act as button.\n   */\n  onIconPress?: () => void;\n  /**\n   * Set style of the TextInput component inside the searchbar\n   */\n  inputStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Custom color for icon, default will be derived from theme\n   */\n  iconColor?: string;\n  /**\n   * Custom icon for clear button, default will be icon close\n   */\n  clearIcon?: IconSource;\n};\n\ntype TextInputHandles = Pick<\n  TextInput,\n  'setNativeProps' | 'isFocused' | 'clear' | 'blur' | 'focus'\n>;\n\n/**\n * Searchbar is a simple input box where users can type search queries.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/searchbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Searchbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [searchQuery, setSearchQuery] = React.useState('');\n *\n *   const onChangeSearch = query => setSearchQuery(query);\n *\n *   return (\n *     <Searchbar\n *       placeholder=\"Search\"\n *       onChangeText={onChangeSearch}\n *       value={searchQuery}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n\n * ```\n */\nconst Searchbar = React.forwardRef<TextInputHandles, Props>(\n  (\n    {\n      clearAccessibilityLabel = 'clear',\n      clearIcon,\n      icon,\n      iconColor: customIconColor,\n      inputStyle,\n      onIconPress,\n      placeholder,\n      searchAccessibilityLabel = 'search',\n      style,\n      theme,\n      value,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const root = React.useRef<TextInput>(null);\n\n    React.useImperativeHandle(ref, () => ({\n      // @ts-ignore\n      focus: root.current?.focus,\n      // @ts-ignore\n      clear: root.current?.clear,\n      setNativeProps: (args: Object) => root.current?.setNativeProps(args),\n      // @ts-ignore\n      isFocused: root.current?.isFocused,\n      // @ts-ignore\n      blur: root.current?.blur,\n    }));\n\n    const handleClearPress = () => {\n      root.current?.clear();\n      rest.onChangeText?.('');\n    };\n\n    const { colors, roundness, dark, fonts } = theme;\n    const textColor = colors.text;\n    const font = fonts.regular;\n    const iconColor =\n      customIconColor ||\n      (dark ? textColor : color(textColor).alpha(0.54).rgb().string());\n    const rippleColor = color(textColor).alpha(0.32).rgb().string();\n\n    return (\n      <Surface\n        style={[\n          { borderRadius: roundness, elevation: 4 },\n          styles.container,\n          style,\n        ]}\n      >\n        <IconButton\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          borderless\n          rippleColor={rippleColor}\n          onPress={onIconPress}\n          color={iconColor}\n          icon={\n            icon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"magnify\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          accessibilityLabel={searchAccessibilityLabel}\n        />\n        <TextInput\n          style={[styles.input, { color: textColor, ...font }, inputStyle]}\n          placeholder={placeholder || ''}\n          placeholderTextColor={colors.placeholder}\n          selectionColor={colors.primary}\n          underlineColorAndroid=\"transparent\"\n          returnKeyType=\"search\"\n          keyboardAppearance={dark ? 'dark' : 'light'}\n          accessibilityTraits=\"search\"\n          accessibilityRole=\"search\"\n          ref={root}\n          value={value}\n          {...rest}\n        />\n        <IconButton\n          borderless\n          disabled={!value}\n          accessibilityLabel={clearAccessibilityLabel}\n          color={value ? iconColor : 'rgba(255, 255, 255, 0)'}\n          rippleColor={rippleColor}\n          onPress={handleClearPress}\n          icon={\n            clearIcon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"close\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n        />\n      </Surface>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0,\n  },\n});\n\nexport default withTheme(Searchbar);\n"]},"metadata":{},"sourceType":"module"}