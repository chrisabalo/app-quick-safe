{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport Icon from \"./Icon\";\nimport MaterialCommunityIcon from \"./MaterialCommunityIcon\";\nimport Surface from \"./Surface\";\nimport Text from \"./Typography/Text\";\nimport TouchableRipple from \"./TouchableRipple/TouchableRipple\";\nimport { withTheme } from \"../core/theming\";\nimport { black, white } from \"../styles/colors\";\n\nvar Chip = function Chip(_ref) {\n  var _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? 'flat' : _ref$mode,\n    children = _ref.children,\n    icon = _ref.icon,\n    avatar = _ref.avatar,\n    _ref$selected = _ref.selected,\n    selected = _ref$selected === void 0 ? false : _ref$selected,\n    _ref$disabled = _ref.disabled,\n    disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n    accessibilityLabel = _ref.accessibilityLabel,\n    _ref$closeIconAccessi = _ref.closeIconAccessibilityLabel,\n    closeIconAccessibilityLabel = _ref$closeIconAccessi === void 0 ? 'Close' : _ref$closeIconAccessi,\n    onPress = _ref.onPress,\n    onLongPress = _ref.onLongPress,\n    onClose = _ref.onClose,\n    textStyle = _ref.textStyle,\n    style = _ref.style,\n    theme = _ref.theme,\n    testID = _ref.testID,\n    selectedColor = _ref.selectedColor,\n    ellipsizeMode = _ref.ellipsizeMode,\n    rest = _objectWithoutProperties(_ref, [\"mode\", \"children\", \"icon\", \"avatar\", \"selected\", \"disabled\", \"accessibilityLabel\", \"closeIconAccessibilityLabel\", \"onPress\", \"onLongPress\", \"onClose\", \"textStyle\", \"style\", \"theme\", \"testID\", \"selectedColor\", \"ellipsizeMode\"]);\n  var _React$useRef = React.useRef(new Animated.Value(0)),\n    elevation = _React$useRef.current;\n  var handlePressIn = function handlePressIn() {\n    var scale = theme.animation.scale;\n    Animated.timing(elevation, {\n      toValue: 4,\n      duration: 200 * scale,\n      useNativeDriver: true\n    }).start();\n  };\n  var handlePressOut = function handlePressOut() {\n    var scale = theme.animation.scale;\n    Animated.timing(elevation, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true\n    }).start();\n  };\n  var dark = theme.dark,\n    colors = theme.colors;\n  var _ref2 = StyleSheet.flatten(style) || {},\n    _ref2$backgroundColor = _ref2.backgroundColor,\n    backgroundColor = _ref2$backgroundColor === void 0 ? mode === 'outlined' ? colors.surface : dark ? '#383838' : '#ebebeb' : _ref2$backgroundColor,\n    _ref2$borderRadius = _ref2.borderRadius,\n    borderRadius = _ref2$borderRadius === void 0 ? 16 : _ref2$borderRadius;\n  var borderColor = mode === 'outlined' ? color(selectedColor !== undefined ? selectedColor : color(dark ? white : black)).alpha(0.29).rgb().string() : backgroundColor;\n  var textColor = disabled ? colors.disabled : color(selectedColor !== undefined ? selectedColor : colors.text).alpha(0.87).rgb().string();\n  var iconColor = disabled ? colors.disabled : color(selectedColor !== undefined ? selectedColor : colors.text).alpha(0.54).rgb().string();\n  var selectedBackgroundColor = (dark ? color(backgroundColor).lighten(mode === 'outlined' ? 0.2 : 0.4) : color(backgroundColor).darken(mode === 'outlined' ? 0.08 : 0.2)).rgb().string();\n  var underlayColor = selectedColor ? color(selectedColor).fade(0.5).rgb().string() : selectedBackgroundColor;\n  var accessibilityTraits = ['button'];\n  var accessibilityState = {\n    selected: selected,\n    disabled: disabled\n  };\n  if (selected) {\n    accessibilityTraits.push('selected');\n  }\n  if (disabled) {\n    accessibilityTraits.push('disabled');\n  }\n  return React.createElement(Surface, _extends({\n    style: [styles.container, {\n      elevation: Platform.OS === 'android' ? elevation : 0,\n      backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n      borderColor: borderColor,\n      borderRadius: borderRadius\n    }, style]\n  }, rest), React.createElement(TouchableRipple, {\n    borderless: true,\n    delayPressIn: 0,\n    style: {\n      borderRadius: borderRadius\n    },\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    underlayColor: underlayColor,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityTraits: accessibilityTraits,\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: accessibilityState,\n    testID: testID\n  }, React.createElement(View, {\n    style: [styles.content, {\n      paddingRight: onClose ? 32 : 4\n    }]\n  }, avatar && !icon ? React.createElement(View, {\n    style: [styles.avatarWrapper, disabled && {\n      opacity: 0.26\n    }]\n  }, React.isValidElement(avatar) ? React.cloneElement(avatar, {\n    style: [styles.avatar, avatar.props.style]\n  }) : avatar) : null, icon || selected ? React.createElement(View, {\n    style: [styles.icon, avatar ? [styles.avatar, styles.avatarSelected] : null]\n  }, icon ? React.createElement(Icon, {\n    source: icon,\n    color: avatar ? white : iconColor,\n    size: 18\n  }) : React.createElement(MaterialCommunityIcon, {\n    name: \"check\",\n    color: avatar ? white : iconColor,\n    size: 18,\n    direction: \"ltr\"\n  })) : null, React.createElement(Text, {\n    numberOfLines: 1,\n    style: [styles.text, _objectSpread(_objectSpread({}, theme.fonts.regular), {}, {\n      color: textColor,\n      marginRight: onClose ? 0 : 8,\n      marginLeft: avatar || icon || selected ? 4 : 8\n    }), textStyle],\n    ellipsizeMode: ellipsizeMode\n  }, children))), onClose ? React.createElement(View, {\n    style: styles.closeButtonStyle\n  }, React.createElement(TouchableWithoutFeedback, {\n    onPress: onClose,\n    accessibilityTraits: \"button\",\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityLabel: closeIconAccessibilityLabel\n  }, React.createElement(View, {\n    style: [styles.icon, styles.closeIcon]\n  }, React.createElement(MaterialCommunityIcon, {\n    name: \"close-circle\",\n    size: 16,\n    color: iconColor,\n    direction: \"ltr\"\n  })))) : null);\n};\nvar styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: 'row'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative'\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center'\n  },\n  closeIcon: {\n    marginRight: 4\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12\n  },\n  avatarWrapper: {\n    marginRight: 4\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)'\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default withTheme(Chip);","map":{"version":3,"mappings":"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","names":["React","color","Icon","MaterialCommunityIcon","Surface","Text","TouchableRipple","withTheme","black","white","Chip","_ref","mode","children","icon","avatar","selected","disabled","accessibilityLabel","closeIconAccessibilityLabel","onPress","onLongPress","onClose","textStyle","style","theme","testID","selectedColor","ellipsizeMode","rest","useRef","Animated","Value","elevation","current","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","dark","colors","StyleSheet","flatten","backgroundColor","surface","borderRadius","borderColor","undefined","alpha","rgb","string","textColor","text","iconColor","selectedBackgroundColor","lighten","darken","underlayColor","fade","accessibilityTraits","accessibilityState","push","styles","container","Platform","OS","borderless","delayPressIn","onPressIn","onPressOut","accessibilityComponentType","accessibilityRole","View","content","paddingRight","avatarWrapper","opacity","isValidElement","cloneElement","props","avatarSelected","source","size","name","direction","numberOfLines","fonts","regular","marginRight","marginLeft","closeButtonStyle","TouchableWithoutFeedback","closeIcon","create","borderWidth","hairlineWidth","borderStyle","flexDirection","alignItems","paddingLeft","position","padding","alignSelf","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","top","left","right","justifyContent"],"sources":["Chip.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  AccessibilityTrait,\n  Animated,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport type { IconSource } from './Icon';\nimport Icon from './Icon';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport type { EllipsizeProp } from '../types';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   */\n  selectedColor?: string;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility label for the close icon. This is read by the screen reader when the user taps the close icon.\n   */\n  closeIconAccessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: any;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n  /**\n   * Ellipsize Mode for the children text\n   */\n  ellipsizeMode?: EllipsizeProp;\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Chip = ({\n  mode = 'flat',\n  children,\n  icon,\n  avatar,\n  selected = false,\n  disabled = false,\n  accessibilityLabel,\n  closeIconAccessibilityLabel = 'Close',\n  onPress,\n  onLongPress,\n  onClose,\n  textStyle,\n  style,\n  theme,\n  testID,\n  selectedColor,\n  ellipsizeMode,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n\n  const handlePressIn = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: 4,\n      duration: 200 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const { dark, colors } = theme;\n\n  const {\n    backgroundColor = mode === 'outlined'\n      ? colors.surface\n      : dark\n      ? '#383838'\n      : '#ebebeb',\n    borderRadius = 16,\n  } = StyleSheet.flatten(style) || {};\n\n  const borderColor =\n    mode === 'outlined'\n      ? color(\n          selectedColor !== undefined\n            ? selectedColor\n            : color(dark ? white : black)\n        )\n          .alpha(0.29)\n          .rgb()\n          .string()\n      : backgroundColor;\n  const textColor = disabled\n    ? colors.disabled\n    : color(selectedColor !== undefined ? selectedColor : colors.text)\n        .alpha(0.87)\n        .rgb()\n        .string();\n  const iconColor = disabled\n    ? colors.disabled\n    : color(selectedColor !== undefined ? selectedColor : colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n  const selectedBackgroundColor = (dark\n    ? color(backgroundColor).lighten(mode === 'outlined' ? 0.2 : 0.4)\n    : color(backgroundColor).darken(mode === 'outlined' ? 0.08 : 0.2)\n  )\n    .rgb()\n    .string();\n\n  const underlayColor = selectedColor\n    ? color(selectedColor).fade(0.5).rgb().string()\n    : selectedBackgroundColor;\n\n  const accessibilityTraits: AccessibilityTrait[] = ['button'];\n  const accessibilityState: AccessibilityState = {\n    selected,\n    disabled,\n  };\n\n  if (selected) {\n    accessibilityTraits.push('selected');\n  }\n\n  if (disabled) {\n    accessibilityTraits.push('disabled');\n  }\n\n  return (\n    <Surface\n      style={\n        [\n          styles.container,\n          {\n            elevation: Platform.OS === 'android' ? elevation : 0,\n            backgroundColor: selected\n              ? selectedBackgroundColor\n              : backgroundColor,\n            borderColor,\n            borderRadius,\n          },\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      {...rest}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        style={{ borderRadius }}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        underlayColor={underlayColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityTraits={accessibilityTraits}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={accessibilityState}\n        testID={testID}\n      >\n        <View style={[styles.content, { paddingRight: onClose ? 32 : 4 }]}>\n          {avatar && !icon ? (\n            <View style={[styles.avatarWrapper, disabled && { opacity: 0.26 }]}>\n              {React.isValidElement(avatar)\n                ? React.cloneElement(avatar, {\n                    style: [styles.avatar, avatar.props.style],\n                  })\n                : avatar}\n            </View>\n          ) : null}\n          {icon || selected ? (\n            <View\n              style={[\n                styles.icon,\n                avatar ? [styles.avatar, styles.avatarSelected] : null,\n              ]}\n            >\n              {icon ? (\n                <Icon\n                  source={icon}\n                  color={avatar ? white : iconColor}\n                  size={18}\n                />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"check\"\n                  color={avatar ? white : iconColor}\n                  size={18}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          ) : null}\n          <Text\n            numberOfLines={1}\n            style={[\n              styles.text,\n              {\n                ...theme.fonts.regular,\n                color: textColor,\n                marginRight: onClose ? 0 : 8,\n                marginLeft: avatar || icon || selected ? 4 : 8,\n              },\n              textStyle,\n            ]}\n            ellipsizeMode={ellipsizeMode}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n      {onClose ? (\n        <View style={styles.closeButtonStyle}>\n          <TouchableWithoutFeedback\n            onPress={onClose}\n            accessibilityTraits=\"button\"\n            accessibilityComponentType=\"button\"\n            accessibilityRole=\"button\"\n            accessibilityLabel={closeIconAccessibilityLabel}\n          >\n            <View style={[styles.icon, styles.closeIcon]}>\n              <MaterialCommunityIcon\n                name=\"close-circle\"\n                size={16}\n                color={iconColor}\n                direction=\"ltr\"\n              />\n            </View>\n          </TouchableWithoutFeedback>\n        </View>\n      ) : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: 'row',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center',\n  },\n  closeIcon: {\n    marginRight: 4,\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(Chip);\n"]},"metadata":{},"sourceType":"module"}