{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport React from 'react';\nimport TextInputIcon, { IconAdornment } from \"./TextInputIcon\";\nimport TextInputAffix, { AffixAdornment } from \"./TextInputAffix\";\nimport { ADORNMENT_OFFSET, OUTLINED_INPUT_OFFSET } from \"../constants\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { AdornmentSide, AdornmentType, InputMode } from \"./enums\";\nexport function getAdornmentConfig(_ref) {\n  var left = _ref.left,\n    right = _ref.right;\n  var adornmentConfig = [];\n  if (left || right) {\n    [{\n      side: AdornmentSide.Left,\n      adornment: left\n    }, {\n      side: AdornmentSide.Right,\n      adornment: right\n    }].forEach(function (_ref2) {\n      var side = _ref2.side,\n        adornment = _ref2.adornment;\n      if (adornment && React.isValidElement(adornment)) {\n        var type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side: side,\n          type: type\n        });\n      }\n    });\n  }\n  return adornmentConfig;\n}\nexport function getAdornmentStyleAdjustmentForNativeInput(_ref3) {\n  var adornmentConfig = _ref3.adornmentConfig,\n    leftAffixWidth = _ref3.leftAffixWidth,\n    rightAffixWidth = _ref3.rightAffixWidth,\n    _ref3$inputOffset = _ref3.inputOffset,\n    inputOffset = _ref3$inputOffset === void 0 ? 0 : _ref3$inputOffset,\n    mode = _ref3.mode;\n  if (adornmentConfig.length) {\n    var adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(function (_ref4) {\n      var _ref6;\n      var type = _ref4.type,\n        side = _ref4.side;\n      var isWeb = Platform.OS !== 'ios' && Platform.OS !== 'android';\n      var isLeftSide = side === AdornmentSide.Left;\n      var inputModeAdornemntOffset = mode === InputMode.Outlined ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET : ADORNMENT_OFFSET;\n      var offset = (isLeftSide ? leftAffixWidth : rightAffixWidth) + inputModeAdornemntOffset;\n      var paddingKey = \"padding\".concat(captalize(side));\n      if (isWeb) return _defineProperty2({}, paddingKey, offset);\n      var isAffix = type === AdornmentType.Affix;\n      var marginKey = \"margin\".concat(captalize(side));\n      return _ref6 = {}, _defineProperty2(_ref6, marginKey, isAffix ? 0 : offset), _defineProperty2(_ref6, paddingKey, isAffix ? offset : inputOffset), _ref6;\n    });\n    var allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(function (mergedStyles, currentStyle) {\n      return _objectSpread(_objectSpread({}, mergedStyles), currentStyle);\n    }, {});\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\nvar captalize = function captalize(text) {\n  return text.charAt(0).toUpperCase() + text.slice(1);\n};\nvar TextInputAdornment = function TextInputAdornment(_ref7) {\n  var adornmentConfig = _ref7.adornmentConfig,\n    left = _ref7.left,\n    right = _ref7.right,\n    onAffixChange = _ref7.onAffixChange,\n    textStyle = _ref7.textStyle,\n    visible = _ref7.visible,\n    topPosition = _ref7.topPosition,\n    isTextInputFocused = _ref7.isTextInputFocused,\n    forceFocus = _ref7.forceFocus;\n  if (adornmentConfig.length) {\n    return React.createElement(React.Fragment, null, adornmentConfig.map(function (_ref8) {\n      var type = _ref8.type,\n        side = _ref8.side;\n      var inputAdornmentComponent;\n      if (side === AdornmentSide.Left) {\n        inputAdornmentComponent = left;\n      } else if (side === AdornmentSide.Right) {\n        inputAdornmentComponent = right;\n      }\n      var commonProps = {\n        key: side,\n        side: side,\n        testID: \"\".concat(side, \"-\").concat(type, \"-adornment\"),\n        isTextInputFocused: isTextInputFocused\n      };\n      if (type === AdornmentType.Icon) {\n        return React.createElement(IconAdornment, _extends({}, commonProps, {\n          icon: inputAdornmentComponent,\n          topPosition: topPosition[AdornmentType.Icon],\n          forceFocus: forceFocus\n        }));\n      } else if (type === AdornmentType.Affix) {\n        return React.createElement(AffixAdornment, _extends({}, commonProps, {\n          topPosition: topPosition[AdornmentType.Affix][side],\n          affix: inputAdornmentComponent,\n          textStyle: textStyle,\n          onLayout: onAffixChange[side],\n          visible: visible\n        }));\n      } else {\n        return null;\n      }\n    }));\n  } else {\n    return null;\n  }\n};\nexport default TextInputAdornment;","map":{"version":3,"mappings":"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","names":["React","TextInputIcon","IconAdornment","TextInputAffix","AffixAdornment","ADORNMENT_OFFSET","OUTLINED_INPUT_OFFSET","AdornmentSide","AdornmentType","InputMode","getAdornmentConfig","left","right","adornmentConfig","side","Left","adornment","Right","forEach","isValidElement","type","Affix","Icon","push","getAdornmentStyleAdjustmentForNativeInput","leftAffixWidth","rightAffixWidth","inputOffset","mode","length","adornmentStyleAdjustmentForNativeInput","map","isWeb","Platform","OS","isLeftSide","inputModeAdornemntOffset","Outlined","offset","paddingKey","captalize","isAffix","marginKey","allStyleAdjustmentsMerged","reduce","mergedStyles","currentStyle","text","charAt","toUpperCase","slice","TextInputAdornment","onAffixChange","textStyle","visible","topPosition","isTextInputFocused","forceFocus","inputAdornmentComponent","commonProps","key","testID","icon","affix","onLayout"],"sources":["TextInputAdornment.tsx"],"sourcesContent":["import React from 'react';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport { ADORNMENT_OFFSET, OUTLINED_INPUT_OFFSET } from '../constants';\nimport {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n  Platform,\n} from 'react-native';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  inputOffset = 0,\n  mode,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n  mode?: 'outlined' | 'flat';\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isWeb = Platform.OS !== 'ios' && Platform.OS !== 'android';\n        const isLeftSide = side === AdornmentSide.Left;\n        const inputModeAdornemntOffset =\n          mode === InputMode.Outlined\n            ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET\n            : ADORNMENT_OFFSET;\n        const offset =\n          (isLeftSide ? leftAffixWidth : rightAffixWidth) +\n          inputModeAdornemntOffset;\n        const paddingKey = `padding${captalize(side)}`;\n\n        if (isWeb) return { [paddingKey]: offset };\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(\n      (mergedStyles, currentStyle) => {\n        return {\n          ...mergedStyles,\n          ...currentStyle,\n        };\n      },\n      {}\n    );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            key: side,\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"]},"metadata":{},"sourceType":"module"}