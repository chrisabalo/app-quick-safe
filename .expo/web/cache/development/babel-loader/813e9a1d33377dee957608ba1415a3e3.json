{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport color from 'color';\nimport TextInputAdornment, { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from \"./Adornment/TextInputAdornment\";\nimport InputLabel from \"./Label/InputLabel\";\nimport LabelBackground from \"./Label/LabelBackground\";\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, ADORNMENT_OFFSET } from \"./constants\";\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingOut, interpolatePlaceholder, calculateOutlinedIconAndAffixTopPosition } from \"./helpers\";\nimport { AdornmentType, AdornmentSide } from \"./Adornment/enums\";\nvar OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nvar LABEL_PADDING_TOP = 8;\nvar MIN_HEIGHT = 64;\nvar MIN_DENSE_HEIGHT = 48;\nvar INPUT_PADDING_HORIZONTAL = 14;\nvar TextInputOutlined = function (_React$Component) {\n  _inherits(TextInputOutlined, _React$Component);\n  var _super = _createSuper(TextInputOutlined);\n  function TextInputOutlined() {\n    _classCallCheck(this, TextInputOutlined);\n    return _super.apply(this, arguments);\n  }\n  _createClass(TextInputOutlined, [{\n    key: \"render\",\n    value: function render() {\n      var _affixTopPosition, _onAffixChange, _topPosition;\n      var _this$props = this.props,\n        disabled = _this$props.disabled,\n        editable = _this$props.editable,\n        label = _this$props.label,\n        error = _this$props.error,\n        selectionColor = _this$props.selectionColor,\n        underlineColor = _this$props.underlineColor,\n        dense = _this$props.dense,\n        style = _this$props.style,\n        theme = _this$props.theme,\n        render = _this$props.render,\n        multiline = _this$props.multiline,\n        parentState = _this$props.parentState,\n        innerRef = _this$props.innerRef,\n        onFocus = _this$props.onFocus,\n        forceFocus = _this$props.forceFocus,\n        onBlur = _this$props.onBlur,\n        onChangeText = _this$props.onChangeText,\n        onLayoutAnimatedText = _this$props.onLayoutAnimatedText,\n        onLeftAffixLayoutChange = _this$props.onLeftAffixLayoutChange,\n        onRightAffixLayoutChange = _this$props.onRightAffixLayoutChange,\n        left = _this$props.left,\n        right = _this$props.right,\n        placeholderTextColor = _this$props.placeholderTextColor,\n        rest = _objectWithoutProperties(_this$props, [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\"]);\n      var adornmentConfig = getAdornmentConfig({\n        left: left,\n        right: right\n      });\n      var colors = theme.colors,\n        fonts = theme.fonts;\n      var font = fonts.regular;\n      var hasActiveOutline = parentState.focused || error;\n      var _ref = StyleSheet.flatten(style) || {},\n        fontSizeStyle = _ref.fontSize,\n        fontWeight = _ref.fontWeight,\n        height = _ref.height,\n        _ref$backgroundColor = _ref.backgroundColor,\n        backgroundColor = _ref$backgroundColor === void 0 ? colors.background : _ref$backgroundColor,\n        viewStyle = _objectWithoutProperties(_ref, [\"fontSize\", \"fontWeight\", \"height\", \"backgroundColor\"]);\n      var fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n      var inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n      if (disabled) {\n        inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n        placeholderColor = outlineColor = colors.disabled;\n      } else {\n        inputTextColor = colors.text;\n        activeColor = error ? colors.error : colors.primary;\n        placeholderColor = outlineColor = colors.placeholder;\n        errorColor = colors.error;\n      }\n      var labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n      var fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n      var labelWidth = parentState.labelLayout.width;\n      var labelHeight = parentState.labelLayout.height;\n      var labelHalfWidth = labelWidth / 2;\n      var labelHalfHeight = labelHeight / 2;\n      var baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n      var labelTranslationXOffset = 0;\n      var isAdornmentLeftIcon = adornmentConfig.some(function (_ref2) {\n        var side = _ref2.side,\n          type = _ref2.type;\n        return side === AdornmentSide.Left && type === AdornmentType.Icon;\n      });\n      if (isAdornmentLeftIcon) {\n        labelTranslationXOffset = (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n      }\n      var minInputHeight = (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n      var inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n      var topPosition = calculateLabelTopPosition(labelHeight, inputHeight, LABEL_PADDING_TOP);\n      if (height && typeof height !== 'number') {\n        console.warn('Currently we support only numbers in height prop');\n      }\n      var paddingSettings = {\n        height: height ? +height : null,\n        labelHalfHeight: labelHalfHeight,\n        offset: LABEL_PADDING_TOP,\n        multiline: multiline ? multiline : null,\n        dense: dense ? dense : null,\n        topPosition: topPosition,\n        fontSize: fontSize,\n        label: label,\n        scale: fontScale,\n        isAndroid: Platform.OS === 'android',\n        styles: StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n      };\n      var pad = calculatePadding(paddingSettings);\n      var paddingOut = adjustPaddingOut(_objectSpread(_objectSpread({}, paddingSettings), {}, {\n        pad: pad\n      }));\n      var baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n      var placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n      var labelProps = {\n        label: label,\n        onLayoutAnimatedText: onLayoutAnimatedText,\n        placeholderOpacity: placeholderOpacity,\n        error: error,\n        placeholderStyle: styles.placeholder,\n        baseLabelTranslateY: baseLabelTranslateY,\n        baseLabelTranslateX: baseLabelTranslateX,\n        font: font,\n        fontSize: fontSize,\n        fontWeight: fontWeight,\n        labelScale: labelScale,\n        wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n        topPosition: topPosition,\n        hasActiveOutline: hasActiveOutline,\n        activeColor: activeColor,\n        placeholderColor: placeholderColor,\n        backgroundColor: backgroundColor,\n        errorColor: errorColor,\n        labelTranslationXOffset: labelTranslationXOffset\n      };\n      var minHeight = height || (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT);\n      var leftLayout = parentState.leftLayout,\n        rightLayout = parentState.rightLayout;\n      var leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n        height: minHeight,\n        affixHeight: leftLayout.height || 0,\n        labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n      });\n      var rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n        height: minHeight,\n        affixHeight: rightLayout.height || 0,\n        labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n      });\n      var iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n        height: minHeight,\n        affixHeight: ADORNMENT_SIZE,\n        labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n      });\n      var rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n      var leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n      var adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n        adornmentConfig: adornmentConfig,\n        rightAffixWidth: rightAffixWidth,\n        leftAffixWidth: leftAffixWidth,\n        mode: 'outlined'\n      });\n      var affixTopPosition = (_affixTopPosition = {}, _defineProperty2(_affixTopPosition, AdornmentSide.Left, leftAffixTopPosition), _defineProperty2(_affixTopPosition, AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n      var onAffixChange = (_onAffixChange = {}, _defineProperty2(_onAffixChange, AdornmentSide.Left, onLeftAffixLayoutChange), _defineProperty2(_onAffixChange, AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n      var adornmentProps = {\n        adornmentConfig: adornmentConfig,\n        forceFocus: forceFocus,\n        topPosition: (_topPosition = {}, _defineProperty2(_topPosition, AdornmentType.Icon, iconTopPosition), _defineProperty2(_topPosition, AdornmentType.Affix, affixTopPosition), _topPosition),\n        onAffixChange: onAffixChange,\n        isTextInputFocused: parentState.focused\n      };\n      if (adornmentConfig.length) {\n        adornmentProps = _objectSpread(_objectSpread({}, adornmentProps), {}, {\n          left: left,\n          right: right,\n          textStyle: _objectSpread(_objectSpread({}, font), {}, {\n            fontSize: fontSize,\n            fontWeight: fontWeight\n          }),\n          visible: this.props.parentState.labeled\n        });\n      }\n      return React.createElement(View, {\n        style: viewStyle\n      }, React.createElement(View, null, React.createElement(Outline, {\n        theme: theme,\n        hasActiveOutline: hasActiveOutline,\n        activeColor: activeColor,\n        outlineColor: outlineColor,\n        backgroundColor: backgroundColor\n      }), React.createElement(View, {\n        style: {\n          paddingTop: LABEL_PADDING_TOP,\n          paddingBottom: 0,\n          minHeight: minHeight\n        }\n      }, React.createElement(InputLabel, {\n        parentState: parentState,\n        labelProps: labelProps,\n        labelBackground: LabelBackground\n      }), render === null || render === void 0 ? void 0 : render(_objectSpread(_objectSpread({}, rest), {}, {\n        ref: innerRef,\n        onChangeText: onChangeText,\n        placeholder: label ? parentState.placeholder : this.props.placeholder,\n        placeholderTextColor: placeholderTextColor || placeholderColor,\n        editable: !disabled && editable,\n        selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        underlineColorAndroid: 'transparent',\n        multiline: multiline,\n        style: [styles.input, !multiline || multiline && height ? {\n          height: inputHeight\n        } : {}, paddingOut, _objectSpread(_objectSpread({}, font), {}, {\n          fontSize: fontSize,\n          fontWeight: fontWeight,\n          color: inputTextColor,\n          textAlignVertical: multiline ? 'top' : 'center'\n        }), adornmentStyleAdjustmentForNativeInput]\n      }))), React.createElement(TextInputAdornment, adornmentProps)));\n    }\n  }]);\n  return TextInputOutlined;\n}(React.Component);\n_defineProperty(TextInputOutlined, \"defaultProps\", {\n  disabled: false,\n  error: false,\n  multiline: false,\n  editable: true,\n  render: function render(props) {\n    return React.createElement(NativeTextInput, props);\n  }\n});\nexport default TextInputOutlined;\nvar Outline = function Outline(_ref3) {\n  var theme = _ref3.theme,\n    hasActiveOutline = _ref3.hasActiveOutline,\n    activeColor = _ref3.activeColor,\n    outlineColor = _ref3.outlineColor,\n    backgroundColor = _ref3.backgroundColor;\n  return React.createElement(View, {\n    pointerEvents: \"none\",\n    style: [styles.outline,\n    {\n      backgroundColor: backgroundColor,\n      borderRadius: theme.roundness,\n      borderWidth: hasActiveOutline ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }]\n  });\n};\nvar styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"mappings":"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","names":["React","color","TextInputAdornment","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","InputLabel","LabelBackground","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","ADORNMENT_SIZE","ADORNMENT_OFFSET","calculateLabelTopPosition","calculateInputHeight","calculatePadding","adjustPaddingOut","interpolatePlaceholder","calculateOutlinedIconAndAffixTopPosition","AdornmentType","AdornmentSide","OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","props","disabled","_this$props","editable","label","error","selectionColor","underlineColor","dense","style","theme","render","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","rest","adornmentConfig","colors","fonts","font","regular","hasActiveOutline","focused","StyleSheet","flatten","fontSizeStyle","_ref","fontSize","fontWeight","height","backgroundColor","background","viewStyle","inputTextColor","activeColor","outlineColor","placeholderColor","errorColor","text","alpha","rgb","string","primary","placeholder","labelScale","fontScale","labelWidth","labelLayout","width","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","isRTL","labelTranslationXOffset","isAdornmentLeftIcon","some","side","type","Left","Icon","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","isAndroid","Platform","OS","styles","inputOutlinedDense","inputOutlined","pad","paddingOut","baseLabelTranslateY","placeholderOpacity","labeled","measured","labelProps","placeholderStyle","wiggleOffsetX","minHeight","leftLayout","rightLayout","leftAffixTopPosition","affixHeight","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","Right","onAffixChange","adornmentProps","Affix","isTextInputFocused","length","textStyle","visible","View","Outline","paddingTop","paddingBottom","labelBackground","ref","underlineColorAndroid","input","textAlignVertical","Component","NativeTextInput","pointerEvents","outline","borderRadius","roundness","borderWidth","borderColor","create","position","paddingHorizontal","top","bottom","flexGrow","margin","textAlign","zIndex"],"sources":["TextInputOutlined.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  ADORNMENT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n} from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nclass TextInputOutlined extends React.Component<ChildTextInputProps> {\n  static defaultProps = {\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  render() {\n    const {\n      disabled,\n      editable,\n      label,\n      error,\n      selectionColor,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      underlineColor,\n      dense,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      forceFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      onLeftAffixLayoutChange,\n      onRightAffixLayoutChange,\n      left,\n      right,\n      placeholderTextColor,\n      ...rest\n    } = this.props;\n\n    const adornmentConfig = getAdornmentConfig({ left, right });\n\n    const { colors, fonts } = theme;\n    const font = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n\n    const {\n      fontSize: fontSizeStyle,\n      fontWeight,\n      height,\n      backgroundColor = colors.background,\n      ...viewStyle\n    } = (StyleSheet.flatten(style) || {}) as TextStyle;\n    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n    let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n    if (disabled) {\n      inputTextColor = activeColor = color(colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n      placeholderColor = outlineColor = colors.disabled;\n    } else {\n      inputTextColor = colors.text;\n      activeColor = error ? colors.error : colors.primary;\n      placeholderColor = outlineColor = colors.placeholder;\n      errorColor = colors.error;\n    }\n\n    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n    const labelWidth = parentState.labelLayout.width;\n    const labelHeight = parentState.labelLayout.height;\n    const labelHalfWidth = labelWidth / 2;\n    const labelHalfHeight = labelHeight / 2;\n\n    const baseLabelTranslateX =\n      (I18nManager.isRTL ? 1 : -1) *\n      (labelHalfWidth -\n        (labelScale * labelWidth) / 2 -\n        (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n    let labelTranslationXOffset = 0;\n    const isAdornmentLeftIcon = adornmentConfig.some(\n      ({ side, type }) =>\n        side === AdornmentSide.Left && type === AdornmentType.Icon\n    );\n    if (isAdornmentLeftIcon) {\n      labelTranslationXOffset =\n        (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n    }\n\n    const minInputHeight =\n      (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n    const inputHeight = calculateInputHeight(\n      labelHeight,\n      height,\n      minInputHeight\n    );\n\n    const topPosition = calculateLabelTopPosition(\n      labelHeight,\n      inputHeight,\n      LABEL_PADDING_TOP\n    );\n\n    if (height && typeof height !== 'number') {\n      // eslint-disable-next-line\n      console.warn('Currently we support only numbers in height prop');\n    }\n\n    const paddingSettings = {\n      height: height ? +height : null,\n      labelHalfHeight,\n      offset: LABEL_PADDING_TOP,\n      multiline: multiline ? multiline : null,\n      dense: dense ? dense : null,\n      topPosition,\n      fontSize,\n      label,\n      scale: fontScale,\n      isAndroid: Platform.OS === 'android',\n      styles: StyleSheet.flatten(\n        dense ? styles.inputOutlinedDense : styles.inputOutlined\n      ) as Padding,\n    };\n\n    const pad = calculatePadding(paddingSettings);\n\n    const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n    const baseLabelTranslateY =\n      -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n    const placeholderOpacity = hasActiveOutline\n      ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n      : parentState.labelLayout.measured\n      ? 1\n      : 0;\n\n    const labelProps = {\n      label,\n      onLayoutAnimatedText,\n      placeholderOpacity,\n      error,\n      placeholderStyle: styles.placeholder,\n      baseLabelTranslateY,\n      baseLabelTranslateX,\n      font,\n      fontSize,\n      fontWeight,\n      labelScale,\n      wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n      topPosition,\n      hasActiveOutline,\n      activeColor,\n      placeholderColor,\n      backgroundColor,\n      errorColor,\n      labelTranslationXOffset,\n    };\n\n    const minHeight = (height ||\n      (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT)) as number;\n\n    const { leftLayout, rightLayout } = parentState;\n\n    const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: leftLayout.height || 0,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n\n    const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: rightLayout.height || 0,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n    const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: ADORNMENT_SIZE,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n\n    const rightAffixWidth = right\n      ? rightLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const leftAffixWidth = left\n      ? leftLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput(\n      {\n        adornmentConfig,\n        rightAffixWidth,\n        leftAffixWidth,\n        mode: 'outlined',\n      }\n    );\n    const affixTopPosition = {\n      [AdornmentSide.Left]: leftAffixTopPosition,\n      [AdornmentSide.Right]: rightAffixTopPosition,\n    };\n    const onAffixChange = {\n      [AdornmentSide.Left]: onLeftAffixLayoutChange,\n      [AdornmentSide.Right]: onRightAffixLayoutChange,\n    };\n\n    let adornmentProps: TextInputAdornmentProps = {\n      adornmentConfig,\n      forceFocus,\n      topPosition: {\n        [AdornmentType.Icon]: iconTopPosition,\n        [AdornmentType.Affix]: affixTopPosition,\n      },\n      onAffixChange,\n      isTextInputFocused: parentState.focused,\n    };\n    if (adornmentConfig.length) {\n      adornmentProps = {\n        ...adornmentProps,\n        left,\n        right,\n        textStyle: { ...font, fontSize, fontWeight },\n        visible: this.props.parentState.labeled,\n      };\n    }\n\n    return (\n      <View style={viewStyle}>\n        {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n        <View>\n          <Outline\n            theme={theme}\n            hasActiveOutline={hasActiveOutline}\n            activeColor={activeColor}\n            outlineColor={outlineColor}\n            backgroundColor={backgroundColor}\n          />\n          <View\n            style={{\n              paddingTop: LABEL_PADDING_TOP,\n              paddingBottom: 0,\n              minHeight,\n            }}\n          >\n            <InputLabel\n              parentState={parentState}\n              labelProps={labelProps}\n              labelBackground={LabelBackground}\n            />\n            {render?.({\n              ...rest,\n              ref: innerRef,\n              onChangeText,\n              placeholder: label\n                ? parentState.placeholder\n                : this.props.placeholder,\n              placeholderTextColor: placeholderTextColor || placeholderColor,\n              editable: !disabled && editable,\n              selectionColor:\n                typeof selectionColor === 'undefined'\n                  ? activeColor\n                  : selectionColor,\n              onFocus,\n              onBlur,\n              underlineColorAndroid: 'transparent',\n              multiline,\n              style: [\n                styles.input,\n                !multiline || (multiline && height)\n                  ? { height: inputHeight }\n                  : {},\n                paddingOut,\n                {\n                  ...font,\n                  fontSize,\n                  fontWeight,\n                  color: inputTextColor,\n                  textAlignVertical: multiline ? 'top' : 'center',\n                },\n                adornmentStyleAdjustmentForNativeInput,\n              ],\n            } as RenderProps)}\n          </View>\n          <TextInputAdornment {...adornmentProps} />\n        </View>\n      </View>\n    );\n  }\n}\n\nexport default TextInputOutlined;\n\ntype OutlineType = {\n  activeColor: string;\n  hasActiveOutline: boolean | undefined;\n  outlineColor: string | undefined;\n  backgroundColor: string | undefined;\n  theme: ReactNativePaper.Theme;\n};\n\nconst Outline = ({\n  theme,\n  hasActiveOutline,\n  activeColor,\n  outlineColor,\n  backgroundColor,\n}: OutlineType) => (\n  <View\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: theme.roundness,\n        borderWidth: hasActiveOutline ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}