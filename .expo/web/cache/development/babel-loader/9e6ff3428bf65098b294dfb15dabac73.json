{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nexport default function useWindowDimensions() {\n  var _React$useState = React.useState(function () {\n      var _Dimensions$get = Dimensions.get('window'),\n        _Dimensions$get$heigh = _Dimensions$get.height,\n        height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh,\n        _Dimensions$get$width = _Dimensions$get.width,\n        width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width;\n      return {\n        height: height,\n        width: width\n      };\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    dimensions = _React$useState2[0],\n    setDimensions = _React$useState2[1];\n  React.useEffect(function () {\n    var onChange = function onChange(_ref) {\n      var window = _ref.window;\n      var width = window.width,\n        height = window.height;\n      setDimensions(function (d) {\n        if (width === d.width && height === d.height) {\n          return d;\n        }\n        return {\n          width: width,\n          height: height\n        };\n      });\n    };\n\n    onChange({\n      window: Dimensions.get('window')\n    });\n    Dimensions.addEventListener('change', onChange);\n    return function () {\n      return Dimensions.removeEventListener('change', onChange);\n    };\n  }, []);\n  return dimensions;\n}","map":{"version":3,"names":["React","useWindowDimensions","useState","Dimensions","get","height","width","dimensions","setDimensions","useEffect","onChange","window","d","addEventListener","removeEventListener"],"sources":["E:/local/app-quick-safe/node_modules/@react-navigation/drawer/src/utils/useWindowDimensions.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ScaledSize, Dimensions } from 'react-native';\n\n// This is similar to the new useWindowDimensions hook in react-native\n// However, we have a custom implementation to support older RN versions\nexport default function useWindowDimensions() {\n  const [dimensions, setDimensions] = React.useState(() => {\n    // `height` and `width` maybe undefined during SSR, so we initialize them\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    return { height, width };\n  });\n\n  React.useEffect(() => {\n    const onChange = ({ window }: { window: ScaledSize }) => {\n      const { width, height } = window;\n\n      setDimensions((d) => {\n        if (width === d.width && height === d.height) {\n          return d;\n        }\n\n        return { width, height };\n      });\n    };\n\n    // We might have missed an update before the listener was added\n    // So make sure to update the dimensions\n    onChange({ window: Dimensions.get('window') });\n\n    Dimensions.addEventListener('change', onChange);\n\n    return () => Dimensions.removeEventListener('change', onChange);\n  }, []);\n\n  return dimensions;\n}\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAC;AAK/B,eAAe,SAASC,mBAAmB,GAAG;EAAA,sBACRD,KAAK,CAACE,QAAQ,CAAC,YAAM;MAAA,sBAErBC,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC;QAAA,wCAAlDC,MAAM;QAANA,MAAM,sCAAG,CAAC;QAAA,wCAAEC,KAAK;QAALA,KAAK,sCAAG,CAAC;MAE7B,OAAO;QAAED,MAAM,EAANA,MAAM;QAAEC,KAAK,EAALA;MAAM,CAAC;IAC1B,CAAC,CAAC;IAAA;IALKC,UAAU;IAAEC,aAAa;EAOhCR,KAAK,CAACS,SAAS,CAAC,YAAM;IACpB,IAAMC,QAAQ,GAAG,SAAXA,QAAQ,OAA2C;MAAA,IAArCC,MAAM,QAANA,MAAM;MAAA,IAChBL,KAAK,GAAaK,MAAM,CAAxBL,KAAK;QAAED,MAAM,GAAKM,MAAM,CAAjBN,MAAM;MAErBG,aAAa,CAAC,UAACI,CAAC,EAAK;QACnB,IAAIN,KAAK,KAAKM,CAAC,CAACN,KAAK,IAAID,MAAM,KAAKO,CAAC,CAACP,MAAM,EAAE;UAC5C,OAAOO,CAAC;QACV;QAEA,OAAO;UAAEN,KAAK,EAALA,KAAK;UAAED,MAAM,EAANA;QAAO,CAAC;MAC1B,CAAC,CAAC;IACJ,CAAC;;IAIDK,QAAQ,CAAC;MAAEC,MAAM,EAAER,UAAU,CAACC,GAAG,CAAC,QAAQ;IAAE,CAAC,CAAC;IAE9CD,UAAU,CAACU,gBAAgB,CAAC,QAAQ,EAAEH,QAAQ,CAAC;IAE/C,OAAO;MAAA,OAAMP,UAAU,CAACW,mBAAmB,CAAC,QAAQ,EAAEJ,QAAQ,CAAC;IAAA;EACjE,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOH,UAAU;AACnB"},"metadata":{},"sourceType":"module"}