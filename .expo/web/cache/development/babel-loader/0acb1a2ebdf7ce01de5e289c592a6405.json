{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport color from 'color';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Icon from \"../Icon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport { withTheme } from \"../../core/theming\";\nimport { black, white } from \"../../styles/colors\";\n\nvar MenuItem = function (_React$Component) {\n  _inherits(MenuItem, _React$Component);\n  var _super = _createSuper(MenuItem);\n  function MenuItem() {\n    _classCallCheck(this, MenuItem);\n    return _super.apply(this, arguments);\n  }\n  _createClass(MenuItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        icon = _this$props.icon,\n        title = _this$props.title,\n        disabled = _this$props.disabled,\n        onPress = _this$props.onPress,\n        theme = _this$props.theme,\n        style = _this$props.style,\n        contentStyle = _this$props.contentStyle,\n        testID = _this$props.testID,\n        titleStyle = _this$props.titleStyle;\n      var disabledColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n      var titleColor = disabled ? disabledColor : color(theme.colors.text).alpha(0.87).rgb().string();\n      var iconColor = disabled ? disabledColor : color(theme.colors.text).alpha(0.54).rgb().string();\n      return React.createElement(TouchableRipple, {\n        style: [styles.container, style],\n        onPress: onPress,\n        disabled: disabled,\n        testID: testID,\n        accessibilityRole: \"menuitem\",\n        accessibilityState: {\n          disabled: disabled\n        }\n      }, React.createElement(View, {\n        style: styles.row\n      }, icon ? React.createElement(View, {\n        style: [styles.item, styles.icon],\n        pointerEvents: \"box-none\"\n      }, React.createElement(Icon, {\n        source: icon,\n        size: 24,\n        color: iconColor\n      })) : null, React.createElement(View, {\n        style: [styles.item, styles.content, icon ? styles.widthWithIcon : null, contentStyle],\n        pointerEvents: \"none\"\n      }, React.createElement(Text, {\n        numberOfLines: 1,\n        style: [styles.title, {\n          color: titleColor\n        }, titleStyle]\n      }, title))));\n    }\n  }]);\n  return MenuItem;\n}(React.Component);\n_defineProperty(MenuItem, \"displayName\", 'Menu.Item');\nvar minWidth = 112;\nvar maxWidth = 280;\nvar iconWidth = 40;\nvar styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth: minWidth,\n    maxWidth: maxWidth,\n    height: 48,\n    justifyContent: 'center'\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  icon: {\n    width: iconWidth\n  },\n  title: {\n    fontSize: 16\n  },\n  item: {\n    marginHorizontal: 8\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48)\n  }\n});\nexport default withTheme(MenuItem);\n\nexport { MenuItem };","map":{"version":3,"mappings":"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","names":["color","React","Icon","TouchableRipple","Text","withTheme","black","white","MenuItem","props","icon","title","disabled","onPress","theme","style","contentStyle","testID","titleStyle","disabledColor","dark","alpha","rgb","string","titleColor","colors","text","iconColor","styles","container","accessibilityRole","accessibilityState","View","row","item","pointerEvents","source","size","content","widthWithIcon","numberOfLines","Component","minWidth","maxWidth","iconWidth","StyleSheet","create","paddingHorizontal","height","justifyContent","flexDirection","width","fontSize","marginHorizontal"],"sources":["MenuItem.tsx"],"sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  TextStyle,\n  ViewStyle,\n  StyleProp,\n} from 'react-native';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\n\ntype Props = {\n  /**\n   * Title text for the `MenuItem`.\n   */\n  title: React.ReactNode;\n  /**\n   * Icon to display for the `MenuItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  style?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * A component to show a single list item inside a Menu.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/menu-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Menu } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View style={{ flex: 1 }}>\n *     <Menu.Item icon=\"redo\" onPress={() => {}} title=\"Redo\" />\n *     <Menu.Item icon=\"undo\" onPress={() => {}} title=\"Undo\" />\n *     <Menu.Item icon=\"content-cut\" onPress={() => {}} title=\"Cut\" disabled />\n *     <Menu.Item icon=\"content-copy\" onPress={() => {}} title=\"Copy\" disabled />\n *     <Menu.Item icon=\"content-paste\" onPress={() => {}} title=\"Paste\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nclass MenuItem extends React.Component<Props> {\n  static displayName = 'Menu.Item';\n\n  render() {\n    const {\n      icon,\n      title,\n      disabled,\n      onPress,\n      theme,\n      style,\n      contentStyle,\n      testID,\n      titleStyle,\n    } = this.props;\n\n    const disabledColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n\n    const titleColor = disabled\n      ? disabledColor\n      : color(theme.colors.text).alpha(0.87).rgb().string();\n\n    const iconColor = disabled\n      ? disabledColor\n      : color(theme.colors.text).alpha(0.54).rgb().string();\n\n    return (\n      <TouchableRipple\n        style={[styles.container, style]}\n        onPress={onPress}\n        disabled={disabled}\n        testID={testID}\n        accessibilityRole=\"menuitem\"\n        accessibilityState={{ disabled }}\n      >\n        <View style={styles.row}>\n          {icon ? (\n            <View style={[styles.item, styles.icon]} pointerEvents=\"box-none\">\n              <Icon source={icon} size={24} color={iconColor} />\n            </View>\n          ) : null}\n          <View\n            style={[\n              styles.item,\n              styles.content,\n              icon ? styles.widthWithIcon : null,\n              contentStyle,\n            ]}\n            pointerEvents=\"none\"\n          >\n            <Text\n              numberOfLines={1}\n              style={[styles.title, { color: titleColor }, titleStyle]}\n            >\n              {title}\n            </Text>\n          </View>\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 40;\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth,\n    maxWidth,\n    height: 48,\n    justifyContent: 'center',\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  icon: {\n    width: iconWidth,\n  },\n  title: {\n    fontSize: 16,\n  },\n  item: {\n    marginHorizontal: 8,\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16,\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48),\n  },\n});\n\nexport default withTheme(MenuItem);\n\n// @component-docs ignore-next-line\nexport { MenuItem };\n"]},"metadata":{},"sourceType":"module"}