{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport color from 'color';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"../Typography/Text\";\nimport Divider from \"../Divider\";\nimport { withTheme } from \"../../core/theming\";\n\nvar DrawerSection = function DrawerSection(_ref) {\n  var children = _ref.children,\n    title = _ref.title,\n    theme = _ref.theme,\n    style = _ref.style,\n    rest = _objectWithoutProperties(_ref, [\"children\", \"title\", \"theme\", \"style\"]);\n  var colors = theme.colors,\n    fonts = theme.fonts;\n  var titleColor = color(colors.text).alpha(0.54).rgb().string();\n  var font = fonts.medium;\n  return React.createElement(View, _extends({\n    style: [styles.container, style]\n  }, rest), title && React.createElement(View, {\n    style: styles.titleContainer\n  }, React.createElement(Text, {\n    numberOfLines: 1,\n    style: _objectSpread(_objectSpread({\n      color: titleColor\n    }, font), {}, {\n      marginLeft: 16\n    })\n  }, title)), children, React.createElement(Divider, {\n    style: styles.divider\n  }));\n};\nDrawerSection.displayName = 'Drawer.Section';\nvar styles = StyleSheet.create({\n  container: {\n    marginBottom: 4\n  },\n  titleContainer: {\n    height: 40,\n    justifyContent: 'center'\n  },\n  divider: {\n    marginTop: 4\n  }\n});\nexport default withTheme(DrawerSection);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAAA;AAAA;AAEA,OAAOC,IAAP;AACA,OAAOC,OAAP;AACA,SAASC,SAAT;;AAuDA,IAAMC,aAAa,GAAG,SAAhBA,aAAa,CAAGC,MAAuD;EAAA,IAApDC,QAAF,GAAsDD,KAApDC,QAAF;IAAYC,KAAZ,GAAsDF,KAA1CE,KAAZ;IAAmBC,KAAnB,GAAsDH,KAAnCG,KAAnB;IAA0BC,QAA4BJ,KAA5BI;IAAUC,IAAkB;EAAA,IACnEC,MAAF,GAAoBH,KAA1B,CAAQG,MAAF;IAAUC,QAAUJ,KAA1B,CAAgBI;EAChB,IAAMC,UAAU,GAAGd,KAAK,CAACY,MAAM,CAACG,IAAR,CAAL,CAAmBC,KAAnB,CAAyB,IAAzB,EAA+BC,GAA/B,GAAqCC,MAArC,EAAnB;EACA,IAAMC,IAAI,GAAGN,KAAK,CAACO,MAAnB;EAEA,OACEnB,oBAACoB,IAAD;IAAMX,KAAK,EAAE,CAACY,MAAM,CAACC,SAAR,EAAmBb,KAAnB;EAAb,GAA4CC,IAA5C,GACGH,KAAK,IACJP,oBAACoB,IAAD;IAAMX,KAAK,EAAEY,MAAM,CAACE;EAApB,GACEvB,oBAACC,IAAD;IACEuB,aAAa,EAAE,CADjB;IAEEf,KAAK;MAAIV,KAAK,EAAEc;IAAX,GAA0BK,IAA1B;MAAgCO,UAAU,EAAE;IAA5C;EAFP,GAIGlB,KAJH,CADF,CAFJ,EAWGD,QAXH,EAYEN,oBAACE,OAAD;IAASO,KAAK,EAAEY,MAAM,CAACK;EAAvB,EAZF,CADF;AAgBD,CArBD;AAuBAtB,aAAa,CAACuB,WAAd,GAA4B,gBAA5B;AAEA,IAAMN,MAAM,GAAGO,UAAU,CAACC,MAAX,CAAkB;EAC/BP,SAAS,EAAE;IACTQ,YAAY,EAAE;EADL,CADoB;EAI/BP,cAAc,EAAE;IACdQ,MAAM,EAAE,EADM;IAEdC,cAAc,EAAE;EAFF,CAJe;EAQ/BN,OAAO,EAAE;IACPO,SAAS,EAAE;EADJ;AARsB,CAAlB,CAAf;AAaA,eAAe9B,SAAS,CAACC,aAAD,CAAxB","names":["color","React","Text","Divider","withTheme","DrawerSection","_ref","children","title","theme","style","rest","colors","fonts","titleColor","text","alpha","rgb","string","font","medium","View","styles","container","titleContainer","numberOfLines","marginLeft","divider","displayName","StyleSheet","create","marginBottom","height","justifyContent","marginTop"],"sources":["DrawerSection.tsx"],"sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { View, ViewStyle, StyleSheet, StyleProp } from 'react-native';\nimport Text from '../Typography/Text';\nimport Divider from '../Divider';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Title to show as the header for the section.\n   */\n  title?: string;\n  /**\n   * Content of the `Drawer.Section`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to group content inside a navigation drawer.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/drawer-section.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [active, setActive] = React.useState('');\n *\n *\n *   return (\n *     <Drawer.Section title=\"Some title\">\n *       <Drawer.Item\n *         label=\"First Item\"\n *         active={active === 'first'}\n *         onPress={() => setActive('first')}\n *       />\n *       <Drawer.Item\n *         label=\"Second Item\"\n *         active={active === 'second'}\n *         onPress={() => setActive('second')}\n *       />\n *     </Drawer.Section>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst DrawerSection = ({ children, title, theme, style, ...rest }: Props) => {\n  const { colors, fonts } = theme;\n  const titleColor = color(colors.text).alpha(0.54).rgb().string();\n  const font = fonts.medium;\n\n  return (\n    <View style={[styles.container, style]} {...rest}>\n      {title && (\n        <View style={styles.titleContainer}>\n          <Text\n            numberOfLines={1}\n            style={{ color: titleColor, ...font, marginLeft: 16 }}\n          >\n            {title}\n          </Text>\n        </View>\n      )}\n      {children}\n      <Divider style={styles.divider} />\n    </View>\n  );\n};\n\nDrawerSection.displayName = 'Drawer.Section';\n\nconst styles = StyleSheet.create({\n  container: {\n    marginBottom: 4,\n  },\n  titleContainer: {\n    height: 40,\n    justifyContent: 'center',\n  },\n  divider: {\n    marginTop: 4,\n  },\n});\n\nexport default withTheme(DrawerSection);\n"]},"metadata":{},"sourceType":"module"}