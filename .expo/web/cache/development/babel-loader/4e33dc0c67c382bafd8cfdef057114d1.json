{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport color from 'color';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport Text from \"../Typography/Text\";\nimport { withTheme } from \"../../core/theming\";\nimport { ListAccordionGroupContext } from \"./ListAccordionGroup\";\n\nvar ListAccordion = function ListAccordion(_ref) {\n  var left = _ref.left,\n    title = _ref.title,\n    description = _ref.description,\n    children = _ref.children,\n    theme = _ref.theme,\n    titleStyle = _ref.titleStyle,\n    descriptionStyle = _ref.descriptionStyle,\n    _ref$titleNumberOfLin = _ref.titleNumberOfLines,\n    titleNumberOfLines = _ref$titleNumberOfLin === void 0 ? 1 : _ref$titleNumberOfLin,\n    _ref$descriptionNumbe = _ref.descriptionNumberOfLines,\n    descriptionNumberOfLines = _ref$descriptionNumbe === void 0 ? 2 : _ref$descriptionNumbe,\n    style = _ref.style,\n    id = _ref.id,\n    testID = _ref.testID,\n    onPress = _ref.onPress,\n    expandedProp = _ref.expanded;\n  var _React$useState = React.useState(expandedProp || false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    expanded = _React$useState2[0],\n    setExpanded = _React$useState2[1];\n  var handlePressAction = function handlePressAction() {\n    onPress === null || onPress === void 0 ? void 0 : onPress();\n    if (expandedProp === undefined) {\n      setExpanded(function (expanded) {\n        return !expanded;\n      });\n    }\n  };\n  var titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n  var descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n  var expandedInternal = expandedProp !== undefined ? expandedProp : expanded;\n  var groupContext = React.useContext(ListAccordionGroupContext);\n  if (groupContext !== null && !id) {\n    throw new Error('List.Accordion is used inside a List.AccordionGroup without specifying an id prop.');\n  }\n  var isExpanded = groupContext ? groupContext.expandedId === id : expandedInternal;\n  var handlePress = groupContext && id !== undefined ? function () {\n    return groupContext.onAccordionPress(id);\n  } : handlePressAction;\n  return React.createElement(View, null, React.createElement(TouchableRipple, {\n    style: [styles.container, style],\n    onPress: handlePress,\n    accessibilityTraits: \"button\",\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    testID: testID\n  }, React.createElement(View, {\n    style: styles.row,\n    pointerEvents: \"none\"\n  }, left ? left({\n    color: isExpanded ? theme.colors.primary : descriptionColor\n  }) : null, React.createElement(View, {\n    style: [styles.item, styles.content]\n  }, React.createElement(Text, {\n    numberOfLines: titleNumberOfLines,\n    style: [styles.title, {\n      color: isExpanded ? theme.colors.primary : titleColor\n    }, titleStyle]\n  }, title), description && React.createElement(Text, {\n    numberOfLines: descriptionNumberOfLines,\n    style: [styles.description, {\n      color: descriptionColor\n    }, descriptionStyle]\n  }, description)), React.createElement(View, {\n    style: [styles.item, description ? styles.multiline : undefined]\n  }, React.createElement(MaterialCommunityIcon, {\n    name: isExpanded ? 'chevron-up' : 'chevron-down',\n    color: titleColor,\n    size: 24,\n    direction: I18nManager.isRTL ? 'rtl' : 'ltr'\n  })))), isExpanded ? React.Children.map(children, function (child) {\n    if (left && React.isValidElement(child) && !child.props.left && !child.props.right) {\n      return React.cloneElement(child, {\n        style: [styles.child, child.props.style]\n      });\n    }\n    return child;\n  }) : null);\n};\nListAccordion.displayName = 'List.Accordion';\nvar styles = StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  item: {\n    margin: 8\n  },\n  child: {\n    paddingLeft: 64\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\nexport default withTheme(ListAccordion);","map":{"version":3,"mappings":"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","names":["color","React","TouchableRipple","MaterialCommunityIcon","Text","withTheme","ListAccordionGroupContext","ListAccordion","left","title","description","children","theme","titleStyle","descriptionStyle","titleNumberOfLines","descriptionNumberOfLines","style","id","testID","onPress","expandedProp","expanded","useState","setExpanded","handlePressAction","undefined","titleColor","colors","text","alpha","rgb","string","descriptionColor","expandedInternal","groupContext","useContext","Error","isExpanded","expandedId","handlePress","onAccordionPress","View","styles","container","accessibilityTraits","accessibilityComponentType","accessibilityRole","row","pointerEvents","primary","item","content","numberOfLines","multiline","name","size","direction","I18nManager","isRTL","Children","map","child","isValidElement","props","right","cloneElement","displayName","StyleSheet","create","padding","flexDirection","alignItems","height","justifyContent","fontSize","margin","paddingLeft","flex"],"sources":["ListAccordion.tsx"],"sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  I18nManager,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\nimport { ListAccordionGroupContext } from './ListAccordionGroup';\n\ntype Props = {\n  /**\n   * Title text for the list accordion.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list accordion.\n   */\n  description?: React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\n   */\n  id?: string | number;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [expanded, setExpanded] = React.useState(true);\n *\n *   const handlePress = () => setExpanded(!expanded);\n *\n *   return (\n *     <List.Section title=\"Accordions\">\n *       <List.Accordion\n *         title=\"Uncontrolled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *\n *       <List.Accordion\n *         title=\"Controlled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}\n *         expanded={expanded}\n *         onPress={handlePress}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *     </List.Section>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst ListAccordion = ({\n  left,\n  title,\n  description,\n  children,\n  theme,\n  titleStyle,\n  descriptionStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  style,\n  id,\n  testID,\n  onPress,\n  expanded: expandedProp,\n}: Props) => {\n  const [expanded, setExpanded] = React.useState<boolean>(\n    expandedProp || false\n  );\n\n  const handlePressAction = () => {\n    onPress?.();\n\n    if (expandedProp === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      setExpanded((expanded) => !expanded);\n    }\n  };\n\n  const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n  const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n\n  const expandedInternal = expandedProp !== undefined ? expandedProp : expanded;\n\n  const groupContext = React.useContext(ListAccordionGroupContext);\n  if (groupContext !== null && !id) {\n    throw new Error(\n      'List.Accordion is used inside a List.AccordionGroup without specifying an id prop.'\n    );\n  }\n  const isExpanded = groupContext\n    ? groupContext.expandedId === id\n    : expandedInternal;\n  const handlePress =\n    groupContext && id !== undefined\n      ? () => groupContext.onAccordionPress(id)\n      : handlePressAction;\n  return (\n    <View>\n      <TouchableRipple\n        style={[styles.container, style]}\n        onPress={handlePress}\n        accessibilityTraits=\"button\"\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        testID={testID}\n      >\n        <View style={styles.row} pointerEvents=\"none\">\n          {left\n            ? left({\n                color: isExpanded ? theme.colors.primary : descriptionColor,\n              })\n            : null}\n          <View style={[styles.item, styles.content]}>\n            <Text\n              numberOfLines={titleNumberOfLines}\n              style={[\n                styles.title,\n                {\n                  color: isExpanded ? theme.colors.primary : titleColor,\n                },\n                titleStyle,\n              ]}\n            >\n              {title}\n            </Text>\n            {description && (\n              <Text\n                numberOfLines={descriptionNumberOfLines}\n                style={[\n                  styles.description,\n                  {\n                    color: descriptionColor,\n                  },\n                  descriptionStyle,\n                ]}\n              >\n                {description}\n              </Text>\n            )}\n          </View>\n          <View\n            style={[styles.item, description ? styles.multiline : undefined]}\n          >\n            <MaterialCommunityIcon\n              name={isExpanded ? 'chevron-up' : 'chevron-down'}\n              color={titleColor}\n              size={24}\n              direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n            />\n          </View>\n        </View>\n      </TouchableRipple>\n      {isExpanded\n        ? React.Children.map(children, (child) => {\n            if (\n              left &&\n              React.isValidElement(child) &&\n              !child.props.left &&\n              !child.props.right\n            ) {\n              return React.cloneElement(child, {\n                style: [styles.child, child.props.style],\n              });\n            }\n\n            return child;\n          })\n        : null}\n    </View>\n  );\n};\n\nListAccordion.displayName = 'List.Accordion';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  child: {\n    paddingLeft: 64,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListAccordion);\n"]},"metadata":{},"sourceType":"module"}