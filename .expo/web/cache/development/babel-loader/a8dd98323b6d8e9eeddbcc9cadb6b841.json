{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport SafeAreaView from 'react-native-safe-area-view';\nimport color from 'color';\nimport overlay from \"../styles/overlay\";\nimport Icon from \"./Icon\";\nimport Surface from \"./Surface\";\nimport Badge from \"./Badge\";\nimport TouchableRipple from \"./TouchableRipple/TouchableRipple\";\nimport Text from \"./Typography/Text\";\nimport { black, white } from \"../styles/colors\";\nimport { withTheme } from \"../core/theming\";\nvar MIN_RIPPLE_SCALE = 0.001;\n\nvar MIN_TAB_WIDTH = 96;\nvar MAX_TAB_WIDTH = 168;\nvar BAR_HEIGHT = 56;\nvar FAR_FAR_AWAY = Platform.OS === 'web' ? 0 : 9999;\nvar Touchable = function Touchable(_ref) {\n  var _0 = _ref.route,\n    style = _ref.style,\n    children = _ref.children,\n    borderless = _ref.borderless,\n    centered = _ref.centered,\n    rippleColor = _ref.rippleColor,\n    rest = _objectWithoutProperties(_ref, [\"route\", \"style\", \"children\", \"borderless\", \"centered\", \"rippleColor\"]);\n  return TouchableRipple.supported ? React.createElement(TouchableRipple, _extends({}, rest, {\n    borderless: borderless,\n    centered: centered,\n    rippleColor: rippleColor,\n    style: style\n  }), children) : React.createElement(TouchableWithoutFeedback, rest, React.createElement(View, {\n    style: style\n  }, children));\n};\nvar SceneComponent = function (_React$PureComponent) {\n  _inherits(SceneComponent, _React$PureComponent);\n  var _super = _createSuper(SceneComponent);\n  function SceneComponent() {\n    _classCallCheck(this, SceneComponent);\n    return _super.apply(this, arguments);\n  }\n  _createClass(SceneComponent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        component = _this$props.component,\n        rest = _objectWithoutProperties(_this$props, [\"component\"]);\n      return React.createElement(component, rest);\n    }\n  }]);\n  return SceneComponent;\n}(React.PureComponent);\nvar BottomNavigation = function (_React$Component) {\n  _inherits(BottomNavigation, _React$Component);\n  var _super2 = _createSuper(BottomNavigation);\n  _createClass(BottomNavigation, null, [{\n    key: \"SceneMap\",\n    value: function SceneMap(scenes) {\n      return function (_ref2) {\n        var route = _ref2.route,\n          jumpTo = _ref2.jumpTo;\n        return React.createElement(SceneComponent, {\n          key: route.key,\n          component: scenes[route.key ? route.key : ''],\n          route: route,\n          jumpTo: jumpTo\n        });\n      };\n    }\n  }, {\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var _nextProps$navigation = nextProps.navigationState,\n        index = _nextProps$navigation.index,\n        routes = _nextProps$navigation.routes;\n\n      var tabs = routes.map(\n      function (_, i) {\n        return prevState.tabs[i] || new Animated.Value(i === index ? 1 : 0);\n      });\n      var offsets = routes.map(\n      function (_, i) {\n        return prevState.offsets[i] || new Animated.Value(i === index ? 0 : 1);\n      });\n      var nextState = {\n        tabs: tabs,\n        offsets: offsets\n      };\n      var focusedKey = routes[index].key;\n      if (focusedKey === prevState.current) {\n        return nextState;\n      }\n      return _objectSpread(_objectSpread({}, nextState), {}, {\n        current: focusedKey,\n        loaded: prevState.loaded.includes(focusedKey) ? prevState.loaded : [].concat(_toConsumableArray(prevState.loaded), [focusedKey])\n      });\n    }\n  }]);\n  function BottomNavigation(props) {\n    var _this;\n    _classCallCheck(this, BottomNavigation);\n    _this = _super2.call(this, props);\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyboardShow\", function () {\n      var scale = _this.props.theme.animation.scale;\n      _this.setState({\n        keyboard: true\n      }, function () {\n        return Animated.timing(_this.state.visible, {\n          toValue: 0,\n          duration: 150 * scale,\n          useNativeDriver: true\n        }).start();\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyboardHide\", function () {\n      var scale = _this.props.theme.animation.scale;\n      Animated.timing(_this.state.visible, {\n        toValue: 1,\n        duration: 100 * scale,\n        useNativeDriver: true\n      }).start(function () {\n        _this.setState({\n          keyboard: false\n        });\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"animateToCurrentIndex\", function () {\n      var shifting = _this.isShifting();\n      var _this$props2 = _this.props,\n        navigationState = _this$props2.navigationState,\n        scale = _this$props2.theme.animation.scale;\n      var routes = navigationState.routes,\n        index = navigationState.index;\n\n      _this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n      Animated.parallel([Animated.timing(_this.state.ripple, {\n        toValue: 1,\n        duration: shifting ? 400 * scale : 0,\n        useNativeDriver: true\n      })].concat(_toConsumableArray(routes.map(function (_, i) {\n        return Animated.timing(_this.state.tabs[i], {\n          toValue: i === index ? 1 : 0,\n          duration: shifting ? 150 * scale : 0,\n          useNativeDriver: true\n        });\n      })))).start(function (_ref3) {\n        var finished = _ref3.finished;\n        _this.state.tabs.map(function (tab, i) {\n          return tab.setValue(i === index ? 1 : 0);\n        });\n\n        _this.state.index.setValue(index);\n        _this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n        if (finished) {\n          _this.state.offsets.forEach(function (offset, i) {\n            if (i === index) {\n              offset.setValue(0);\n            } else {\n              offset.setValue(1);\n            }\n          });\n        }\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleLayout\", function (e) {\n      var layout = _this.state.layout;\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n      if (height === layout.height && width === layout.width) {\n        return;\n      }\n      _this.setState({\n        layout: {\n          height: height,\n          width: width,\n          measured: true\n        }\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleTabPress\", function (index) {\n      var _this$props3 = _this.props,\n        navigationState = _this$props3.navigationState,\n        onTabPress = _this$props3.onTabPress,\n        onIndexChange = _this$props3.onIndexChange;\n      var event = {\n        route: navigationState.routes[index],\n        defaultPrevented: false,\n        preventDefault: function preventDefault() {\n          event.defaultPrevented = true;\n        }\n      };\n      onTabPress === null || onTabPress === void 0 ? void 0 : onTabPress(event);\n      if (event.defaultPrevented) {\n        return;\n      }\n      if (index !== navigationState.index) {\n        onIndexChange(index);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"jumpTo\", function (key) {\n      var index = _this.props.navigationState.routes.findIndex(function (route) {\n        return route.key === key;\n      });\n      _this.props.onIndexChange(index);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"isShifting\", function () {\n      return typeof _this.props.shifting === 'boolean' ? _this.props.shifting : _this.props.navigationState.routes.length > 3;\n    });\n    var _this$props$navigatio = _this.props.navigationState,\n      _routes = _this$props$navigatio.routes,\n      _index = _this$props$navigatio.index;\n    var focusedKey = _routes[_index].key;\n    _this.state = {\n      visible: new Animated.Value(1),\n      tabs: [],\n      offsets: [],\n      index: new Animated.Value(_index),\n      ripple: new Animated.Value(MIN_RIPPLE_SCALE),\n      touch: new Animated.Value(MIN_RIPPLE_SCALE),\n      layout: {\n        height: 0,\n        width: 0,\n        measured: false\n      },\n      current: focusedKey,\n      loaded: [focusedKey],\n      keyboard: false\n    };\n    return _this;\n  }\n  _createClass(BottomNavigation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.animateToCurrentIndex();\n      if (Platform.OS === 'ios') {\n        Keyboard.addListener('keyboardWillShow', this.handleKeyboardShow);\n        Keyboard.addListener('keyboardWillHide', this.handleKeyboardHide);\n      } else {\n        Keyboard.addListener('keyboardDidShow', this.handleKeyboardShow);\n        Keyboard.addListener('keyboardDidHide', this.handleKeyboardHide);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n      if (prevProps.navigationState.index === this.props.navigationState.index) {\n        return;\n      }\n\n      this.state.offsets.forEach(function (offset, i) {\n        if (i === _this2.props.navigationState.index || i === prevProps.navigationState.index) {\n          offset.setValue(0);\n        }\n      });\n      this.animateToCurrentIndex();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (Platform.OS === 'ios') {\n        Keyboard.removeListener('keyboardWillShow', this.handleKeyboardShow);\n        Keyboard.removeListener('keyboardWillHide', this.handleKeyboardHide);\n      } else {\n        Keyboard.removeListener('keyboardDidShow', this.handleKeyboardShow);\n        Keyboard.removeListener('keyboardDidHide', this.handleKeyboardHide);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n      var _this$props4 = this.props,\n        navigationState = _this$props4.navigationState,\n        renderScene = _this$props4.renderScene,\n        renderIcon = _this$props4.renderIcon,\n        renderLabel = _this$props4.renderLabel,\n        _this$props4$renderTo = _this$props4.renderTouchable,\n        renderTouchable = _this$props4$renderTo === void 0 ? function (props) {\n          return React.createElement(Touchable, props);\n        } : _this$props4$renderTo,\n        _this$props4$getLabel = _this$props4.getLabelText,\n        getLabelText = _this$props4$getLabel === void 0 ? function (_ref4) {\n          var route = _ref4.route;\n          return route.title;\n        } : _this$props4$getLabel,\n        _this$props4$getBadge = _this$props4.getBadge,\n        getBadge = _this$props4$getBadge === void 0 ? function (_ref5) {\n          var route = _ref5.route;\n          return route.badge;\n        } : _this$props4$getBadge,\n        _this$props4$getColor = _this$props4.getColor,\n        getColor = _this$props4$getColor === void 0 ? function (_ref6) {\n          var route = _ref6.route;\n          return route.color;\n        } : _this$props4$getColor,\n        _this$props4$getAcces = _this$props4.getAccessibilityLabel,\n        getAccessibilityLabel = _this$props4$getAcces === void 0 ? function (_ref7) {\n          var route = _ref7.route;\n          return route.accessibilityLabel;\n        } : _this$props4$getAcces,\n        _this$props4$getTestI = _this$props4.getTestID,\n        getTestID = _this$props4$getTestI === void 0 ? function (_ref8) {\n          var route = _ref8.route;\n          return route.testID;\n        } : _this$props4$getTestI,\n        activeColor = _this$props4.activeColor,\n        inactiveColor = _this$props4.inactiveColor,\n        keyboardHidesNavigationBar = _this$props4.keyboardHidesNavigationBar,\n        barStyle = _this$props4.barStyle,\n        labeled = _this$props4.labeled,\n        style = _this$props4.style,\n        theme = _this$props4.theme,\n        sceneAnimationEnabled = _this$props4.sceneAnimationEnabled;\n      var _this$state = this.state,\n        layout = _this$state.layout,\n        loaded = _this$state.loaded,\n        index = _this$state.index,\n        visible = _this$state.visible,\n        ripple = _this$state.ripple,\n        keyboard = _this$state.keyboard,\n        tabs = _this$state.tabs,\n        offsets = _this$state.offsets;\n      var routes = navigationState.routes;\n      var colors = theme.colors,\n        isDarkTheme = theme.dark,\n        mode = theme.mode;\n      var shifting = this.isShifting();\n      var _ref9 = StyleSheet.flatten(barStyle) || {},\n        customBackground = _ref9.backgroundColor,\n        _ref9$elevation = _ref9.elevation,\n        elevation = _ref9$elevation === void 0 ? 4 : _ref9$elevation;\n      var approxBackgroundColor = customBackground ? customBackground : isDarkTheme && mode === 'adaptive' ? overlay(elevation, colors.surface) : colors.primary;\n      var backgroundColor = shifting ? index.interpolate({\n        inputRange: routes.map(function (_, i) {\n          return i;\n        }),\n        outputRange: routes.map(function (route) {\n          return getColor({\n            route: route\n          }) || approxBackgroundColor;\n        })\n      }) : approxBackgroundColor;\n      var isDark = !color(approxBackgroundColor).isLight();\n      var textColor = isDark ? white : black;\n      var activeTintColor = typeof activeColor !== 'undefined' ? activeColor : textColor;\n      var inactiveTintColor = typeof inactiveColor !== 'undefined' ? inactiveColor : color(textColor).alpha(0.5).rgb().string();\n      var touchColor = color(activeColor || activeTintColor).alpha(0.12).rgb().string();\n      var maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n      var maxTabBarWidth = maxTabWidth * routes.length;\n      var tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n      var tabWidth = tabBarWidth / routes.length;\n      var rippleSize = layout.width / 4;\n      return React.createElement(View, {\n        style: [styles.container, style]\n      }, React.createElement(View, {\n        style: [styles.content, {\n          backgroundColor: colors.background\n        }]\n      }, routes.map(function (route, index) {\n        if (!loaded.includes(route.key)) {\n          return null;\n        }\n        var focused = navigationState.index === index;\n        var opacity = sceneAnimationEnabled ? tabs[index] : focused ? 1 : 0;\n        var top = offsets[index].interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, FAR_FAR_AWAY]\n        });\n        return React.createElement(Animated.View, {\n          key: route.key,\n          pointerEvents: focused ? 'auto' : 'none',\n          accessibilityElementsHidden: !focused,\n          importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n          style: [StyleSheet.absoluteFill, {\n            opacity: opacity\n          }],\n          collapsable: false,\n          removeClippedSubviews:\n          Platform.OS === 'ios' ? navigationState.index !== index : true\n        }, React.createElement(Animated.View, {\n          style: [styles.content, {\n            top: top\n          }, Platform.OS === 'web' ? {\n            display: loaded.includes(route.key) ? 'flex' : 'none'\n          } : null]\n        }, renderScene({\n          route: route,\n          jumpTo: _this3.jumpTo\n        })));\n      })), React.createElement(Surface, {\n        style: [styles.bar, keyboardHidesNavigationBar ? {\n          transform: [{\n            translateY: visible.interpolate({\n              inputRange: [0, 1],\n              outputRange: [layout.height, 0]\n            })\n          }],\n          position: keyboard ? 'absolute' : null\n        } : null, barStyle],\n        pointerEvents: layout.measured ? keyboardHidesNavigationBar && keyboard ? 'none' : 'auto' : 'none',\n        onLayout: this.handleLayout\n      }, React.createElement(Animated.View, {\n        style: [styles.barContent, {\n          backgroundColor: backgroundColor\n        }]\n      }, React.createElement(SafeAreaView, {\n        forceInset: {\n          top: 'never',\n          bottom: 'always'\n        },\n        style: [styles.items, {\n          maxWidth: maxTabBarWidth\n        }]\n      }, shifting ? React.createElement(Animated.View, {\n        pointerEvents: \"none\",\n        style: [styles.ripple, {\n          top: (BAR_HEIGHT - rippleSize) / 2,\n          left: tabWidth * (navigationState.index + 0.5) - rippleSize / 2,\n          height: rippleSize,\n          width: rippleSize,\n          borderRadius: rippleSize / 2,\n          backgroundColor: getColor({\n            route: routes[navigationState.index]\n          }),\n          transform: [{\n            scale: ripple.interpolate({\n              inputRange: [0, 1],\n              outputRange: [0, 8]\n            })\n          }],\n          opacity: ripple.interpolate({\n            inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n            outputRange: [0, 0, 1, 1]\n          })\n        }]\n      }) : null, routes.map(function (route, index) {\n        var focused = navigationState.index === index;\n        var active = tabs[index];\n\n        var scale = labeled && shifting ? active.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0.5, 1]\n        }) : 1;\n\n        var translateY = labeled ? shifting ? active.interpolate({\n          inputRange: [0, 1],\n          outputRange: [7, 0]\n        }) : 0 : 7;\n\n        var activeOpacity = active;\n        var inactiveOpacity = active.interpolate({\n          inputRange: [0, 1],\n          outputRange: [1, 0]\n        });\n        var badge = getBadge({\n          route: route\n        });\n        return renderTouchable({\n          key: route.key,\n          route: route,\n          borderless: true,\n          centered: true,\n          rippleColor: touchColor,\n          onPress: function onPress() {\n            return _this3.handleTabPress(index);\n          },\n          testID: getTestID({\n            route: route\n          }),\n          accessibilityLabel: getAccessibilityLabel({\n            route: route\n          }),\n          accessibilityTraits: focused ? ['button', 'selected'] : 'button',\n          accessibilityComponentType: 'button',\n          accessibilityRole: 'button',\n          accessibilityState: {\n            selected: true\n          },\n          style: styles.item,\n          children: React.createElement(View, {\n            pointerEvents: \"none\"\n          }, React.createElement(Animated.View, {\n            style: [styles.iconContainer, {\n              transform: [{\n                translateY: translateY\n              }]\n            }]\n          }, React.createElement(Animated.View, {\n            style: [styles.iconWrapper, {\n              opacity: activeOpacity\n            }]\n          }, renderIcon ? renderIcon({\n            route: route,\n            focused: true,\n            color: activeTintColor\n          }) : React.createElement(Icon, {\n            source: route.icon,\n            color: activeTintColor,\n            size: 24\n          })), React.createElement(Animated.View, {\n            style: [styles.iconWrapper, {\n              opacity: inactiveOpacity\n            }]\n          }, renderIcon ? renderIcon({\n            route: route,\n            focused: false,\n            color: inactiveTintColor\n          }) : React.createElement(Icon, {\n            source: route.icon,\n            color: inactiveTintColor,\n            size: 24\n          })), React.createElement(View, {\n            style: [styles.badgeContainer, {\n              right: (badge != null && typeof badge !== 'boolean' ? String(badge).length * -2 : 0) - 2\n            }]\n          }, typeof badge === 'boolean' ? React.createElement(Badge, {\n            visible: badge,\n            size: 8\n          }) : React.createElement(Badge, {\n            visible: badge != null,\n            size: 16\n          }, badge))), labeled ? React.createElement(Animated.View, {\n            style: [styles.labelContainer, {\n              transform: [{\n                scale: scale\n              }]\n            }]\n          }, React.createElement(Animated.View, {\n            style: [styles.labelWrapper, {\n              opacity: activeOpacity\n            }]\n          }, renderLabel ? renderLabel({\n            route: route,\n            focused: true,\n            color: activeTintColor\n          }) : React.createElement(Text, {\n            style: [styles.label, {\n              color: activeTintColor\n            }]\n          }, getLabelText({\n            route: route\n          }))), shifting ? null : React.createElement(Animated.View, {\n            style: [styles.labelWrapper, {\n              opacity: inactiveOpacity\n            }]\n          }, renderLabel ? renderLabel({\n            route: route,\n            focused: false,\n            color: inactiveTintColor\n          }) : React.createElement(Text, {\n            style: [styles.label, {\n              color: inactiveTintColor\n            }]\n          }, getLabelText({\n            route: route\n          })))) : React.createElement(View, {\n            style: styles.labelContainer\n          }))\n        });\n      })))));\n    }\n  }]);\n  return BottomNavigation;\n}(React.Component);\n_defineProperty(BottomNavigation, \"defaultProps\", {\n  labeled: true,\n  keyboardHidesNavigationBar: true,\n  sceneAnimationEnabled: false\n});\nexport default withTheme(BottomNavigation);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  content: {\n    flex: 1\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden'\n  },\n  items: {\n    flexDirection: 'row',\n    width: '100%'\n  },\n  item: {\n    flex: 1,\n    paddingVertical: 6\n  },\n  ripple: {\n    position: 'absolute'\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center'\n  },\n  iconWrapper: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    alignItems: 'center'\n  }),\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2\n  },\n  labelWrapper: _objectSpread({}, StyleSheet.absoluteFillObject),\n  label: _objectSpread({\n    fontSize: 12,\n    textAlign: 'center',\n    backgroundColor: 'transparent'\n  }, Platform.OS === 'web' ? {\n    whiteSpace: 'nowrap',\n    alignSelf: 'center'\n  } : null),\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2\n  }\n});","map":{"version":3,"mappings":"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","names":["React","SafeAreaView","color","overlay","Icon","Surface","Badge","TouchableRipple","Text","black","white","withTheme","MIN_RIPPLE_SCALE","MIN_TAB_WIDTH","MAX_TAB_WIDTH","BAR_HEIGHT","FAR_FAR_AWAY","Platform","OS","Touchable","_ref","_0","route","style","children","borderless","centered","rippleColor","rest","supported","TouchableWithoutFeedback","View","SceneComponent","props","component","_this$props","createElement","PureComponent","BottomNavigation","scenes","jumpTo","key","nextProps","prevState","navigationState","index","routes","tabs","map","_","i","Animated","Value","offsets","nextState","focusedKey","current","loaded","includes","constructor","_defineProperty","scale","theme","animation","setState","keyboard","timing","state","visible","toValue","duration","useNativeDriver","start","shifting","isShifting","ripple","setValue","parallel","finished","tab","forEach","offset","e","layout","nativeEvent","height","width","measured","onTabPress","onIndexChange","event","defaultPrevented","preventDefault","findIndex","length","touch","animateToCurrentIndex","Keyboard","addListener","handleKeyboardShow","handleKeyboardHide","prevProps","removeListener","renderScene","renderIcon","renderLabel","renderTouchable","getLabelText","title","getBadge","badge","getColor","getAccessibilityLabel","accessibilityLabel","getTestID","testID","activeColor","inactiveColor","keyboardHidesNavigationBar","barStyle","labeled","sceneAnimationEnabled","colors","isDarkTheme","dark","mode","StyleSheet","flatten","customBackground","backgroundColor","elevation","approxBackgroundColor","surface","primary","interpolate","inputRange","outputRange","isDark","isLight","textColor","activeTintColor","inactiveTintColor","alpha","rgb","string","touchColor","maxTabWidth","maxTabBarWidth","tabBarWidth","Math","min","tabWidth","rippleSize","styles","container","content","background","focused","opacity","top","pointerEvents","accessibilityElementsHidden","importantForAccessibility","absoluteFill","collapsable","removeClippedSubviews","display","bar","transform","translateY","position","onLayout","handleLayout","barContent","forceInset","bottom","items","maxWidth","left","borderRadius","active","activeOpacity","inactiveOpacity","onPress","handleTabPress","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","selected","item","iconContainer","iconWrapper","source","icon","size","badgeContainer","right","String","labelContainer","labelWrapper","label","Component","create","flex","overflow","alignItems","flexDirection","paddingVertical","marginTop","marginHorizontal","alignSelf","absoluteFillObject","paddingBottom","fontSize","textAlign","whiteSpace"],"sources":["BottomNavigation.tsx"],"sourcesContent":["/* eslint-disable react/no-multi-comp */\n\nimport * as React from 'react';\nimport {\n  View,\n  Animated,\n  TouchableWithoutFeedback,\n  TouchableWithoutFeedbackProps,\n  StyleSheet,\n  StyleProp,\n  Platform,\n  Keyboard,\n  ViewStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport SafeAreaView from 'react-native-safe-area-view';\nimport color from 'color';\nimport overlay from '../styles/overlay';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Badge from './Badge';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport Text from './Typography/Text';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\ntype Route = {\n  key: string;\n  title?: string;\n  icon?: IconSource;\n  badge?: string | number | boolean;\n  color?: string;\n  accessibilityLabel?: string;\n  testID?: string;\n};\n\ntype NavigationState = {\n  index: number;\n  routes: Route[];\n};\n\ntype TabPressEvent = {\n  defaultPrevented: boolean;\n  preventDefault(): void;\n};\n\ntype TouchableProps = TouchableWithoutFeedbackProps & {\n  key: string;\n  route: Route;\n  children: React.ReactNode;\n  borderless?: boolean;\n  centered?: boolean;\n  rippleColor?: string;\n};\n\ntype Props = {\n  /**\n   * Whether the shifting style is used, the active tab appears wider and the inactive tabs won't have a label.\n   * By default, this is `true` when you have more than 3 tabs.\n   */\n  shifting?: boolean;\n  /**\n   * Whether to show labels in tabs. When `false`, only icons will be displayed.\n   */\n  labeled?: boolean;\n  /**\n   * State for the bottom navigation. The state should contain the following properties:\n   *\n   * - `index`: a number representing the index of the active route in the `routes` array\n   * - `routes`: an array containing a list of route objects used for rendering the tabs\n   *\n   * Each route object should contain the following properties:\n   *\n   * - `key`: a unique key to identify the route (required)\n   * - `title`: title of the route to use as the tab label\n   * - `icon`: icon to use as the tab icon, can be a string, an image source or a react component\n   * - `color`: color to use as background color for shifting bottom navigation\n   * - `badge`: badge to show on the tab icon, can be `true` to show a dot, `string` or `number` to show text.\n   * - `accessibilityLabel`: accessibility label for the tab button\n   * - `testID`: test id for the tab button\n   *\n   * Example:\n   *\n   * ```js\n   * {\n   *   index: 1,\n   *   routes: [\n   *     { key: 'music', title: 'Music', icon: 'queue-music', color: '#3F51B5' },\n   *     { key: 'albums', title: 'Albums', icon: 'album', color: '#009688' },\n   *     { key: 'recents', title: 'Recents', icon: 'history', color: '#795548' },\n   *     { key: 'purchased', title: 'Purchased', icon: 'shopping-cart', color: '#607D8B' },\n   *   ]\n   * }\n   * ```\n   *\n   * `BottomNavigation` is a controlled component, which means the `index` needs to be updated via the `onIndexChange` callback.\n   */\n  navigationState: NavigationState;\n  /**\n   * Callback which is called on tab change, receives the index of the new tab as argument.\n   * The navigation state needs to be updated when it's called, otherwise the change is dropped.\n   */\n  onIndexChange: (index: number) => void;\n  /**\n   * Callback which returns a react element to render as the page for the tab. Receives an object containing the route as the argument:\n   *\n   * ```js\n   * renderScene = ({ route, jumpTo }) => {\n   *   switch (route.key) {\n   *     case 'music':\n   *       return <MusicRoute jumpTo={jumpTo} />;\n   *     case 'albums':\n   *       return <AlbumsRoute jumpTo={jumpTo} />;\n   *   }\n   * }\n   * ```\n   *\n   * Pages are lazily rendered, which means that a page will be rendered the first time you navigate to it.\n   * After initial render, all the pages stay rendered to preserve their state.\n   *\n   * You need to make sure that your individual routes implement a `shouldComponentUpdate` to improve the performance.\n   * To make it easier to specify the components, you can use the `SceneMap` helper:\n   *\n   * ```js\n   * renderScene = BottomNavigation.SceneMap({\n   *   music: MusicRoute,\n   *   albums: AlbumsRoute,\n   * });\n   * ```\n   *\n   * Specifying the components this way is easier and takes care of implementing a `shouldComponentUpdate` method.\n   * Each component will receive the current route and a `jumpTo` method as it's props.\n   * The `jumpTo` method can be used to navigate to other tabs programmatically:\n   *\n   * ```js\n   * this.props.jumpTo('albums')\n   * ```\n   */\n  renderScene: (props: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => React.ReactNode | null;\n  /**\n   * Callback which returns a React Element to be used as tab icon.\n   */\n  renderIcon?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which React Element to be used as tab label.\n   */\n  renderLabel?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to be used as the touchable for the tab item.\n   * Renders a `TouchableRipple` on Android and `TouchableWithoutFeedback` with `View` on iOS.\n   */\n  renderTouchable?: (props: TouchableProps) => React.ReactNode;\n  /**\n   * Get label text for the tab, uses `route.title` by default. Use `renderLabel` to replace label component.\n   */\n  getLabelText?: (props: { route: Route }) => string;\n  /**\n   * Get accessibility label for the tab button. This is read by the screen reader when the user taps the tab.\n   * Uses `route.accessibilityLabel` by default.\n   */\n  getAccessibilityLabel?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get the id to locate this tab button in tests, uses `route.testID` by default.\n   */\n  getTestID?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get badge for the tab, uses `route.badge` by default.\n   */\n  getBadge?: (props: { route: Route }) => boolean | number | string | undefined;\n  /**\n   * Get color for the tab, uses `route.color` by default.\n   */\n  getColor?: (props: { route: Route }) => string | undefined;\n  /**\n   * Function to execute on tab press. It receives the route for the pressed tab, useful for things like scroll to top.\n   */\n  onTabPress?: (props: { route: Route } & TabPressEvent) => void;\n  /**\n   * Custom color for icon and label in the active tab.\n   */\n  activeColor?: string;\n  /**\n   * Custom color for icon and label in the inactive tab.\n   */\n  inactiveColor?: string;\n  /**\n   * Whether animation is enabled for scenes transitions in `shifting` mode.\n   * By default, the scenes cross-fade during tab change when `shifting` is enabled.\n   * Specify `sceneAnimationEnabled` as `false` to disable the animation.\n   */\n  sceneAnimationEnabled?: boolean;\n  /**\n   * Whether the bottom navigation bar is hidden when keyboard is shown.\n   * On Android, this works best when [`windowSoftInputMode`](https://developer.android.com/guide/topics/manifest/activity-element#wsoft) is set to `adjustResize`.\n   */\n  keyboardHidesNavigationBar?: boolean;\n  /**\n   * Style for the bottom navigation bar.\n   * You can set a bottom padding here if you have a translucent navigation bar on Android:\n   *\n   * ```js\n   * barStyle={{ paddingBottom: 48 }}\n   * ```\n   */\n  barStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype State = {\n  /**\n   * Visibility of the navigation bar, visible state is 1 and invisible is 0.\n   */\n  visible: Animated.Value;\n  /**\n   * Active state of individual tab items, active state is 1 and inactive state is 0.\n   */\n  tabs: Animated.Value[];\n  /**\n   * The top offset for each tab item to position it offscreen.\n   * Placing items offscreen helps to save memory usage for inactive screens with removeClippedSubviews.\n   * We use animated values for this to prevent unnecessary re-renders.\n   */\n  offsets: Animated.Value[];\n  /**\n   * Index of the currently active tab. Used for setting the background color.\n   * Use don't use the color as an animated value directly, because `setValue` seems to be buggy with colors.\n   */\n  index: Animated.Value;\n  /**\n   * Animation for the touch, used to determine it's scale and opacity.\n   */\n  touch: Animated.Value;\n  /**\n   * Animation for the background color ripple, used to determine it's scale and opacity.\n   */\n  ripple: Animated.Value;\n  /**\n   * Layout of the navigation bar. The width is used to determine the size and position of the ripple.\n   */\n  layout: { height: number; width: number; measured: boolean };\n  /**\n   * key of the currently active route. Used only for getDerivedStateFromProps.\n   */\n  current: string;\n  /**\n   * List of keys of the loaded tabs, tabs will be loaded when navigated to.\n   */\n  loaded: string[];\n  /**\n   * Track whether the keyboard is visible to show and hide the navigation bar.\n   */\n  keyboard: boolean;\n};\n\nconst MIN_RIPPLE_SCALE = 0.001; // Minimum scale is not 0 due to bug with animation\nconst MIN_TAB_WIDTH = 96;\nconst MAX_TAB_WIDTH = 168;\nconst BAR_HEIGHT = 56;\nconst FAR_FAR_AWAY = Platform.OS === 'web' ? 0 : 9999;\n\nconst Touchable = ({\n  route: _0,\n  style,\n  children,\n  borderless,\n  centered,\n  rippleColor,\n  ...rest\n}: TouchableProps) =>\n  TouchableRipple.supported ? (\n    <TouchableRipple\n      {...rest}\n      borderless={borderless}\n      centered={centered}\n      rippleColor={rippleColor}\n      style={style}\n    >\n      {children}\n    </TouchableRipple>\n  ) : (\n    <TouchableWithoutFeedback {...rest}>\n      <View style={style}>{children}</View>\n    </TouchableWithoutFeedback>\n  );\n\nclass SceneComponent extends React.PureComponent<any> {\n  render() {\n    const { component, ...rest } = this.props;\n    return React.createElement(component, rest);\n  }\n}\n\n/**\n * Bottom navigation provides quick navigation between top-level views of an app with a bottom navigation bar.\n * It is primarily designed for use on mobile.\n *\n * For integration with React Navigation, you can use [react-navigation-material-bottom-tab-navigator](https://github.com/react-navigation/react-navigation-material-bottom-tab-navigator).\n *\n * By default Bottom navigation uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/bottom-navigation.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { BottomNavigation, Text } from 'react-native-paper';\n *\n * const MusicRoute = () => <Text>Music</Text>;\n *\n * const AlbumsRoute = () => <Text>Albums</Text>;\n *\n * const RecentsRoute = () => <Text>Recents</Text>;\n *\n * const MyComponent = () => {\n *   const [index, setIndex] = React.useState(0);\n *   const [routes] = React.useState([\n *     { key: 'music', title: 'Music', icon: 'queue-music' },\n *     { key: 'albums', title: 'Albums', icon: 'album' },\n *     { key: 'recents', title: 'Recents', icon: 'history' },\n *   ]);\n *\n *   const renderScene = BottomNavigation.SceneMap({\n *     music: MusicRoute,\n *     albums: AlbumsRoute,\n *     recents: RecentsRoute,\n *   });\n *\n *   return (\n *     <BottomNavigation\n *       navigationState={{ index, routes }}\n *       onIndexChange={setIndex}\n *       renderScene={renderScene}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nclass BottomNavigation extends React.Component<Props, State> {\n  /**\n   * Function which takes a map of route keys to components.\n   * Pure components are used to minimize re-rendering of the pages.\n   * This drastically improves the animation performance.\n   */\n  static SceneMap(scenes: {\n    [key: string]: React.ComponentType<{\n      route: Route;\n      jumpTo: (key: string) => void;\n    }>;\n  }) {\n    return ({\n      route,\n      jumpTo,\n    }: {\n      route: Route;\n      jumpTo: (key: string) => void;\n    }) => (\n      <SceneComponent\n        key={route.key}\n        component={scenes[route.key ? route.key : '']}\n        route={route}\n        jumpTo={jumpTo}\n      />\n    );\n  }\n\n  static defaultProps = {\n    labeled: true,\n    keyboardHidesNavigationBar: true,\n    sceneAnimationEnabled: false,\n  };\n\n  static getDerivedStateFromProps(\n    nextProps: Props,\n    prevState: State\n  ): Partial<State> {\n    const { index, routes } = nextProps.navigationState;\n\n    // Re-create animated values if routes have been added/removed\n    // Preserve previous animated values if they exist, so we don't break animations\n    const tabs = routes.map(\n      // focused === 1, unfocused === 0\n      (_: any, i: number) =>\n        prevState.tabs[i] || new Animated.Value(i === index ? 1 : 0)\n    );\n    const offsets = routes.map(\n      // offscreen === 1, normal === 0\n      (_: any, i: number) =>\n        prevState.offsets[i] || new Animated.Value(i === index ? 0 : 1)\n    );\n\n    const nextState = {\n      tabs,\n      offsets,\n    };\n\n    const focusedKey = routes[index].key;\n\n    if (focusedKey === prevState.current) {\n      return nextState;\n    }\n\n    return {\n      ...nextState,\n      // Store the current index in state so that we can later check if the index has changed\n      current: focusedKey,\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(focusedKey)\n        ? prevState.loaded\n        : [...prevState.loaded, focusedKey],\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { routes, index } = this.props.navigationState;\n    const focusedKey = routes[index].key;\n\n    this.state = {\n      visible: new Animated.Value(1),\n      tabs: [],\n      offsets: [],\n      index: new Animated.Value(index),\n      ripple: new Animated.Value(MIN_RIPPLE_SCALE),\n      touch: new Animated.Value(MIN_RIPPLE_SCALE),\n      layout: { height: 0, width: 0, measured: false },\n      current: focusedKey,\n      loaded: [focusedKey],\n      keyboard: false,\n    };\n  }\n\n  componentDidMount() {\n    // Workaround for native animated bug in react-native@^0.57\n    // Context: https://github.com/callstack/react-native-paper/pull/637\n    this.animateToCurrentIndex();\n\n    if (Platform.OS === 'ios') {\n      Keyboard.addListener('keyboardWillShow', this.handleKeyboardShow);\n      Keyboard.addListener('keyboardWillHide', this.handleKeyboardHide);\n    } else {\n      Keyboard.addListener('keyboardDidShow', this.handleKeyboardShow);\n      Keyboard.addListener('keyboardDidHide', this.handleKeyboardHide);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.navigationState.index === this.props.navigationState.index) {\n      return;\n    }\n\n    // Reset offsets of previous and current tabs before animation\n    this.state.offsets.forEach((offset, i) => {\n      if (\n        i === this.props.navigationState.index ||\n        i === prevProps.navigationState.index\n      ) {\n        offset.setValue(0);\n      }\n    });\n\n    this.animateToCurrentIndex();\n  }\n\n  componentWillUnmount() {\n    if (Platform.OS === 'ios') {\n      Keyboard.removeListener('keyboardWillShow', this.handleKeyboardShow);\n      Keyboard.removeListener('keyboardWillHide', this.handleKeyboardHide);\n    } else {\n      Keyboard.removeListener('keyboardDidShow', this.handleKeyboardShow);\n      Keyboard.removeListener('keyboardDidHide', this.handleKeyboardHide);\n    }\n  }\n\n  private handleKeyboardShow = () => {\n    const { scale } = this.props.theme.animation;\n    this.setState({ keyboard: true }, () =>\n      Animated.timing(this.state.visible, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start()\n    );\n  };\n\n  private handleKeyboardHide = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.visible, {\n      toValue: 1,\n      duration: 100 * scale,\n      useNativeDriver: true,\n    }).start(() => {\n      this.setState({ keyboard: false });\n    });\n  };\n\n  private animateToCurrentIndex = () => {\n    const shifting = this.isShifting();\n    const {\n      navigationState,\n      theme: {\n        animation: { scale },\n      },\n    } = this.props;\n    const { routes, index } = navigationState;\n\n    // Reset the ripple to avoid glitch if it's currently animating\n    this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n\n    Animated.parallel([\n      Animated.timing(this.state.ripple, {\n        toValue: 1,\n        duration: shifting ? 400 * scale : 0,\n        useNativeDriver: true,\n      }),\n      ...routes.map((_, i) =>\n        Animated.timing(this.state.tabs[i], {\n          toValue: i === index ? 1 : 0,\n          duration: shifting ? 150 * scale : 0,\n          useNativeDriver: true,\n        })\n      ),\n    ]).start(({ finished }) => {\n      // Workaround a bug in native animations where this is reset after first animation\n      this.state.tabs.map((tab, i) => tab.setValue(i === index ? 1 : 0));\n\n      // Update the index to change bar's background color and then hide the ripple\n      this.state.index.setValue(index);\n      this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n\n      if (finished) {\n        // Position all inactive screens offscreen to save memory usage\n        // Only do it when animation has finished to avoid glitches mid-transition if switching fast\n        this.state.offsets.forEach((offset, i) => {\n          if (i === index) {\n            offset.setValue(0);\n          } else {\n            offset.setValue(1);\n          }\n        });\n      }\n    });\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { layout } = this.state;\n    const { height, width } = e.nativeEvent.layout;\n\n    if (height === layout.height && width === layout.width) {\n      return;\n    }\n\n    this.setState({\n      layout: {\n        height,\n        width,\n        measured: true,\n      },\n    });\n  };\n\n  private handleTabPress = (index: number) => {\n    const { navigationState, onTabPress, onIndexChange } = this.props;\n\n    const event = {\n      route: navigationState.routes[index],\n      defaultPrevented: false,\n      preventDefault: () => {\n        event.defaultPrevented = true;\n      },\n    };\n\n    onTabPress?.(event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  private jumpTo = (key: string) => {\n    const index = this.props.navigationState.routes.findIndex(\n      (route) => route.key === key\n    );\n\n    this.props.onIndexChange(index);\n  };\n\n  private isShifting = () =>\n    typeof this.props.shifting === 'boolean'\n      ? this.props.shifting\n      : this.props.navigationState.routes.length > 3;\n\n  render() {\n    const {\n      navigationState,\n      renderScene,\n      renderIcon,\n      renderLabel,\n      renderTouchable = (props: TouchableProps) => <Touchable {...props} />,\n      getLabelText = ({ route }: { route: Route }) => route.title,\n      getBadge = ({ route }: { route: Route }) => route.badge,\n      getColor = ({ route }: { route: Route }) => route.color,\n      getAccessibilityLabel = ({ route }: { route: Route }) =>\n        route.accessibilityLabel,\n      getTestID = ({ route }: { route: Route }) => route.testID,\n      activeColor,\n      inactiveColor,\n      keyboardHidesNavigationBar,\n      barStyle,\n      labeled,\n      style,\n      theme,\n      sceneAnimationEnabled,\n    } = this.props;\n\n    const {\n      layout,\n      loaded,\n      index,\n      visible,\n      ripple,\n      keyboard,\n      tabs,\n      offsets,\n    } = this.state;\n    const { routes } = navigationState;\n    const { colors, dark: isDarkTheme, mode } = theme;\n\n    const shifting = this.isShifting();\n\n    const { backgroundColor: customBackground, elevation = 4 }: ViewStyle =\n      StyleSheet.flatten(barStyle) || {};\n\n    const approxBackgroundColor = customBackground\n      ? customBackground\n      : isDarkTheme && mode === 'adaptive'\n      ? overlay(elevation, colors.surface)\n      : colors.primary;\n\n    const backgroundColor = shifting\n      ? index.interpolate({\n          inputRange: routes.map((_, i) => i),\n          //@ts-ignore\n          outputRange: routes.map(\n            (route) => getColor({ route }) || approxBackgroundColor\n          ),\n        })\n      : approxBackgroundColor;\n\n    const isDark = !color(approxBackgroundColor).isLight();\n\n    const textColor = isDark ? white : black;\n    const activeTintColor =\n      typeof activeColor !== 'undefined' ? activeColor : textColor;\n    const inactiveTintColor =\n      typeof inactiveColor !== 'undefined'\n        ? inactiveColor\n        : color(textColor).alpha(0.5).rgb().string();\n\n    const touchColor = color(activeColor || activeTintColor)\n      .alpha(0.12)\n      .rgb()\n      .string();\n\n    const maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n    const maxTabBarWidth = maxTabWidth * routes.length;\n\n    const tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n    const tabWidth = tabBarWidth / routes.length;\n\n    const rippleSize = layout.width / 4;\n\n    return (\n      <View style={[styles.container, style]}>\n        <View style={[styles.content, { backgroundColor: colors.background }]}>\n          {routes.map((route, index) => {\n            if (!loaded.includes(route.key)) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n            const focused = navigationState.index === index;\n\n            const opacity = sceneAnimationEnabled\n              ? tabs[index]\n              : focused\n              ? 1\n              : 0;\n\n            const top = offsets[index].interpolate({\n              inputRange: [0, 1],\n              outputRange: [0, FAR_FAR_AWAY],\n            });\n\n            return (\n              <Animated.View\n                key={route.key}\n                pointerEvents={focused ? 'auto' : 'none'}\n                accessibilityElementsHidden={!focused}\n                importantForAccessibility={\n                  focused ? 'auto' : 'no-hide-descendants'\n                }\n                style={[StyleSheet.absoluteFill, { opacity }]}\n                collapsable={false}\n                removeClippedSubviews={\n                  // On iOS, set removeClippedSubviews to true only when not focused\n                  // This is an workaround for a bug where the clipped view never re-appears\n                  Platform.OS === 'ios' ? navigationState.index !== index : true\n                }\n              >\n                <Animated.View\n                  style={[\n                    styles.content,\n                    { top },\n                    Platform.OS === 'web'\n                      ? {\n                          display: loaded.includes(route.key) ? 'flex' : 'none',\n                        }\n                      : null,\n                  ]}\n                >\n                  {renderScene({\n                    route,\n                    jumpTo: this.jumpTo,\n                  })}\n                </Animated.View>\n              </Animated.View>\n            );\n          })}\n        </View>\n        <Surface\n          style={\n            [\n              styles.bar,\n              keyboardHidesNavigationBar\n                ? {\n                    // When the keyboard is shown, slide down the navigation bar\n                    transform: [\n                      {\n                        translateY: visible.interpolate({\n                          inputRange: [0, 1],\n                          outputRange: [layout.height, 0],\n                        }),\n                      },\n                    ],\n                    // Absolutely position the navigation bar so that the content is below it\n                    // This is needed to avoid gap at bottom when the navigation bar is hidden\n                    position: keyboard ? 'absolute' : null,\n                  }\n                : null,\n              barStyle,\n            ] as StyleProp<ViewStyle>\n          }\n          pointerEvents={\n            layout.measured\n              ? keyboardHidesNavigationBar && keyboard\n                ? 'none'\n                : 'auto'\n              : 'none'\n          }\n          onLayout={this.handleLayout}\n        >\n          <Animated.View style={[styles.barContent, { backgroundColor }]}>\n            <SafeAreaView\n              forceInset={{ top: 'never', bottom: 'always' }}\n              style={[styles.items, { maxWidth: maxTabBarWidth }]}\n            >\n              {shifting ? (\n                <Animated.View\n                  pointerEvents=\"none\"\n                  style={[\n                    styles.ripple,\n                    {\n                      // Since we have a single ripple, we have to reposition it so that it appears to expand from active tab.\n                      // We need to move it from the top to center of the navigation bar and from the left to the active tab.\n                      top: (BAR_HEIGHT - rippleSize) / 2,\n                      left:\n                        tabWidth * (navigationState.index + 0.5) -\n                        rippleSize / 2,\n                      height: rippleSize,\n                      width: rippleSize,\n                      borderRadius: rippleSize / 2,\n                      backgroundColor: getColor({\n                        route: routes[navigationState.index],\n                      }),\n                      transform: [\n                        {\n                          // Scale to twice the size  to ensure it covers the whole navigation bar\n                          scale: ripple.interpolate({\n                            inputRange: [0, 1],\n                            outputRange: [0, 8],\n                          }),\n                        },\n                      ],\n                      opacity: ripple.interpolate({\n                        inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n                        outputRange: [0, 0, 1, 1],\n                      }),\n                    },\n                  ]}\n                />\n              ) : null}\n              {routes.map((route, index) => {\n                const focused = navigationState.index === index;\n                const active = tabs[index];\n\n                // Scale the label up\n                const scale =\n                  labeled && shifting\n                    ? active.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [0.5, 1],\n                      })\n                    : 1;\n\n                // Move down the icon to account for no-label in shifting and smaller label in non-shifting.\n                const translateY = labeled\n                  ? shifting\n                    ? active.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [7, 0],\n                      })\n                    : 0\n                  : 7;\n\n                // We render the active icon and label on top of inactive ones and cross-fade them on change.\n                // This trick gives the illusion that we are animating between active and inactive colors.\n                // This is to ensure that we can use native driver, as colors cannot be animated with native driver.\n                const activeOpacity = active;\n                const inactiveOpacity = active.interpolate({\n                  inputRange: [0, 1],\n                  outputRange: [1, 0],\n                });\n\n                const badge = getBadge({ route });\n\n                return renderTouchable({\n                  key: route.key,\n                  route,\n                  borderless: true,\n                  centered: true,\n                  rippleColor: touchColor,\n                  onPress: () => this.handleTabPress(index),\n                  testID: getTestID({ route }),\n                  accessibilityLabel: getAccessibilityLabel({ route }),\n                  accessibilityTraits: focused\n                    ? ['button', 'selected']\n                    : 'button',\n                  accessibilityComponentType: 'button',\n                  accessibilityRole: 'button',\n                  accessibilityState: { selected: true },\n                  style: styles.item,\n                  children: (\n                    <View pointerEvents=\"none\">\n                      <Animated.View\n                        style={[\n                          styles.iconContainer,\n                          { transform: [{ translateY }] },\n                        ]}\n                      >\n                        <Animated.View\n                          style={[\n                            styles.iconWrapper,\n                            { opacity: activeOpacity },\n                          ]}\n                        >\n                          {renderIcon ? (\n                            renderIcon({\n                              route,\n                              focused: true,\n                              color: activeTintColor,\n                            })\n                          ) : (\n                            <Icon\n                              source={route.icon as IconSource}\n                              color={activeTintColor}\n                              size={24}\n                            />\n                          )}\n                        </Animated.View>\n                        <Animated.View\n                          style={[\n                            styles.iconWrapper,\n                            { opacity: inactiveOpacity },\n                          ]}\n                        >\n                          {renderIcon ? (\n                            renderIcon({\n                              route,\n                              focused: false,\n                              color: inactiveTintColor,\n                            })\n                          ) : (\n                            <Icon\n                              source={route.icon as IconSource}\n                              color={inactiveTintColor}\n                              size={24}\n                            />\n                          )}\n                        </Animated.View>\n                        <View\n                          style={[\n                            styles.badgeContainer,\n                            {\n                              right:\n                                (badge != null && typeof badge !== 'boolean'\n                                  ? String(badge).length * -2\n                                  : 0) - 2,\n                            },\n                          ]}\n                        >\n                          {typeof badge === 'boolean' ? (\n                            <Badge visible={badge} size={8} />\n                          ) : (\n                            <Badge visible={badge != null} size={16}>\n                              {badge}\n                            </Badge>\n                          )}\n                        </View>\n                      </Animated.View>\n                      {labeled ? (\n                        <Animated.View\n                          style={[\n                            styles.labelContainer,\n                            { transform: [{ scale }] },\n                          ]}\n                        >\n                          <Animated.View\n                            style={[\n                              styles.labelWrapper,\n                              { opacity: activeOpacity },\n                            ]}\n                          >\n                            {renderLabel ? (\n                              renderLabel({\n                                route,\n                                focused: true,\n                                color: activeTintColor,\n                              })\n                            ) : (\n                              <Text\n                                style={[\n                                  styles.label,\n                                  { color: activeTintColor },\n                                ]}\n                              >\n                                {getLabelText({ route })}\n                              </Text>\n                            )}\n                          </Animated.View>\n                          {shifting ? null : (\n                            <Animated.View\n                              style={[\n                                styles.labelWrapper,\n                                { opacity: inactiveOpacity },\n                              ]}\n                            >\n                              {renderLabel ? (\n                                renderLabel({\n                                  route,\n                                  focused: false,\n                                  color: inactiveTintColor,\n                                })\n                              ) : (\n                                <Text\n                                  style={[\n                                    styles.label,\n                                    { color: inactiveTintColor },\n                                  ]}\n                                >\n                                  {getLabelText({ route })}\n                                </Text>\n                              )}\n                            </Animated.View>\n                          )}\n                        </Animated.View>\n                      ) : (\n                        <View style={styles.labelContainer} />\n                      )}\n                    </View>\n                  ),\n                });\n              })}\n            </SafeAreaView>\n          </Animated.View>\n        </Surface>\n      </View>\n    );\n  }\n}\n\nexport default withTheme(BottomNavigation);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  content: {\n    flex: 1,\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4,\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n  items: {\n    flexDirection: 'row',\n    width: '100%',\n  },\n  item: {\n    flex: 1,\n    // Top padding is 6 and bottom padding is 10\n    // The extra 4dp bottom padding is offset by label's height\n    paddingVertical: 6,\n  },\n  ripple: {\n    position: 'absolute',\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center',\n  },\n  iconWrapper: {\n    ...StyleSheet.absoluteFillObject,\n    alignItems: 'center',\n  },\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2,\n  },\n  labelWrapper: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  // eslint-disable-next-line react-native/no-color-literals\n  label: {\n    fontSize: 12,\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n    ...(Platform.OS === 'web'\n      ? {\n          whiteSpace: 'nowrap',\n          alignSelf: 'center',\n        }\n      : null),\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}