{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport { CommonActions } from '@react-navigation/routers';\nimport NavigationStateContext from \"./NavigationStateContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport Screen from \"./Screen\";\nimport useEventEmitter from \"./useEventEmitter\";\nimport useRegisterNavigator from \"./useRegisterNavigator\";\nimport useDescriptors from \"./useDescriptors\";\nimport useNavigationHelpers from \"./useNavigationHelpers\";\nimport useOnAction from \"./useOnAction\";\nimport useFocusEvents from \"./useFocusEvents\";\nimport useOnRouteFocus from \"./useOnRouteFocus\";\nimport useChildListeners from \"./useChildListeners\";\nimport useFocusedListenersChildrenAdapter from \"./useFocusedListenersChildrenAdapter\";\nimport useKeyedChildListeners from \"./useKeyedChildListeners\";\nimport useOnGetState from \"./useOnGetState\";\nimport useScheduleUpdate from \"./useScheduleUpdate\";\nimport useCurrentRender from \"./useCurrentRender\";\nimport isArrayEqual from \"./isArrayEqual\";\nimport { PrivateValueStore } from \"./types\";\n\nPrivateValueStore;\n\nvar getRouteConfigsFromChildren = function getRouteConfigsFromChildren(children) {\n  var configs = React.Children.toArray(children).reduce(function (acc, child) {\n    var _child$type, _child$props;\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        acc.push(child.props);\n        return acc;\n      }\n      if (child.type === React.Fragment) {\n        acc.push.apply(acc, _toConsumableArray(getRouteConfigsFromChildren(child.props.children)));\n        return acc;\n      }\n    }\n    throw new Error(\"A navigator can only contain 'Screen' components as its direct children (found \".concat(React.isValidElement(child) ? \"'\".concat(typeof child.type === 'string' ? child.type : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.name, \"'\").concat(((_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.name) ? \" for the screen '\".concat(child.props.name, \"'\") : '') : typeof child === 'object' ? JSON.stringify(child) : \"'\".concat(String(child), \"'\"), \"). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.\"));\n  }, []);\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach(function (config) {\n      var name = config.name,\n        children = config.children,\n        component = config.component,\n        getComponent = config.getComponent;\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\"Got an invalid name (\".concat(JSON.stringify(name), \") for the screen. It must be a non-empty string.\"));\n      }\n      if (children != null || component !== undefined || getComponent !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(\"Got both 'component' and 'children' props for the screen '\".concat(name, \"'. You must pass only one of them.\"));\n        }\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\"Got both 'getComponent' and 'children' props for the screen '\".concat(name, \"'. You must pass only one of them.\"));\n        }\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\"Got both 'component' and 'getComponent' props for the screen '\".concat(name, \"'. You must pass only one of them.\"));\n        }\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\"Got an invalid value for 'children' prop for the screen '\".concat(name, \"'. It must be a function returning a React Element.\"));\n        }\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\"Got an invalid value for 'component' prop for the screen '\".concat(name, \"'. It must be a valid React Component.\"));\n        }\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\"Got an invalid value for 'getComponent' prop for the screen '\".concat(name, \"'. It must be a function returning a React Component.\"));\n        }\n        if (typeof component === 'function' && component.name === 'component') {\n          console.warn(\"Looks like you're passing an inline function for 'component' prop for the screen '\".concat(name, \"' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.\"));\n        }\n      } else {\n        throw new Error(\"Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '\".concat(name, \"'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.\"));\n      }\n    });\n  }\n  return configs;\n};\n\nexport default function useNavigationBuilder(createRouter, options) {\n  var navigatorKey = useRegisterNavigator();\n  var route = React.useContext(NavigationRouteContext);\n  var children = options.children,\n    rest = _objectWithoutProperties(options, [\"children\"]);\n  var _React$useRef = React.useRef(createRouter(_objectSpread(_objectSpread({}, rest), (route === null || route === void 0 ? void 0 : route.params) && route.params.state == null && route.params.initial !== false && typeof route.params.screen === 'string' ? {\n      initialRouteName: route.params.screen\n    } : null))),\n    router = _React$useRef.current;\n  var routeConfigs = getRouteConfigsFromChildren(children);\n  var screens = routeConfigs.reduce(function (acc, config) {\n    if (config.name in acc) {\n      throw new Error(\"A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '\".concat(config.name, \"')\"));\n    }\n    acc[config.name] = config;\n    return acc;\n  }, {});\n  var routeNames = routeConfigs.map(function (config) {\n    return config.name;\n  });\n  var routeParamList = routeNames.reduce(function (acc, curr) {\n    var _route$params, _route$params2, _route$params3;\n    var initialParams = screens[curr].initialParams;\n    var initialParamsFromParams = (route === null || route === void 0 ? void 0 : (_route$params = route.params) === null || _route$params === void 0 ? void 0 : _route$params.state) == null && (route === null || route === void 0 ? void 0 : (_route$params2 = route.params) === null || _route$params2 === void 0 ? void 0 : _route$params2.initial) !== false && (route === null || route === void 0 ? void 0 : (_route$params3 = route.params) === null || _route$params3 === void 0 ? void 0 : _route$params3.screen) === curr ? route.params.params : undefined;\n    acc[curr] = initialParams !== undefined || initialParamsFromParams !== undefined ? _objectSpread(_objectSpread({}, initialParams), initialParamsFromParams) : undefined;\n    return acc;\n  }, {});\n  if (!routeNames.length) {\n    throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");\n  }\n  var isStateValid = React.useCallback(function (state) {\n    return state.type === undefined || state.type === router.type;\n  }, [router.type]);\n  var isStateInitialized = React.useCallback(function (state) {\n    return state !== undefined && state.stale === false && isStateValid(state);\n  }, [isStateValid]);\n  var _React$useContext = React.useContext(NavigationStateContext),\n    currentState = _React$useContext.state,\n    getCurrentState = _React$useContext.getState,\n    setState = _React$useContext.setState,\n    setKey = _React$useContext.setKey,\n    getKey = _React$useContext.getKey,\n    getIsInitial = _React$useContext.getIsInitial;\n  var _React$useMemo = React.useMemo(function () {\n      var _route$params4;\n\n      if ((currentState === undefined || !isStateValid(currentState)) && (route === null || route === void 0 ? void 0 : (_route$params4 = route.params) === null || _route$params4 === void 0 ? void 0 : _route$params4.state) == null) {\n        return [router.getInitialState({\n          routeNames: routeNames,\n          routeParamList: routeParamList\n        }), true];\n      } else {\n        var _route$params$state, _route$params5;\n        return [router.getRehydratedState((_route$params$state = route === null || route === void 0 ? void 0 : (_route$params5 = route.params) === null || _route$params5 === void 0 ? void 0 : _route$params5.state) !== null && _route$params$state !== void 0 ? _route$params$state : currentState, {\n          routeNames: routeNames,\n          routeParamList: routeParamList\n        }), false];\n      }\n    }, [currentState, router, isStateValid]),\n    _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n    initializedState = _React$useMemo2[0],\n    isFirstStateInitialization = _React$useMemo2[1];\n  var state =\n  isStateInitialized(currentState) ? currentState : initializedState;\n  var nextState = state;\n  if (!isArrayEqual(state.routeNames, routeNames)) {\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames: routeNames,\n      routeParamList: routeParamList\n    });\n  }\n  var previousNestedParamsRef = React.useRef(route === null || route === void 0 ? void 0 : route.params);\n  React.useEffect(function () {\n    previousNestedParamsRef.current = route === null || route === void 0 ? void 0 : route.params;\n  }, [route === null || route === void 0 ? void 0 : route.params]);\n  if (route === null || route === void 0 ? void 0 : route.params) {\n    var previousParams = previousNestedParamsRef.current;\n    var action;\n    if (typeof route.params.state === 'object' && route.params.state != null && route.params.state !== (previousParams === null || previousParams === void 0 ? void 0 : previousParams.state)) {\n      action = CommonActions.reset(route.params.state);\n    } else if (typeof route.params.screen === 'string' && (route.params.initial === false && isFirstStateInitialization || route.params !== previousParams)) {\n      action = CommonActions.navigate(route.params.screen, route.params.params);\n    }\n\n    var updatedState = action ? router.getStateForAction(nextState, action, {\n      routeNames: routeNames,\n      routeParamList: routeParamList\n    }) : null;\n    nextState = updatedState !== null ? router.getRehydratedState(updatedState, {\n      routeNames: routeNames,\n      routeParamList: routeParamList\n    }) : nextState;\n  }\n  var shouldUpdate = state !== nextState;\n  useScheduleUpdate(function () {\n    if (shouldUpdate) {\n      setState(nextState);\n    }\n  });\n\n  state = nextState;\n  React.useEffect(function () {\n    setKey(navigatorKey);\n    if (!getIsInitial()) {\n      setState(nextState);\n    }\n    return function () {\n      setTimeout(function () {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          setState(undefined);\n        }\n      }, 0);\n    };\n  }, []);\n\n  var initializedStateRef = React.useRef();\n  initializedStateRef.current = initializedState;\n  var getState = React.useCallback(function () {\n    var currentState = getCurrentState();\n    return isStateInitialized(currentState) ? currentState : initializedStateRef.current;\n  }, [getCurrentState, isStateInitialized]);\n  var emitter = useEventEmitter(function (e) {\n    var _ref;\n    var routeNames = [];\n    var route;\n    if (e.target) {\n      var _route;\n      route = state.routes.find(function (route) {\n        return route.key === e.target;\n      });\n      if ((_route = route) === null || _route === void 0 ? void 0 : _route.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push.apply(routeNames, _toConsumableArray(Object.keys(screens).filter(function (name) {\n        var _route2;\n        return ((_route2 = route) === null || _route2 === void 0 ? void 0 : _route2.name) === name;\n      })));\n    }\n    if (route == null) {\n      return;\n    }\n    var navigation = descriptors[route.key].navigation;\n    var listeners = (_ref = []).concat.apply(_ref, _toConsumableArray(routeNames.map(function (name) {\n      var listeners = screens[name].listeners;\n      var map = typeof listeners === 'function' ? listeners({\n        route: route,\n        navigation: navigation\n      }) : listeners;\n      return map ? Object.keys(map).filter(function (type) {\n        return type === e.type;\n      }).map(function (type) {\n        return map === null || map === void 0 ? void 0 : map[type];\n      }) : undefined;\n    }))).filter(function (cb, i, self) {\n      return cb && self.lastIndexOf(cb) === i;\n    });\n    listeners.forEach(function (listener) {\n      return listener === null || listener === void 0 ? void 0 : listener(e);\n    });\n  });\n  useFocusEvents({\n    state: state,\n    emitter: emitter\n  });\n  React.useEffect(function () {\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n  }, [emitter, state]);\n  var _useChildListeners = useChildListeners(),\n    childListeners = _useChildListeners.listeners,\n    addListener = _useChildListeners.addListener;\n  var _useKeyedChildListene = useKeyedChildListeners(),\n    keyedListeners = _useKeyedChildListene.keyedListeners,\n    addKeyedListener = _useKeyedChildListene.addKeyedListener;\n  var onAction = useOnAction({\n    router: router,\n    getState: getState,\n    setState: setState,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames: routeNames,\n      routeParamList: routeParamList\n    },\n    emitter: emitter\n  });\n  var onRouteFocus = useOnRouteFocus({\n    router: router,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    getState: getState,\n    setState: setState\n  });\n  var navigation = useNavigationHelpers({\n    onAction: onAction,\n    getState: getState,\n    emitter: emitter,\n    router: router\n  });\n  useFocusedListenersChildrenAdapter({\n    navigation: navigation,\n    focusedListeners: childListeners.focus\n  });\n  useOnGetState({\n    getState: getState,\n    getStateListeners: keyedListeners.getState\n  });\n  var descriptors = useDescriptors({\n    state: state,\n    screens: screens,\n    navigation: navigation,\n    screenOptions: options.screenOptions,\n    onAction: onAction,\n    getState: getState,\n    setState: setState,\n    onRouteFocus: onRouteFocus,\n    addListener: addListener,\n    addKeyedListener: addKeyedListener,\n    router: router,\n    emitter: emitter\n  });\n  useCurrentRender({\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  });\n  return {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  };\n}","map":{"version":3,"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,kBAAT,QAAmC,UAAnC;AACA,SACEC,aADF,QAUO,2BAVP;AAWA,OAAOC,sBAAP;AACA,OAAOC,sBAAP;AACA,OAAOC,MAAP;AACA,OAAOC,eAAP;AACA,OAAOC,oBAAP;AACA,OAAOC,cAAP;AACA,OAAOC,oBAAP;AACA,OAAOC,WAAP;AACA,OAAOC,cAAP;AACA,OAAOC,eAAP;AACA,OAAOC,iBAAP;AACA,OAAOC,kCAAP;AACA,OAAOC,sBAAP;AACA,OAAOC,aAAP;AACA,OAAOC,iBAAP;AACA,OAAOC,gBAAP;AACA,OAAOC,YAAP;AACA,SAGEC,iBAHF;;AAWAA,iBAAiB;;AAYjB,IAAMC,2BAA2B,GAK/BC,SALID,2BAA2B,CAK/BC,QALkC,EAM/B;EACH,IAAMC,OAAO,GAAGvB,KAAK,CAACwB,QAAN,CAAeC,OAAf,CAAuBH,QAAvB,EAAiCI,MAAjC,CAEd,UAACC,GAAD,EAAMC,KAAN,EAAgB;IAAA;IAChB,IAAI5B,KAAK,CAAC6B,cAAN,CAAqBD,KAArB,CAAJ,EAAiC;MAC/B,IAAIA,KAAK,CAACE,IAAN,KAAezB,MAAnB,EAA2B;QAGzBsB,GAAG,CAACI,IAAJ,CACEH,KAAK,CAACI,KADR;QASA,OAAOL,GAAP;MACD;MAED,IAAIC,KAAK,CAACE,IAAN,KAAe9B,KAAK,CAACiC,QAAzB,EAAmC;QAGjCN,GAAG,CAACI,IAAJ,UAAG,qBACEV,2BAA2B,CAC5BO,KAAK,CAACI,KAAN,CAAYV,QADgB,CADhC;QAKA,OAAOK,GAAP;MACD;IACF;IAED,MAAM,IAAIO,KAAJ,0FAEFlC,KAAK,CAAC6B,cAAN,CAAqBD,KAArB,eAEM,OAAOA,KAAK,CAACE,IAAb,KAAsB,QAAtB,GAAiCF,KAAK,CAACE,IAAvC,kBAA8CF,KAAK,CAACE,IAApD,gDAA8CK,YAAYC,IAFhE,cAIM,sBAAK,CAACJ,KAAN,8DAAaI,IAAb,+BAAwCR,KAAK,CAACI,KAAN,CAAYI,IAApD,SAA8D,EAJpE,IAMI,OAAOR,KAAP,KAAiB,QAAjB,GACAS,IAAI,CAACC,SAAL,CAAeV,KAAf,CADA,cAEIW,MAAM,CAACX,KAAD,CAFV,MARF,gGAAN;EAaD,CA5Ce,EA4Cb,EA5Ca,CAAhB;EA8CA,IAAIY,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzCnB,OAAO,CAACoB,OAAR,CAAiBC,gBAAD,EAAY;MAAA,IAClBR,IAAF,GAA8CQ,MAApD,CAAQR,IAAF;QAAQd,QAAR,GAA8CsB,MAApD,CAActB,QAAR;QAAkBuB,SAAlB,GAA8CD,MAApD,CAAwBC,SAAlB;QAA6BC,eAAiBF,MAApD,CAAmCE;MAEnC,IAAI,OAAOV,IAAP,KAAgB,QAAhB,IAA4B,CAACA,IAAjC,EAAuC;QACrC,MAAM,IAAIF,KAAJ,gCACoBG,IAAI,CAACC,SAAL,CACtBF,IADsB,CADpB,sDAAN;MAKD;MAED,IACEd,QAAQ,IAAI,IAAZ,IACAuB,SAAS,KAAKE,SADd,IAEAD,YAAY,KAAKC,SAHnB,EAIE;QACA,IAAIzB,QAAQ,IAAI,IAAZ,IAAoBuB,SAAS,KAAKE,SAAtC,EAAiD;UAC/C,MAAM,IAAIb,KAAJ,qEACyDE,IADzD,wCAAN;QAGD;QAED,IAAId,QAAQ,IAAI,IAAZ,IAAoBwB,YAAY,KAAKC,SAAzC,EAAoD;UAClD,MAAM,IAAIb,KAAJ,wEAC4DE,IAD5D,wCAAN;QAGD;QAED,IAAIS,SAAS,KAAKE,SAAd,IAA2BD,YAAY,KAAKC,SAAhD,EAA2D;UACzD,MAAM,IAAIb,KAAJ,yEAC6DE,IAD7D,wCAAN;QAGD;QAED,IAAId,QAAQ,IAAI,IAAZ,IAAoB,OAAOA,QAAP,KAAoB,UAA5C,EAAwD;UACtD,MAAM,IAAIY,KAAJ,oEACwDE,IADxD,yDAAN;QAGD;QAED,IAAIS,SAAS,KAAKE,SAAd,IAA2B,CAAC9C,kBAAkB,CAAC4C,SAAD,CAAlD,EAA+D;UAC7D,MAAM,IAAIX,KAAJ,qEACyDE,IADzD,4CAAN;QAGD;QAED,IAAIU,YAAY,KAAKC,SAAjB,IAA8B,OAAOD,YAAP,KAAwB,UAA1D,EAAsE;UACpE,MAAM,IAAIZ,KAAJ,wEAC4DE,IAD5D,2DAAN;QAGD;QAED,IAAI,OAAOS,SAAP,KAAqB,UAArB,IAAmCA,SAAS,CAACT,IAAV,KAAmB,WAA1D,EAAuE;UAIrEY,OAAO,CAACC,IAAR,6FACuFb,IADvF;QAGD;MACF,CAjDD,MAiDO;QACL,MAAM,IAAIF,KAAJ,0FAC8EE,IAD9E,yLAAN;MAGD;IACF,CAjED;EAkED;EAED,OAAOb,OAAP;AACD,CA3HD;;AAoIA,eAAe,SAAS2B,oBAAT,CAObC,YAPa,EAQbC,OARa,EASb;EACA,IAAMC,YAAY,GAAG9C,oBAAoB,EAAzC;EAEA,IAAM+C,KAAK,GAAGtD,KAAK,CAACuD,UAAN,CAAiBnD,sBAAjB,CAAd;EAAA,IAIQkB,QAAF,GAAwB8B,OAA9B,CAAQ9B,QAAF;IAAekC,gCAASJ,OAA9B;EAAA,oBAC4BpD,KAAK,CAACyD,MAAN,CAC1BN,YAAY,iCACLK,IADM,GAEP,MAAK,SAAL,SAAK,WAAL,iBAAK,CAAEE,MAAP,KACJJ,KAAK,CAACI,MAAN,CAAaC,KAAb,IAAsB,IADlB,IAEJL,KAAK,CAACI,MAAN,CAAaE,OAAb,KAAyB,KAFrB,IAGJ,OAAON,KAAK,CAACI,MAAN,CAAaG,MAApB,KAA+B,QAH3B,GAIA;MAAEC,gBAAgB,EAAER,KAAK,CAACI,MAAN,CAAaG;IAAjC,CAJA,GAKA,IALJ,EAHwB,CAA5B;IAAiBE,uBAATC,OAAO;EAYf,IAAMC,YAAY,GAAG5C,2BAA2B,CAI9CC,QAJ8C,CAAhD;EAMA,IAAM4C,OAAO,GAAGD,YAAY,CAACvC,MAAb,CAKd,UAACC,GAAD,EAAMiB,MAAN,EAAiB;IACjB,IAAIA,MAAM,CAACR,IAAP,IAAeT,GAAnB,EAAwB;MACtB,MAAM,IAAIO,KAAJ,qHACyGU,MAAM,CAACR,IADhH,QAAN;IAGD;IAEDT,GAAG,CAACiB,MAAM,CAACR,IAAR,CAAH,GAAmBQ,MAAnB;IACA,OAAOjB,GAAP;EACD,CAde,EAcb,EAda,CAAhB;EAgBA,IAAMwC,UAAU,GAAGF,YAAY,CAACG,GAAb,CAAkBxB,gBAAD;IAAA,OAAYA,MAAM,CAACR,IAApC;EAAA,EAAnB;EACA,IAAMiC,cAAc,GAAGF,UAAU,CAACzC,MAAX,CACrB,UAACC,GAAD,EAAM2C,IAAN,EAAe;IAAA;IAAA,IACLC,gBAAkBL,OAAO,CAACI,IAAD,CAAjC,CAAQC;IACR,IAAMC,uBAAuB,GAC3B,MAAK,SAAL,SAAK,WAAL,kCAAK,CAAEd,MAAP,gEAAeC,KAAf,KAAwB,IAAxB,IACA,MAAK,SAAL,SAAK,WAAL,mCAAK,CAAED,MAAP,kEAAeE,OAAf,MAA2B,KAD3B,IAEA,MAAK,SAAL,SAAK,WAAL,mCAAK,CAAEF,MAAP,kEAAeG,MAAf,MAA0BS,IAF1B,GAGIhB,KAAK,CAACI,MAAN,CAAaA,MAHjB,GAIIX,SALN;IAOApB,GAAG,CAAC2C,IAAD,CAAH,GACEC,aAAa,KAAKxB,SAAlB,IAA+ByB,uBAAuB,KAAKzB,SAA3D,mCAESwB,aADL,GAEKC,2BAELzB,SANN;IAQA,OAAOpB,GAAP;EACD,CAnBoB,EAoBrB,EApBqB,CAAvB;EAuBA,IAAI,CAACwC,UAAU,CAACM,MAAhB,EAAwB;IACtB,MAAM,IAAIvC,KAAJ,CACJ,4FADI,CAAN;EAGD;EAED,IAAMwC,YAAY,GAAG1E,KAAK,CAAC2E,WAAN,CAClBhB,eAAD;IAAA,OAAWA,KAAK,CAAC7B,IAAN,KAAeiB,SAAf,IAA4BY,KAAK,CAAC7B,IAAN,KAAeiC,MAAM,CAACjC,IAD1C;EAAA,GAEnB,CAACiC,MAAM,CAACjC,IAAR,CAFmB,CAArB;EAKA,IAAM8C,kBAAkB,GAAG5E,KAAK,CAAC2E,WAAN,CACxBhB,eAAD;IAAA,OACEA,KAAK,KAAKZ,SAAV,IAAuBY,KAAK,CAACkB,KAAN,KAAgB,KAAvC,IAAgDH,YAAY,CAACf,KAAD,CAFrC;EAAA,GAGzB,CAACe,YAAD,CAHyB,CAA3B;EAAA,wBAaI1E,KAAK,CAACuD,UAAN,CAAiBpD,sBAAjB,CAPJ;IACS2E,YADH,qBACJnB,KAAK;IACKoB,eAFN,qBAEJC,QAAQ;IACRC,QAHI,qBAGJA,QAHI;IAIJC,MAJI,qBAIJA,MAJI;IAKJC,MALI,qBAKJA,MALI;IAMJC;EAAAA,qBAGqDpF,KAAK,CAACqF,OAAN,CAAc,YAAM;MAAA;;MAKzE,IACE,CAACP,YAAY,KAAK/B,SAAjB,IAA8B,CAAC2B,YAAY,CAACI,YAAD,CAA5C,KACA,MAAK,SAAL,SAAK,WAAL,mCAAK,CAAEpB,MAAP,kEAAeC,KAAf,KAAwB,IAF1B,EAGE;QACA,OAAO,CACLI,MAAM,CAACuB,eAAP,CAAuB;UACrBnB,UADqB,EACrBA,UADqB;UAErBE;QAFqB,CAAvB,CADK,EAKL,IALK,CAAP;MAOD,CAXD,MAWO;QAAA;QACL,OAAO,CACLN,MAAM,CAACwB,kBAAP,wBACEjC,KADF,aACEA,KADF,yCACEA,KAAK,CAAEI,MADT,mDACE8B,eAAe7B,KADjB,qEAC2BmB,YAD3B,EAEE;UACEX,UADF,EACEA,UADF;UAEEE;QAFF,CAFF,CADK,EAQL,KARK,CAAP;MAUD;IAQF,CAnCsD,EAmCpD,CAACS,YAAD,EAAef,MAAf,EAAuBW,YAAvB,CAnCoD,CAAvD;IAAA;IAAOe,gBAAD;IAAmBC,0BAAnB;EAqCN,IAAI/B,KAAK;EAIPiB,kBAAkB,CAACE,YAAD,CAAlB,GACKA,YADL,GAEKW,gBANP;EAQA,IAAIE,SAAgB,GAAGhC,KAAvB;EAEA,IAAI,CAACxC,YAAY,CAACwC,KAAK,CAACQ,UAAP,EAAmBA,UAAnB,CAAjB,EAAiD;IAE/CwB,SAAS,GAAG5B,MAAM,CAAC6B,2BAAP,CAAmCjC,KAAnC,EAA0C;MACpDQ,UADoD,EACpDA,UADoD;MAEpDE;IAFoD,CAA1C,CAAZ;EAID;EAED,IAAMwB,uBAAuB,GAAG7F,KAAK,CAACyD,MAAN,CAAaH,KAAb,aAAaA,KAAb,uBAAaA,KAAK,CAAEI,MAApB,CAAhC;EAEA1D,KAAK,CAAC8F,SAAN,CAAgB,YAAM;IACpBD,uBAAuB,CAAC7B,OAAxB,GAAkCV,KAAlC,aAAkCA,KAAlC,uBAAkCA,KAAK,CAAEI,MAAzC;EACD,CAFD,EAEG,CAACJ,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEI,MAAR,CAFH;EAIA,IAAIJ,KAAJ,aAAIA,KAAJ,uBAAIA,KAAK,CAAEI,MAAX,EAAmB;IACjB,IAAMqC,cAAc,GAAGF,uBAAuB,CAAC7B,OAA/C;IAEA,IAAIgC,MAAJ;IAEA,IACE,OAAO1C,KAAK,CAACI,MAAN,CAAaC,KAApB,KAA8B,QAA9B,IACAL,KAAK,CAACI,MAAN,CAAaC,KAAb,IAAsB,IADtB,IAEAL,KAAK,CAACI,MAAN,CAAaC,KAAb,MAAuBoC,cAAvB,aAAuBA,cAAvB,uBAAuBA,cAAc,CAAEpC,KAAvC,CAHF,EAIE;MAEAqC,MAAM,GAAG9F,aAAa,CAAC+F,KAAd,CAAoB3C,KAAK,CAACI,MAAN,CAAaC,KAAjC,CAAT;IACD,CAPD,MAOO,IACL,OAAOL,KAAK,CAACI,MAAN,CAAaG,MAApB,KAA+B,QAA/B,KACEP,KAAK,CAACI,MAAN,CAAaE,OAAb,KAAyB,KAAzB,IAAkC8B,0BAAnC,IACCpC,KAAK,CAACI,MAAN,KAAiBqC,cAFnB,CADK,EAIL;MAGAC,MAAM,GAAG9F,aAAa,CAACgG,QAAd,CAAuB5C,KAAK,CAACI,MAAN,CAAaG,MAApC,EAA4CP,KAAK,CAACI,MAAN,CAAaA,MAAzD,CAAT;IACD;;IAGD,IAAMyC,YAAY,GAAGH,MAAM,GACvBjC,MAAM,CAACqC,iBAAP,CAAyBT,SAAzB,EAAoCK,MAApC,EAA4C;MAC1C7B,UAD0C,EAC1CA,UAD0C;MAE1CE;IAF0C,CAA5C,CADuB,GAKvB,IALJ;IAOAsB,SAAS,GACPQ,YAAY,KAAK,IAAjB,GACIpC,MAAM,CAACwB,kBAAP,CAA0BY,YAA1B,EAAwC;MACtChC,UADsC,EACtCA,UADsC;MAEtCE;IAFsC,CAAxC,CADJ,GAKIsB,SANN;EAOD;EAED,IAAMU,YAAY,GAAG1C,KAAK,KAAKgC,SAA/B;EAEA1E,iBAAiB,CAAC,YAAM;IACtB,IAAIoF,YAAJ,EAAkB;MAEhBpB,QAAQ,CAACU,SAAD,CAAR;IACD;EACF,CALgB,CAAjB;;EAUAhC,KAAK,GAAGgC,SAAR;EAEA3F,KAAK,CAAC8F,SAAN,CAAgB,YAAM;IACpBZ,MAAM,CAAC7B,YAAD,CAAN;IAEA,IAAI,CAAC+B,YAAY,EAAjB,EAAqB;MAInBH,QAAQ,CAACU,SAAD,CAAR;IACD;IAED,OAAO,YAAM;MAKXW,UAAU,CAAC,YAAM;QACf,IAAIvB,eAAe,OAAOhC,SAAtB,IAAmCoC,MAAM,OAAO9B,YAApD,EAAkE;UAChE4B,QAAQ,CAAClC,SAAD,CAAR;QACD;MACF,CAJS,EAIP,CAJO,CAAV;IAKD,CAVD;EAYD,CAtBD,EAsBG,EAtBH;;EA2BA,IAAMwD,mBAAmB,GAAGvG,KAAK,CAACyD,MAAN,EAA5B;EACA8C,mBAAmB,CAACvC,OAApB,GAA8ByB,gBAA9B;EAEA,IAAMT,QAAQ,GAAGhF,KAAK,CAAC2E,WAAN,CAAkB,YAAa;IAC9C,IAAMG,YAAY,GAAGC,eAAe,EAApC;IAEA,OAAOH,kBAAkB,CAACE,YAAD,CAAlB,GACFA,YADE,GAEFyB,mBAAmB,CAACvC,OAFzB;EAGD,CANgB,EAMd,CAACe,eAAD,EAAkBH,kBAAlB,CANc,CAAjB;EAQA,IAAM4B,OAAO,GAAGlG,eAAe,CAAuBmG,WAAD,EAAO;IAAA;IAC1D,IAAItC,UAAU,GAAG,EAAjB;IAEA,IAAIb,KAAJ;IAEA,IAAImD,CAAC,CAACC,MAAN,EAAc;MAAA;MACZpD,KAAK,GAAGK,KAAK,CAACgD,MAAN,CAAaC,IAAb,CAAmBtD,eAAD;QAAA,OAAWA,KAAK,CAACuD,GAAN,KAAcJ,CAAC,CAACC,MAA7C;MAAA,EAAR;MAEA,cAAIpD,KAAJ,2CAAIwD,OAAO1E,IAAX,EAAiB;QACf+B,UAAU,CAACpC,IAAX,CAAgBuB,KAAK,CAAClB,IAAtB;MACD;IACF,CAND,MAMO;MACLkB,KAAK,GAAGK,KAAK,CAACgD,MAAN,CAAahD,KAAK,CAACoD,KAAnB,CAAR;MACA5C,UAAU,CAACpC,IAAX,iBAAU,qBACLiF,MAAM,CAACC,IAAP,CAAY/C,OAAZ,EAAqBgD,MAArB,CAA6B9E,cAAD;QAAA;QAAA,OAAU,iBAAK,UAAL,0CAAOA,IAAP,MAAgBA,IAA1B;MAAA,CAA5B,CADL;IAGD;IAED,IAAIkB,KAAK,IAAI,IAAb,EAAmB;MACjB;IACD;IAED,IAAM6D,UAAU,GAAGC,WAAW,CAAC9D,KAAK,CAACuD,GAAP,CAAX,CAAuBM,UAA1C;IAEA,IAAME,SAAS,GAAI,UAAD,EACfC,MADe,gCAEXnD,UAAU,CAACC,GAAX,CAAgBhC,cAAD,EAAU;MAAA,IAClBiF,YAAcnD,OAAO,CAAC9B,IAAD,CAA7B,CAAQiF;MACR,IAAMjD,GAAG,GACP,OAAOiD,SAAP,KAAqB,UAArB,GACIA,SAAS,CAAC;QAAE/D,KAAK,EAAEA,KAAT;QAAuB6D;MAAvB,CAAD,CADb,GAEIE,SAHN;MAKA,OAAOjD,GAAG,GACN4C,MAAM,CAACC,IAAP,CAAY7C,GAAZ,EACG8C,MADH,CACWpF,cAAD;QAAA,OAAUA,IAAI,KAAK2E,CAAC,CAAC3E,IAD/B;MAAA,GAEGsC,GAFH,CAEQtC,cAAD;QAAA,OAAUsC,GAAV,aAAUA,GAAV,uBAAUA,GAAG,CAAGtC,IAAH,CAFpB;MAAA,EADM,GAINiB,SAJJ;IAKD,CAZE,CAFW,GAgBfmE,MAhBe,CAgBR,UAACK,EAAD,EAAKC,CAAL,EAAQC,IAAR;MAAA,OAAiBF,EAAE,IAAIE,IAAI,CAACC,WAAL,CAAiBH,EAAjB,MAAyBC,CAhBxC;IAAA,EAAlB;IAkBAH,SAAS,CAAC1E,OAAV,CAAmBgF,kBAAD;MAAA,OAAcA,QAAd,aAAcA,QAAd,uBAAcA,QAAQ,CAAGlB,CAAH,CAAxC;IAAA;EACD,CA3C8B,CAA/B;EA6CA9F,cAAc,CAAC;IAAEgD,KAAF,EAAEA,KAAF;IAAS6C;EAAT,CAAD,CAAd;EAEAxG,KAAK,CAAC8F,SAAN,CAAgB,YAAM;IACpBU,OAAO,CAACoB,IAAR,CAAa;MAAE9F,IAAI,EAAE,OAAR;MAAiB+F,IAAI,EAAE;QAAElE;MAAF;IAAvB,CAAb;EACD,CAFD,EAEG,CAAC6C,OAAD,EAAU7C,KAAV,CAFH;EAAA,yBAImD9C,iBAAiB,EAApE;IAAmBiH,cAAb,sBAAET,SAAS;IAAkBU;EAAAA,4BAEUhH,sBAAsB,EAAnE;IAAQiH,cAAF,yBAAEA,cAAF;IAAkBC;EAExB,IAAMC,QAAQ,GAAGxH,WAAW,CAAC;IAC3BqD,MAD2B,EAC3BA,MAD2B;IAE3BiB,QAF2B,EAE3BA,QAF2B;IAG3BC,QAH2B,EAG3BA,QAH2B;IAI3B4B,GAAG,EAAEvD,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEuD,GAJe;IAK3BsB,eAAe,EAAEL,cAAc,CAAC9B,MALL;IAM3BoC,qBAAqB,EAAEJ,cAAc,CAACK,YANX;IAO3BC,mBAAmB,EAAE;MACnBnE,UADmB,EACnBA,UADmB;MAEnBE;IAFmB,CAPM;IAW3BmC;EAX2B,CAAD,CAA5B;EAcA,IAAM+B,YAAY,GAAG3H,eAAe,CAAC;IACnCmD,MADmC,EACnCA,MADmC;IAEnC8C,GAAG,EAAEvD,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEuD,GAFuB;IAGnC7B,QAHmC,EAGnCA,QAHmC;IAInCC;EAJmC,CAAD,CAApC;EAOA,IAAMkC,UAAU,GAAG1G,oBAAoB,CAKrC;IACAyH,QADA,EACAA,QADA;IAEAlD,QAFA,EAEAA,QAFA;IAGAwB,OAHA,EAGAA,OAHA;IAIAzC;EAJA,CALqC,CAAvC;EAYAjD,kCAAkC,CAAC;IACjCqG,UADiC,EACjCA,UADiC;IAEjCqB,gBAAgB,EAAEV,cAAc,CAACW;EAFA,CAAD,CAAlC;EAKAzH,aAAa,CAAC;IACZgE,QADY,EACZA,QADY;IAEZ0D,iBAAiB,EAAEV,cAAc,CAAChD;EAFtB,CAAD,CAAb;EAKA,IAAMoC,WAAW,GAAG5G,cAAc,CAAiC;IACjEmD,KADiE,EACjEA,KADiE;IAEjEO,OAFiE,EAEjEA,OAFiE;IAGjEiD,UAHiE,EAGjEA,UAHiE;IAIjEwB,aAAa,EAAEvF,OAAO,CAACuF,aAJ0C;IAKjET,QALiE,EAKjEA,QALiE;IAMjElD,QANiE,EAMjEA,QANiE;IAOjEC,QAPiE,EAOjEA,QAPiE;IAQjEsD,YARiE,EAQjEA,YARiE;IASjER,WATiE,EASjEA,WATiE;IAUjEE,gBAViE,EAUjEA,gBAViE;IAWjElE,MAXiE,EAWjEA,MAXiE;IAYjEyC;EAZiE,CAAjC,CAAlC;EAeAtF,gBAAgB,CAAC;IACfyC,KADe,EACfA,KADe;IAEfwD,UAFe,EAEfA,UAFe;IAGfC;EAHe,CAAD,CAAhB;EAMA,OAAO;IACLzD,KADK,EACLA,KADK;IAELwD,UAFK,EAELA,UAFK;IAGLC;EAHK,CAAP;AAKD","names":["React","isValidElementType","CommonActions","NavigationStateContext","NavigationRouteContext","Screen","useEventEmitter","useRegisterNavigator","useDescriptors","useNavigationHelpers","useOnAction","useFocusEvents","useOnRouteFocus","useChildListeners","useFocusedListenersChildrenAdapter","useKeyedChildListeners","useOnGetState","useScheduleUpdate","useCurrentRender","isArrayEqual","PrivateValueStore","getRouteConfigsFromChildren","children","configs","Children","toArray","reduce","acc","child","isValidElement","type","push","props","Fragment","Error","_child$type","name","JSON","stringify","String","process","env","NODE_ENV","forEach","config","component","getComponent","undefined","console","warn","useNavigationBuilder","createRouter","options","navigatorKey","route","useContext","rest","useRef","params","state","initial","screen","initialRouteName","router","current","routeConfigs","screens","routeNames","map","routeParamList","curr","initialParams","initialParamsFromParams","length","isStateValid","useCallback","isStateInitialized","stale","currentState","getCurrentState","getState","setState","setKey","getKey","getIsInitial","useMemo","getInitialState","getRehydratedState","_route$params5","initializedState","isFirstStateInitialization","nextState","getStateForRouteNamesChange","previousNestedParamsRef","useEffect","previousParams","action","reset","navigate","updatedState","getStateForAction","shouldUpdate","setTimeout","initializedStateRef","emitter","e","target","routes","find","key","_route","index","Object","keys","filter","navigation","descriptors","listeners","concat","cb","i","self","lastIndexOf","listener","emit","data","childListeners","addListener","keyedListeners","addKeyedListener","onAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","focusedListeners","focus","getStateListeners","screenOptions"],"sources":["useNavigationBuilder.tsx"],"sourcesContent":["import * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationState,\n  ParamListBase,\n  Router,\n  RouterFactory,\n  PartialState,\n  NavigationAction,\n  Route,\n} from '@react-navigation/routers';\nimport NavigationStateContext from './NavigationStateContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport Screen from './Screen';\nimport useEventEmitter from './useEventEmitter';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useDescriptors from './useDescriptors';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useFocusEvents from './useFocusEvents';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useChildListeners from './useChildListeners';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useOnGetState from './useOnGetState';\nimport useScheduleUpdate from './useScheduleUpdate';\nimport useCurrentRender from './useCurrentRender';\nimport isArrayEqual from './isArrayEqual';\nimport {\n  DefaultNavigatorOptions,\n  RouteConfig,\n  PrivateValueStore,\n  EventMapBase,\n  EventMapCore,\n  NavigatorScreenParams,\n} from './types';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute<State extends NavigationState> = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase, State>;\n};\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n        acc.push(\n          child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >\n        );\n        return acc;\n      }\n\n      if (child.type === React.Fragment) {\n        // When we encounter a fragment, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen' components as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props?.name ? ` for the screen '${child.props.name}'` : ''\n            }`\n          : typeof child === 'object'\n          ? JSON.stringify(child)\n          : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function' && component.name === 'component') {\n          // Inline anonymous functions passed in the `component` prop will have the name of the prop\n          // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n          // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n          console.warn(\n            `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n          );\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<ScreenOptions> & RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute<State>\n    | undefined;\n\n  const { children, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...((rest as unknown) as RouterOptions),\n      ...(route?.params &&\n      route.params.state == null &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs = getRouteConfigsFromChildren<\n    State,\n    ScreenOptions,\n    EventMap\n  >(children);\n\n  const screens = routeConfigs.reduce<\n    Record<\n      string,\n      RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\n    >\n  >((acc, config) => {\n    if (config.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.name}')`\n      );\n    }\n\n    acc[config.name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config.name);\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr];\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    },\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state) => state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(\n          route?.params?.state ?? (currentState as PartialState<State>),\n          {\n            routeNames,\n            routeParamList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames/routeParamList in the dep list\n    // below. We want to avoid forcing a new state to be calculated in cases\n    // where routeConfigs change without affecting routeNames/routeParamList.\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (!isArrayEqual(state.routeNames, routeNames)) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params.state !== previousParams?.state\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // FIXME: Since params are merged, `route.params.params` might contain params from an older route\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate(route.params.screen, route.params.params);\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          setState(undefined);\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        ...routeNames.map((name) => {\n          const { listeners } = screens[name];\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const descriptors = useDescriptors<State, ScreenOptions, EventMap>({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  return {\n    state,\n    navigation,\n    descriptors,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}