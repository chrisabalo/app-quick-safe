{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React from 'react';\nimport color from 'color';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { withTheme } from \"../../../core/theming\";\nimport { AdornmentSide } from \"./enums\";\nvar AFFIX_OFFSET = 12;\nvar AffixContext = React.createContext({\n  textStyle: {\n    fontFamily: '',\n    color: ''\n  },\n  topPosition: null,\n  side: AdornmentSide.Left\n});\nvar AffixAdornment = function AffixAdornment(_ref) {\n  var affix = _ref.affix,\n    side = _ref.side,\n    textStyle = _ref.textStyle,\n    topPosition = _ref.topPosition,\n    onLayout = _ref.onLayout,\n    visible = _ref.visible;\n  return React.createElement(AffixContext.Provider, {\n    value: {\n      side: side,\n      textStyle: textStyle,\n      topPosition: topPosition,\n      onLayout: onLayout,\n      visible: visible\n    }\n  }, affix);\n};\nvar TextInputAffix = function TextInputAffix(_ref2) {\n  var text = _ref2.text,\n    labelStyle = _ref2.textStyle,\n    theme = _ref2.theme;\n  var _React$useContext = React.useContext(AffixContext),\n    textStyle = _React$useContext.textStyle,\n    onLayout = _React$useContext.onLayout,\n    topPosition = _React$useContext.topPosition,\n    side = _React$useContext.side,\n    visible = _React$useContext.visible;\n  var textColor = color(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n  var style = _defineProperty({\n    top: topPosition\n  }, side, AFFIX_OFFSET);\n  return React.createElement(Animated.View, {\n    style: [styles.container, style, {\n      opacity: (visible === null || visible === void 0 ? void 0 : visible.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0]\n      })) || 1\n    }],\n    onLayout: onLayout\n  }, React.createElement(Text, {\n    style: [{\n      color: textColor\n    }, textStyle, labelStyle]\n  }, text));\n};\nTextInputAffix.displayName = 'TextInput.Affix';\nvar styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default withTheme(TextInputAffix);\n\nexport { TextInputAffix, AffixAdornment };","map":{"version":3,"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAAA;AAAA;AAAA;AAUA,SAASC,SAAT;AACA,SAASC,aAAT;AAEA,IAAMC,YAAY,GAAG,EAArB;AAoBA,IAAMC,YAAY,GAAGL,KAAK,CAACM,aAAN,CAAkC;EACrDC,SAAS,EAAE;IAAEC,UAAU,EAAE,EAAd;IAAkBP,KAAK,EAAE;EAAzB,CAD0C;EAErDQ,WAAW,EAAE,IAFwC;EAGrDC,IAAI,EAAEP,aAAa,CAACQ;AAHiC,CAAlC,CAArB;AAMA,IAAMC,cAKL,GAAG,SALEA,cAKL,OAAmE;EAAA,IAA7DC,KAAF,QAAEA,KAAF;IAASH,IAAT,QAASA,IAAT;IAAeH,SAAf,QAAeA,SAAf;IAA0BE,WAA1B,QAA0BA,WAA1B;IAAuCK,QAAvC,QAAuCA,QAAvC;IAAiDC;EACpD,OACEf,oBAACK,YAAD,CAAcW,QAAd;IACEC,KAAK,EAAE;MACLP,IADK,EACLA,IADK;MAELH,SAFK,EAELA,SAFK;MAGLE,WAHK,EAGLA,WAHK;MAILK,QAJK,EAILA,QAJK;MAKLC;IALK;EADT,GASGF,KATH,CADF;AAaD,CAnBD;AAqBA,IAAMK,cAAc,GAAG,SAAjBA,cAAc,QAAsD;EAAA,IAAhDC,IAAF,SAAEA,IAAF;IAAmBC,UAAnB,SAAQb,SAAS;IAAcc;EAAAA,wBACOrB,KAAK,CAACsB,UAAN,CAC1DjB,YAD0D,CAA5D;IAAQE,SAAF,qBAAEA,SAAF;IAAaO,QAAb,qBAAaA,QAAb;IAAuBL,WAAvB,qBAAuBA,WAAvB;IAAoCC,IAApC,qBAAoCA,IAApC;IAA0CK;EAGhD,IAAMQ,SAAS,GAAGtB,KAAK,CAACoB,KAAK,CAACG,MAAN,CAAaL,IAAd,CAAL,CACfM,KADe,CACTJ,KAAK,CAACK,IAAN,GAAa,GAAb,GAAmB,IADV,EAEfC,GAFe,GAGfC,MAHe,EAAlB;EAKA,IAAMC,KAAK;IACTC,GAAG,EAAErB;EADO,GAEXC,IAAD,EAAQN,aAFV;EAKA,OACEJ,oBAAC+B,QAAD,CAAUC,IAAV;IACEH,KAAK,EAAE,CACLI,MAAM,CAACC,SADF,EAELL,KAFK,EAGL;MACEM,OAAO,EACL,QAAO,SAAP,WAAO,WAAP,mBAAO,CAAEC,WAAT,CAAqB;QACnBC,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADO;QAEnBC,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;MAFM,CAArB,MAGM;IALV,CAHK,CADT;IAYExB,QAAQ,EAAEA;EAZZ,GAcEd,oBAACuC,IAAD;IAAMV,KAAK,EAAE,CAAC;MAAE5B,KAAK,EAAEsB;IAAT,CAAD,EAAuBhB,SAAvB,EAAkCa,UAAlC;EAAb,GAA6DD,IAA7D,CAdF,CADF;AAkBD,CAhCD;AAiCAD,cAAc,CAACsB,WAAf,GAA6B,iBAA7B;AAEA,IAAMP,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;EAC/BR,SAAS,EAAE;IACTS,QAAQ,EAAE,UADD;IAETC,cAAc,EAAE,QAFP;IAGTC,UAAU,EAAE;EAHH;AADoB,CAAlB,CAAf;AAQA,eAAe3C,SAAS,CAACgB,cAAD,CAAxB;;AAGA,SAASA,cAAT,EAAyBN,cAAzB","names":["React","color","withTheme","AdornmentSide","AFFIX_OFFSET","AffixContext","createContext","textStyle","fontFamily","topPosition","side","Left","AffixAdornment","affix","onLayout","visible","Provider","value","TextInputAffix","text","labelStyle","theme","useContext","textColor","colors","alpha","dark","rgb","string","style","top","Animated","View","styles","container","opacity","interpolate","inputRange","outputRange","Text","displayName","StyleSheet","create","position","justifyContent","alignItems"],"sources":["TextInputAffix.tsx"],"sourcesContent":["import React from 'react';\nimport color from 'color';\nimport {\n  Text,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n  Animated,\n} from 'react-native';\n\nimport { withTheme } from '../../../core/theming';\nimport { AdornmentSide } from './enums';\n\nconst AFFIX_OFFSET = 12;\n\ntype Props = {\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  textStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype ContextState = {\n  topPosition: number | null;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: null,\n  side: AdornmentSide.Left,\n});\n\nconst AffixAdornment: React.FunctionComponent<\n  {\n    affix: React.ReactNode;\n    testID: string;\n  } & ContextState\n> = ({ affix, side, textStyle, topPosition, onLayout, visible }) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\nconst TextInputAffix = ({ text, textStyle: labelStyle, theme }: Props) => {\n  const { textStyle, onLayout, topPosition, side, visible } = React.useContext(\n    AffixContext\n  );\n  const textColor = color(theme.colors.text)\n    .alpha(theme.dark ? 0.7 : 0.54)\n    .rgb()\n    .string();\n\n  const style = {\n    top: topPosition,\n    [side]: AFFIX_OFFSET,\n  };\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n    >\n      <Text style={[{ color: textColor }, textStyle, labelStyle]}>{text}</Text>\n    </Animated.View>\n  );\n};\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(TextInputAffix);\n\n// @component-docs ignore-next-line\nexport { TextInputAffix, AffixAdornment };\n"]},"metadata":{},"sourceType":"module"}