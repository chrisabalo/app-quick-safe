{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport TouchableItem from \"./TouchableItem\";\nvar Touchable = function Touchable(_ref) {\n  var children = _ref.children,\n    style = _ref.style,\n    _onPress = _ref.onPress,\n    to = _ref.to,\n    accessibilityRole = _ref.accessibilityRole,\n    delayPressIn = _ref.delayPressIn,\n    rest = _objectWithoutProperties(_ref, [\"children\", \"style\", \"onPress\", \"to\", \"accessibilityRole\", \"delayPressIn\"]);\n  if (Platform.OS === 'web' && to) {\n    return React.createElement(Link, _extends({}, rest, {\n      to: to,\n      style: [styles.button, style],\n      onPress: function onPress(e) {\n        if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (\n        e.button == null || e.button === 0)) {\n          e.preventDefault();\n          _onPress === null || _onPress === void 0 ? void 0 : _onPress(e);\n        }\n      }\n    }), children);\n  } else {\n    return React.createElement(TouchableItem, _extends({}, rest, {\n      accessibilityRole: accessibilityRole,\n      delayPressIn: delayPressIn,\n      onPress: _onPress\n    }), React.createElement(View, {\n      style: style\n    }, children));\n  }\n};\n\nexport default function DrawerItem(props) {\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var icon = props.icon,\n    label = props.label,\n    labelStyle = props.labelStyle,\n    to = props.to,\n    _props$focused = props.focused,\n    focused = _props$focused === void 0 ? false : _props$focused,\n    _props$activeTintColo = props.activeTintColor,\n    activeTintColor = _props$activeTintColo === void 0 ? colors.primary : _props$activeTintColo,\n    _props$inactiveTintCo = props.inactiveTintColor,\n    inactiveTintColor = _props$inactiveTintCo === void 0 ? Color(colors.text).alpha(0.68).rgb().string() : _props$inactiveTintCo,\n    _props$activeBackgrou = props.activeBackgroundColor,\n    activeBackgroundColor = _props$activeBackgrou === void 0 ? Color(activeTintColor).alpha(0.12).rgb().string() : _props$activeBackgrou,\n    _props$inactiveBackgr = props.inactiveBackgroundColor,\n    inactiveBackgroundColor = _props$inactiveBackgr === void 0 ? 'transparent' : _props$inactiveBackgr,\n    style = props.style,\n    onPress = props.onPress,\n    pressColor = props.pressColor,\n    pressOpacity = props.pressOpacity,\n    rest = _objectWithoutProperties(props, [\"icon\", \"label\", \"labelStyle\", \"to\", \"focused\", \"activeTintColor\", \"inactiveTintColor\", \"activeBackgroundColor\", \"inactiveBackgroundColor\", \"style\", \"onPress\", \"pressColor\", \"pressOpacity\"]);\n  var _StyleSheet$flatten = StyleSheet.flatten(style || {}),\n    _StyleSheet$flatten$b = _StyleSheet$flatten.borderRadius,\n    borderRadius = _StyleSheet$flatten$b === void 0 ? 4 : _StyleSheet$flatten$b;\n  var color = focused ? activeTintColor : inactiveTintColor;\n  var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n  var iconNode = icon ? icon({\n    size: 24,\n    focused: focused,\n    color: color\n  }) : null;\n  return React.createElement(View, _extends({\n    collapsable: false\n  }, rest, {\n    style: [styles.container, {\n      borderRadius: borderRadius,\n      backgroundColor: backgroundColor\n    }, style]\n  }), React.createElement(Touchable, {\n    delayPressIn: 0,\n    onPress: onPress,\n    style: [styles.wrapper, {\n      borderRadius: borderRadius\n    }],\n    accessibilityTraits: focused ? ['button', 'selected'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: focused\n    },\n\n    accessibilityStates: focused ? ['selected'] : [],\n    pressColor: pressColor,\n    pressOpacity: pressOpacity,\n    to: to\n  }, React.createElement(React.Fragment, null, iconNode, React.createElement(View, {\n    style: [styles.label, {\n      marginLeft: iconNode ? 32 : 0,\n      marginVertical: 5\n    }]\n  }, typeof label === 'string' ? React.createElement(Text, {\n    numberOfLines: 1,\n    style: [{\n      color: color,\n      fontWeight: '500'\n    }, labelStyle]\n  }, label) : label({\n    color: color,\n    focused: focused\n  })))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden'\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  label: {\n    marginRight: 32,\n    flex: 1\n  },\n  button: {\n    display: 'flex'\n  }\n});","map":{"version":3,"mappings":"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","names":["React","Link","useTheme","Color","TouchableItem","Touchable","children","style","onPress","to","accessibilityRole","delayPressIn","rest","Platform","OS","styles","button","e","metaKey","altKey","ctrlKey","shiftKey","preventDefault","View","DrawerItem","props","colors","icon","label","labelStyle","focused","activeTintColor","primary","inactiveTintColor","text","alpha","rgb","string","activeBackgroundColor","inactiveBackgroundColor","pressColor","pressOpacity","StyleSheet","flatten","borderRadius","color","backgroundColor","iconNode","size","collapsable","container","wrapper","accessibilityTraits","accessibilityComponentType","accessibilityState","selected","accessibilityStates","Fragment","marginLeft","marginVertical","Text","numberOfLines","fontWeight","create","marginHorizontal","overflow","flexDirection","alignItems","padding","marginRight","flex","display"],"sources":["DrawerItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Text,\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  Platform,\n  TouchableWithoutFeedbackProps,\n} from 'react-native';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport TouchableItem from './TouchableItem';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  focused?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Color of the touchable effect on press.\n   * Only supported on Android.\n   *\n   * @platform android\n   */\n  pressColor?: string;\n  /**\n   * Opacity of the touchable effect on press.\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  pressOpacity?: string;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nconst Touchable = ({\n  children,\n  style,\n  onPress,\n  to,\n  accessibilityRole,\n  delayPressIn,\n  ...rest\n}: TouchableWithoutFeedbackProps & {\n  to?: string;\n  children: React.ReactNode;\n  onPress?: () => void;\n}) => {\n  if (Platform.OS === 'web' && to) {\n    // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n    // We need to use `onClick` to be able to prevent default browser handling of links.\n    return (\n      <Link\n        {...rest}\n        to={to}\n        style={[styles.button, style]}\n        onPress={(e: any) => {\n          if (\n            !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n            (e.button == null || e.button === 0) // ignore everything but left clicks\n          ) {\n            e.preventDefault();\n            onPress?.(e);\n          }\n        }}\n      >\n        {children}\n      </Link>\n    );\n  } else {\n    return (\n      <TouchableItem\n        {...rest}\n        accessibilityRole={accessibilityRole}\n        delayPressIn={delayPressIn}\n        onPress={onPress}\n      >\n        <View style={style}>{children}</View>\n      </TouchableItem>\n    );\n  }\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport default function DrawerItem(props: Props) {\n  const { colors } = useTheme();\n\n  const {\n    icon,\n    label,\n    labelStyle,\n    to,\n    focused = false,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n    activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    pressColor,\n    pressOpacity,\n    ...rest\n  } = props;\n\n  const { borderRadius = 4 } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\n\n  return (\n    <View\n      collapsable={false}\n      {...rest}\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\n    >\n      <Touchable\n        delayPressIn={0}\n        onPress={onPress}\n        style={[styles.wrapper, { borderRadius }]}\n        accessibilityTraits={focused ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: focused }}\n        // @ts-expect-error: keep for compatibility with older React Native versions\n        accessibilityStates={focused ? ['selected'] : []}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        to={to}\n      >\n        <React.Fragment>\n          {iconNode}\n          <View\n            style={[\n              styles.label,\n              { marginLeft: iconNode ? 32 : 0, marginVertical: 5 },\n            ]}\n          >\n            {typeof label === 'string' ? (\n              <Text\n                numberOfLines={1}\n                style={[\n                  {\n                    color,\n                    fontWeight: '500',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label({ color, focused })\n            )}\n          </View>\n        </React.Fragment>\n      </Touchable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden',\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n    flex: 1,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}