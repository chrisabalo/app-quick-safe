{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"E:\\\\local\\\\app-quick-safe\\\\App.js\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport 'react-native-gesture-handler';\nimport React from 'react';\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport Providers from \"./navigation\";\nimport LoadingScreen from \"./screens/LoadingScreen\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { colors } from \"./styles\";\nimport { StatusBar } from \"expo-status-bar\";\nimport 'moment/locale/fr-ca';\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n  var _super = _createSuper(App);\n  function App(props) {\n    var _this;\n    _classCallCheck(this, App);\n    _this = _super.call(this, props);\n    _this.state = {\n      fontLoaded: false\n    };\n    return _this;\n  }\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync(_objectSpread({\n                'Teko-Bold': require(\"./assets/fonts/Teko-Bold.ttf\"),\n                'Teko-Light': require(\"./assets/fonts/Teko-Light.ttf\"),\n                'Teko-Medium': require(\"./assets/fonts/Teko-Medium.ttf\"),\n                'Teko-Regular': require(\"./assets/fonts/Teko-Regular.ttf\"),\n                'Teko-SemiBold': require(\"./assets/fonts/Teko-SemiBold.ttf\"),\n                'Kufam-SemiBoldItalic': require(\"./assets/fonts/Kufam-SemiBoldItalic.ttf\"),\n                'Lato-BoldItalic': require(\"./assets/fonts/Lato-BoldItalic.ttf\"),\n                'Lato-Italic': require(\"./assets/fonts/Lato-Italic.ttf\"),\n                'Lato-Bold': require(\"./assets/fonts/Lato-Bold.ttf\"),\n                'Lato-Regular': require(\"./assets/fonts/Lato-Regular.ttf\"),\n                'Roboto-Black': require(\"./assets/fonts/Roboto-Black.ttf\"),\n                'Roboto-Bold': require(\"./assets/fonts/Roboto-Bold.ttf\"),\n                'Roboto-BoldItalic': require(\"./assets/fonts/Roboto-BoldItalic.ttf\"),\n                'Roboto-Light': require(\"./assets/fonts/Roboto-Light.ttf\"),\n                'Roboto-Medium': require(\"./assets/fonts/Roboto-Medium.ttf\"),\n                'Roboto-Regular': require(\"./assets/fonts/Roboto-Regular.ttf\"),\n                'Roboto-Thin': require(\"./assets/fonts/Roboto-Thin.ttf\"),\n                'Oswald-Bold': require(\"./assets/fonts/static/Oswald-Bold.ttf\"),\n                'Oswald-ExtraLight': require(\"./assets/fonts/static/Oswald-ExtraLight.ttf\"),\n                'Oswald-Light': require(\"./assets/fonts/static/Oswald-Light.ttf\"),\n                'Oswald-Medium': require(\"./assets/fonts/static/Oswald-Medium.ttf\"),\n                'Oswald-Regular': require(\"./assets/fonts/static/Oswald-Regular.ttf\"),\n                'Oswald-SemiBold': require(\"./assets/fonts/static/Oswald-SemiBold.ttf\")\n              }, Ionicons.font)));\n            case 2:\n              this.setState({\n                fontLoaded: true\n              });\n              console.log('Fonts are loaded');\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.setState = function (state, callback) {\n        return;\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.fontLoaded) {\n        console.log('font loaded', this.state.fontLoaded);\n        return React.createElement(React.Fragment, null, React.createElement(Providers, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }\n        }), React.createElement(StatusBar, {\n          style: \"light\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }\n        }));\n      }\n      return React.createElement(LoadingScreen, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 12\n        }\n      });\n    }\n  }]);\n  return App;\n}(React.Component);\nexport { App as default };","map":{"version":3,"names":["React","Font","Ionicons","Providers","LoadingScreen","colors","StatusBar","App","props","state","fontLoaded","loadAsync","require","font","setState","console","log","callback","Component"],"sources":["E:/local/app-quick-safe/App.js"],"sourcesContent":["import 'react-native-gesture-handler';\nimport React from 'react';\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport Providers from './navigation';\nimport LoadingScreen from \"./screens/LoadingScreen\";\nimport {ActivityIndicator} from \"react-native\";\nimport {colors} from \"./styles\";\nimport {StatusBar} from \"expo-status-bar\";\nimport 'moment/locale/fr-ca';\n\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fontLoaded: false\n    }\n  }\n\n  async componentDidMount() {\n      await Font.loadAsync({\n        'Teko-Bold': require('./assets/fonts/Teko-Bold.ttf'),\n        'Teko-Light': require('./assets/fonts/Teko-Light.ttf'),\n        'Teko-Medium': require('./assets/fonts/Teko-Medium.ttf'),\n        'Teko-Regular': require('./assets/fonts/Teko-Regular.ttf'),\n        'Teko-SemiBold': require('./assets/fonts/Teko-SemiBold.ttf'),\n        'Kufam-SemiBoldItalic': require('./assets/fonts/Kufam-SemiBoldItalic.ttf'),\n        'Lato-BoldItalic': require('./assets/fonts/Lato-BoldItalic.ttf'),\n        'Lato-Italic': require('./assets/fonts/Lato-Italic.ttf'),\n        'Lato-Bold': require('./assets/fonts/Lato-Bold.ttf'),\n        'Lato-Regular': require('./assets/fonts/Lato-Regular.ttf'),\n        'Roboto-Black': require('./assets/fonts/Roboto-Black.ttf'),\n        'Roboto-Bold': require('./assets/fonts/Roboto-Bold.ttf'),\n        'Roboto-BoldItalic': require('./assets/fonts/Roboto-BoldItalic.ttf'),\n        'Roboto-Light': require('./assets/fonts/Roboto-Light.ttf'),\n        'Roboto-Medium': require('./assets/fonts/Roboto-Medium.ttf'),\n        'Roboto-Regular': require('./assets/fonts/Roboto-Regular.ttf'),\n        'Roboto-Thin': require('./assets/fonts/Roboto-Thin.ttf'),\n        'Oswald-Bold': require('./assets/fonts/static/Oswald-Bold.ttf'),\n        'Oswald-ExtraLight': require('./assets/fonts/static/Oswald-ExtraLight.ttf'),\n        'Oswald-Light': require('./assets/fonts/static/Oswald-Light.ttf'),\n        'Oswald-Medium': require('./assets/fonts/static/Oswald-Medium.ttf'),\n        'Oswald-Regular': require('./assets/fonts/static/Oswald-Regular.ttf'),\n        'Oswald-SemiBold': require('./assets/fonts/static/Oswald-SemiBold.ttf'),\n        ...Ionicons.font\n      })\n      this.setState({ fontLoaded: true})\n\n      console.log('Fonts are loaded')\n\n\n  }\n      componentWillUnmount() {\n        // fix Warning: Can't perform a React state update on an unmounted component\n        this.setState = (state,callback)=>{\n          return;\n        };\n      }\n \n\n  render() {\n\n    if (this.state.fontLoaded) {\n      console.log('font loaded', this.state.fontLoaded)\n      return (\n          <>\n            <Providers />\n            <StatusBar style={\"light\"} />\n          </>\n      );\n    }\n   /* return <ActivityIndicator\n        style={{ flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center',\n          backgroundColor: colors.dark}}\n          color={colors.pink}\n          size={50} />;*/\n    return <LoadingScreen />\n\n  }\n}\n"],"mappings":";;;;;;;;;;;;AAAA,OAAO,8BAA8B;AACrC,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,IAAI,MAAM,WAAW;AACjC,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,OAAOC,SAAS;AAChB,OAAOC,aAAa;AAAgC;AAEpD,SAAQC,MAAM;AACd,SAAQC,SAAS,QAAO,iBAAiB;AACzC,OAAO,qBAAqB;AAAC,IAGRC,GAAG;EAAA;EAAA;EACtB,aAAYC,KAAK,EAAE;IAAA;IAAA;IACjB,0BAAMA,KAAK;IACX,MAAKC,KAAK,GAAG;MACXC,UAAU,EAAE;IACd,CAAC;IAAA;EACH;EAAC;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,iCAGST,IAAI,CAACU,SAAS;gBAClB,WAAW,EAAEC,OAAO,gCAAgC;gBACpD,YAAY,EAAEA,OAAO,iCAAiC;gBACtD,aAAa,EAAEA,OAAO,kCAAkC;gBACxD,cAAc,EAAEA,OAAO,mCAAmC;gBAC1D,eAAe,EAAEA,OAAO,oCAAoC;gBAC5D,sBAAsB,EAAEA,OAAO,2CAA2C;gBAC1E,iBAAiB,EAAEA,OAAO,sCAAsC;gBAChE,aAAa,EAAEA,OAAO,kCAAkC;gBACxD,WAAW,EAAEA,OAAO,gCAAgC;gBACpD,cAAc,EAAEA,OAAO,mCAAmC;gBAC1D,cAAc,EAAEA,OAAO,mCAAmC;gBAC1D,aAAa,EAAEA,OAAO,kCAAkC;gBACxD,mBAAmB,EAAEA,OAAO,wCAAwC;gBACpE,cAAc,EAAEA,OAAO,mCAAmC;gBAC1D,eAAe,EAAEA,OAAO,oCAAoC;gBAC5D,gBAAgB,EAAEA,OAAO,qCAAqC;gBAC9D,aAAa,EAAEA,OAAO,kCAAkC;gBACxD,aAAa,EAAEA,OAAO,yCAAyC;gBAC/D,mBAAmB,EAAEA,OAAO,+CAA+C;gBAC3E,cAAc,EAAEA,OAAO,0CAA0C;gBACjE,eAAe,EAAEA,OAAO,2CAA2C;gBACnE,gBAAgB,EAAEA,OAAO,4CAA4C;gBACrE,iBAAiB,EAAEA,OAAO;cAA6C,GACpEV,QAAQ,CAACW,IAAI,EAChB;YAAA;cACF,IAAI,CAACC,QAAQ,CAAC;gBAAEJ,UAAU,EAAE;cAAI,CAAC,CAAC;cAElCK,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAAA;IAAA;IAAA,uCAIR;MAErB,IAAI,CAACF,QAAQ,GAAG,UAACL,KAAK,EAACQ,QAAQ,EAAG;QAChC;MACF,CAAC;IACH;EAAC;IAAA;IAAA,yBAGI;MAEP,IAAI,IAAI,CAACR,KAAK,CAACC,UAAU,EAAE;QACzBK,OAAO,CAACC,GAAG,CAAC,aAAa,EAAE,IAAI,CAACP,KAAK,CAACC,UAAU,CAAC;QACjD,OACI,0CACE,oBAAC,SAAS;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EAAG,EACb,oBAAC,SAAS;UAAC,KAAK,EAAE,OAAQ;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EAAG,CAC5B;MAET;MAQA,OAAO,oBAAC,aAAa;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAAG;IAE1B;EAAC;EAAA;AAAA,EArE8BV,KAAK,CAACkB,SAAS;AAAA,SAA3BX,GAAG"},"metadata":{},"sourceType":"module"}